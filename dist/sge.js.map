{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/deparam.js",
    "lib/grammar/_tokenizer-table.js",
    "lib/grammar/tokenizer.js",
    "lib/trie.js",
    "node_modules/codemirror/addon/display/fullscreen.js",
    "node_modules/codemirror/addon/edit/matchbrackets.js",
    "node_modules/codemirror/addon/fold/brace-fold.js",
    "node_modules/codemirror/addon/fold/foldcode.js",
    "node_modules/codemirror/addon/fold/foldgutter.js",
    "node_modules/codemirror/addon/fold/xml-fold.js",
    "node_modules/codemirror/addon/hint/show-hint.js",
    "node_modules/codemirror/addon/runmode/runmode.js",
    "node_modules/codemirror/addon/search/searchcursor.js",
    "node_modules/store/dist/store.legacy.js",
    "node_modules/store/plugins/json2.js",
    "node_modules/store/plugins/lib/json2.js",
    "node_modules/store/src/store-engine.js",
    "node_modules/store/src/util.js",
    "node_modules/store/storages/all.js",
    "node_modules/store/storages/cookieStorage.js",
    "node_modules/store/storages/localStorage.js",
    "node_modules/store/storages/memoryStorage.js",
    "node_modules/store/storages/oldFF-globalStorage.js",
    "node_modules/store/storages/oldIE-userDataStorage.js",
    "node_modules/store/storages/sessionStorage.js",
    "node_modules/yasgui-utils/package.json",
    "node_modules/yasgui-utils/src/main.js",
    "node_modules/yasgui-utils/src/storage.js",
    "node_modules/yasgui-utils/src/svg.js",
    "package.json",
    "src/autocompleters/autocompleterBase.js",
    "src/autocompleters/classes.js",
    "src/autocompleters/prefixes.js",
    "src/autocompleters/properties.js",
    "src/autocompleters/utils.js",
    "src/autocompleters/variables.js",
    "src/curl.js",
    "src/defaults.js",
    "src/entry.js",
    "src/imgs.js",
    "src/main.js",
    "src/prefixFold.js",
    "src/prefixUtils.js",
    "src/sparql.js",
    "src/tokenUtils.js",
    "src/tooltip.js",
    "src/utils.js"
  ],
  "names": [],
  "mappingsv9MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC74BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztlttbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxfttCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrjtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5KA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzpnlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "\"use strict\";\r\n/*\r\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\r\n  http://benalman.com/projects/jquery-bbq-plugin/\r\n*/\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n$.deparam = function(params, coerce) {\r\n  var obj = {}, coerce_types = { true: !0, false: !1, null: null };\r\n\r\n  // Iterate over all name=value pairs.\r\n  $.each(params.replace(/\\+/g, \" \").split(\"&\"), function(j, v) {\r\n    var param = v.split(\"=\"),\r\n      key = decodeURIComponent(param[0]),\r\n      val,\r\n      cur = obj,\r\n      i = 0,\r\n      // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\r\n      // into its component parts.\r\n      keys = key.split(\"][\"),\r\n      keys_last = keys.length - 1;\r\n\r\n    // If the first keys part contains [ and the last ends with ], then []\r\n    // are correctly balanced.\r\n    if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\r\n      // Remove the trailing ] from the last keys part.\r\n      keys[keys_last] = keys[keys_last].replace(/\\]$/, \"\");\r\n\r\n      // Split first keys part into two parts on the [ and add them back onto\r\n      // the beginning of the keys array.\r\n      keys = keys.shift().split(\"[\").concat(keys);\r\n\r\n      keys_last = keys.length - 1;\r\n    } else {\r\n      // Basic 'foo' style key.\r\n      keys_last = 0;\r\n    }\r\n\r\n    // Are we dealing with a name=value pair, or just a name?\r\n    if (param.length === 2) {\r\n      val = decodeURIComponent(param[1]);\r\n\r\n      // Coerce values.\r\n      if (coerce) {\r\n        val = val && !isNaN(val)\r\n          ? +val // number\r\n          : val === \"undefined\"\r\n              ? undefined // undefined\r\n              : coerce_types[val] !== undefined\r\n                  ? coerce_types[val] // true, false, null\r\n                  : val; // string\r\n      }\r\n\r\n      if (keys_last) {\r\n        // Complex key, build deep object structure based on a few rules:\r\n        // * The 'cur' pointer starts at the object top-level.\r\n        // * [] = array push (n is set to array length), [n] = array if n is\r\n        //   numeric, otherwise object.\r\n        // * If at the last keys part, set the value.\r\n        // * For each keys part, if the current level is undefined create an\r\n        //   object or array based on the type of the next keys part.\r\n        // * Move the 'cur' pointer to the next level.\r\n        // * Rinse & repeat.\r\n        for (; i <= keys_last; i++) {\r\n          key = keys[i] === \"\" ? cur.length : keys[i];\r\n          cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;\r\n        }\r\n      } else {\r\n        // Simple key, even simpler rules, since only scalars and shallow\r\n        // arrays are allowed.\r\n\r\n        if ($.isArray(obj[key])) {\r\n          // val is already an array, so push on the next value.\r\n          obj[key].push(val);\r\n        } else if (obj[key] !== undefined) {\r\n          // val isn't an array, but since a second value has been specified,\r\n          // convert val into an array.\r\n          obj[key] = [obj[key], val];\r\n        } else {\r\n          // val is a scalar.\r\n          obj[key] = val;\r\n        }\r\n      }\r\n    } else if (key) {\r\n      // No value was defined, so set something meaningful.\r\n      obj[key] = coerce ? undefined : \"\";\r\n    }\r\n  });\r\n\r\n  return obj;\r\n};\r\n",
    "module.exports = {table:\r\n{\r\n  \"*[ (,expression,AS,var,)]\" : {\r\n     \"(\": [\"[ (,expression,AS,var,)]\",\"*[ (,expression,AS,var,)]\"], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"$\": []}, \r\n  \"*[&&,valueLogical]\" : {\r\n     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"||\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*[,,expression]\" : {\r\n     \",\": [\"[,,expression]\",\"*[,,expression]\"], \r\n     \")\": []}, \r\n  \"*[,,objectPath]\" : {\r\n     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \r\n     \".\": [], \r\n     \";\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"*[,,object]\" : {\r\n     \",\": [\"[,,object]\",\"*[,,object]\"], \r\n     \"}\": [], \r\n     \".\": [], \r\n     \";\": [], \r\n     \"]\": [], \r\n     \"GENERATE\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"*[,,pExpression]\" : {\r\n     \",\": [\"[,,pExpression]\",\"*[,,pExpression]\"], \r\n     \")\": []}, \r\n  \"*[,,var]\" : {\r\n     \",\": [\"[,,var]\",\"*[,,var]\"], \r\n     \")\": []}, \r\n  \"*[/,pathEltOrInverse]\" : {\r\n     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \r\n     \"|\": [], \r\n     \")\": [], \r\n     \"LIST\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": []}, \r\n  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\r\n     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"*[;,?[verb,objectList]]\" : {\r\n     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \r\n     \"}\": [], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"GENERATE\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"*[UNION,groupGraphPattern]\" : {\r\n     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": [], \r\n     \".\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"*[[subGenerateQuery,.],?constructTriples]\" : {\r\n     \"GENERATE\": [\"[[subGenerateQuery,.],?constructTriples]\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"}\": []}, \r\n  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\r\n     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"}\": []}, \r\n  \"*[subPerformQuery,.]\" : {\r\n     \"PERFORM\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"VAR1\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"VAR2\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"IRI_REF\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"IRI_REF_START\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"START_XEXPR\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"PNAME_LN\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"PNAME_NS\": [\"[subPerformQuery,.]\",\"*[subPerformQuery,.]\"], \r\n     \"}\": []}, \r\n  \"*[|,pathOneInPropertySet]\" : {\r\n     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \r\n     \")\": []}, \r\n  \"*[|,pathSequence]\" : {\r\n     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \r\n     \")\": [], \r\n     \"LIST\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": []}, \r\n  \"*[||,conditionalAndExpression]\" : {\r\n     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*bindingClauses\" : {\r\n     \"ITERATOR\": [\"bindingClauses\",\"*bindingClauses\"], \r\n     \"SOURCE\": [\"bindingClauses\",\"*bindingClauses\"], \r\n     \"BIND\": [\"bindingClauses\",\"*bindingClauses\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"$\": []}, \r\n  \"*dataBlockValue\" : {\r\n     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \r\n     \"}\": [], \r\n     \")\": []}, \r\n  \"*datasetClause\" : {\r\n     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*graphNode\" : {\r\n     \"(\": [\"graphNode\",\"*graphNode\"], \r\n     \"[\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \r\n     \"NIL\": [\"graphNode\",\"*graphNode\"], \r\n     \"START_XEXPR\": [\"graphNode\",\"*graphNode\"], \r\n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \r\n     \"IRI_REF_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \r\n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \r\n     \"ANON\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL1_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL2_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\",\"*graphNode\"], \r\n     \")\": []}, \r\n  \"*graphNodePath\" : {\r\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"START_XEXPR\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"IRI_REF_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL1_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL2_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \")\": []}, \r\n  \"*groupCondition\" : {\r\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"*havingCondition\" : {\r\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\r\n     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \r\n     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \r\n     \"}\": []}, \r\n  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\r\n     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*or([baseDecl,prefixDecl])\" : {\r\n     \"BASE\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \r\n     \"PREFIX\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \r\n     \"GENERATE\": [], \r\n     \"TEMPLATE\": [], \r\n     \"PERFORM\": [], \r\n     \"FUNCTION\": [], \r\n     \"SELECT\": []}, \r\n  \"*or([primaryExpressionNotBracketted,box,tformat])\" : {\r\n     \"BOX\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"FORMAT\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STR\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"LANG\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"LANGMATCHES\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DATATYPE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"BOUND\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"IRI\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"URI\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"BNODE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"RAND\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ABS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"CEIL\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"FLOOR\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ROUND\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"CONCAT\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRLEN\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"UCASE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"LCASE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ENCODE_FOR_URI\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"CONTAINS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRSTARTS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRENDS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRBEFORE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRAFTER\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"YEAR\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"MONTH\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DAY\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"HOURS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"MINUTES\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SECONDS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"TIMEZONE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"TZ\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"NOW\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"UUID\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRUUID\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"MD5\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SHA1\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SHA256\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SHA384\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SHA512\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"COALESCE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"IF\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRLANG\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRDT\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SAMETERM\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ISIRI\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ISURI\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ISBLANK\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ISLITERAL\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"ISNUMERIC\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"TRUE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"FALSE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"VAR1\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"VAR2\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"COUNT\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SUM\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"MIN\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"MAX\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"AVG\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SAMPLE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"GROUP_CONCAT\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"SUBSTR\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"REPLACE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"REGEX\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"EXISTS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"NOT\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"IRI_REF\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"IRI_REF_START\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"INTEGER\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DECIMAL\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DOUBLE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"PNAME_LN\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"PNAME_NS\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL1\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL1_START\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL2\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL2_START\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"or([primaryExpressionNotBracketted,box,tformat])\",\"*or([primaryExpressionNotBracketted,box,tformat])\"], \r\n     \"}\": [], \r\n     \";\": []}, \r\n  \"*or([var,[ (,expression,AS,var,)]])\" : {\r\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"FROM\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"*orderCondition\" : {\r\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"(\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"*tExpression\" : {\r\n     \"BOX\": [\"tExpression\",\"*tExpression\"], \r\n     \"FORMAT\": [\"tExpression\",\"*tExpression\"], \r\n     \"GROUP\": [\"tExpression\",\"*tExpression\"], \r\n     \"TEMPLATE\": [\"tExpression\",\"*tExpression\"], \r\n     \"STR\": [\"tExpression\",\"*tExpression\"], \r\n     \"LANG\": [\"tExpression\",\"*tExpression\"], \r\n     \"LANGMATCHES\": [\"tExpression\",\"*tExpression\"], \r\n     \"DATATYPE\": [\"tExpression\",\"*tExpression\"], \r\n     \"BOUND\": [\"tExpression\",\"*tExpression\"], \r\n     \"IRI\": [\"tExpression\",\"*tExpression\"], \r\n     \"URI\": [\"tExpression\",\"*tExpression\"], \r\n     \"BNODE\": [\"tExpression\",\"*tExpression\"], \r\n     \"RAND\": [\"tExpression\",\"*tExpression\"], \r\n     \"ABS\": [\"tExpression\",\"*tExpression\"], \r\n     \"CEIL\": [\"tExpression\",\"*tExpression\"], \r\n     \"FLOOR\": [\"tExpression\",\"*tExpression\"], \r\n     \"ROUND\": [\"tExpression\",\"*tExpression\"], \r\n     \"CONCAT\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRLEN\": [\"tExpression\",\"*tExpression\"], \r\n     \"UCASE\": [\"tExpression\",\"*tExpression\"], \r\n     \"LCASE\": [\"tExpression\",\"*tExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"tExpression\",\"*tExpression\"], \r\n     \"CONTAINS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRSTARTS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRENDS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRBEFORE\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRAFTER\": [\"tExpression\",\"*tExpression\"], \r\n     \"YEAR\": [\"tExpression\",\"*tExpression\"], \r\n     \"MONTH\": [\"tExpression\",\"*tExpression\"], \r\n     \"DAY\": [\"tExpression\",\"*tExpression\"], \r\n     \"HOURS\": [\"tExpression\",\"*tExpression\"], \r\n     \"MINUTES\": [\"tExpression\",\"*tExpression\"], \r\n     \"SECONDS\": [\"tExpression\",\"*tExpression\"], \r\n     \"TIMEZONE\": [\"tExpression\",\"*tExpression\"], \r\n     \"TZ\": [\"tExpression\",\"*tExpression\"], \r\n     \"NOW\": [\"tExpression\",\"*tExpression\"], \r\n     \"UUID\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRUUID\": [\"tExpression\",\"*tExpression\"], \r\n     \"MD5\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA1\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA256\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA384\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA512\": [\"tExpression\",\"*tExpression\"], \r\n     \"COALESCE\": [\"tExpression\",\"*tExpression\"], \r\n     \"IF\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRLANG\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRDT\": [\"tExpression\",\"*tExpression\"], \r\n     \"SAMETERM\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISIRI\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISURI\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISBLANK\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISLITERAL\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISNUMERIC\": [\"tExpression\",\"*tExpression\"], \r\n     \"TRUE\": [\"tExpression\",\"*tExpression\"], \r\n     \"FALSE\": [\"tExpression\",\"*tExpression\"], \r\n     \"VAR1\": [\"tExpression\",\"*tExpression\"], \r\n     \"VAR2\": [\"tExpression\",\"*tExpression\"], \r\n     \"COUNT\": [\"tExpression\",\"*tExpression\"], \r\n     \"SUM\": [\"tExpression\",\"*tExpression\"], \r\n     \"MIN\": [\"tExpression\",\"*tExpression\"], \r\n     \"MAX\": [\"tExpression\",\"*tExpression\"], \r\n     \"AVG\": [\"tExpression\",\"*tExpression\"], \r\n     \"SAMPLE\": [\"tExpression\",\"*tExpression\"], \r\n     \"GROUP_CONCAT\": [\"tExpression\",\"*tExpression\"], \r\n     \"SUBSTR\": [\"tExpression\",\"*tExpression\"], \r\n     \"REPLACE\": [\"tExpression\",\"*tExpression\"], \r\n     \"REGEX\": [\"tExpression\",\"*tExpression\"], \r\n     \"EXISTS\": [\"tExpression\",\"*tExpression\"], \r\n     \"NOT\": [\"tExpression\",\"*tExpression\"], \r\n     \"IRI_REF\": [\"tExpression\",\"*tExpression\"], \r\n     \"IRI_REF_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"INTEGER\": [\"tExpression\",\"*tExpression\"], \r\n     \"DECIMAL\": [\"tExpression\",\"*tExpression\"], \r\n     \"DOUBLE\": [\"tExpression\",\"*tExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"PNAME_LN\": [\"tExpression\",\"*tExpression\"], \r\n     \"PNAME_NS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL1\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL1_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL2\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL2_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"}\": [], \r\n     \";\": []}, \r\n  \"*var\" : {\r\n     \"VAR1\": [\"var\",\"*var\"], \r\n     \"VAR2\": [\"var\",\"*var\"], \r\n     \")\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \",\": [], \r\n     \"$\": []}, \r\n  \"+[ (,expression,AS,var,)]\" : {\r\n     \"(\": [\"[ (,expression,AS,var,)]\",\"*[ (,expression,AS,var,)]\"]}, \r\n  \"+graphNode\" : {\r\n     \"(\": [\"graphNode\",\"*graphNode\"], \r\n     \"[\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \r\n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \r\n     \"NIL\": [\"graphNode\",\"*graphNode\"], \r\n     \"START_XEXPR\": [\"graphNode\",\"*graphNode\"], \r\n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \r\n     \"IRI_REF_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \r\n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \r\n     \"ANON\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \r\n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL1_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL2_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\",\"*graphNode\"]}, \r\n  \"+graphNodePath\" : {\r\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"START_XEXPR\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"IRI_REF_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL1_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL2_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\",\"*graphNodePath\"]}, \r\n  \"+groupCondition\" : {\r\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \r\n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \r\n  \"+havingCondition\" : {\r\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \r\n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \r\n  \"+or([var,[ (,expression,AS,var,)]])\" : {\r\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \r\n  \"+orderCondition\" : {\r\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"(\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \r\n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \r\n  \"+tExpression\" : {\r\n     \"BOX\": [\"tExpression\",\"*tExpression\"], \r\n     \"FORMAT\": [\"tExpression\",\"*tExpression\"], \r\n     \"GROUP\": [\"tExpression\",\"*tExpression\"], \r\n     \"TEMPLATE\": [\"tExpression\",\"*tExpression\"], \r\n     \"STR\": [\"tExpression\",\"*tExpression\"], \r\n     \"LANG\": [\"tExpression\",\"*tExpression\"], \r\n     \"LANGMATCHES\": [\"tExpression\",\"*tExpression\"], \r\n     \"DATATYPE\": [\"tExpression\",\"*tExpression\"], \r\n     \"BOUND\": [\"tExpression\",\"*tExpression\"], \r\n     \"IRI\": [\"tExpression\",\"*tExpression\"], \r\n     \"URI\": [\"tExpression\",\"*tExpression\"], \r\n     \"BNODE\": [\"tExpression\",\"*tExpression\"], \r\n     \"RAND\": [\"tExpression\",\"*tExpression\"], \r\n     \"ABS\": [\"tExpression\",\"*tExpression\"], \r\n     \"CEIL\": [\"tExpression\",\"*tExpression\"], \r\n     \"FLOOR\": [\"tExpression\",\"*tExpression\"], \r\n     \"ROUND\": [\"tExpression\",\"*tExpression\"], \r\n     \"CONCAT\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRLEN\": [\"tExpression\",\"*tExpression\"], \r\n     \"UCASE\": [\"tExpression\",\"*tExpression\"], \r\n     \"LCASE\": [\"tExpression\",\"*tExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"tExpression\",\"*tExpression\"], \r\n     \"CONTAINS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRSTARTS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRENDS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRBEFORE\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRAFTER\": [\"tExpression\",\"*tExpression\"], \r\n     \"YEAR\": [\"tExpression\",\"*tExpression\"], \r\n     \"MONTH\": [\"tExpression\",\"*tExpression\"], \r\n     \"DAY\": [\"tExpression\",\"*tExpression\"], \r\n     \"HOURS\": [\"tExpression\",\"*tExpression\"], \r\n     \"MINUTES\": [\"tExpression\",\"*tExpression\"], \r\n     \"SECONDS\": [\"tExpression\",\"*tExpression\"], \r\n     \"TIMEZONE\": [\"tExpression\",\"*tExpression\"], \r\n     \"TZ\": [\"tExpression\",\"*tExpression\"], \r\n     \"NOW\": [\"tExpression\",\"*tExpression\"], \r\n     \"UUID\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRUUID\": [\"tExpression\",\"*tExpression\"], \r\n     \"MD5\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA1\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA256\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA384\": [\"tExpression\",\"*tExpression\"], \r\n     \"SHA512\": [\"tExpression\",\"*tExpression\"], \r\n     \"COALESCE\": [\"tExpression\",\"*tExpression\"], \r\n     \"IF\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRLANG\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRDT\": [\"tExpression\",\"*tExpression\"], \r\n     \"SAMETERM\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISIRI\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISURI\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISBLANK\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISLITERAL\": [\"tExpression\",\"*tExpression\"], \r\n     \"ISNUMERIC\": [\"tExpression\",\"*tExpression\"], \r\n     \"TRUE\": [\"tExpression\",\"*tExpression\"], \r\n     \"FALSE\": [\"tExpression\",\"*tExpression\"], \r\n     \"VAR1\": [\"tExpression\",\"*tExpression\"], \r\n     \"VAR2\": [\"tExpression\",\"*tExpression\"], \r\n     \"COUNT\": [\"tExpression\",\"*tExpression\"], \r\n     \"SUM\": [\"tExpression\",\"*tExpression\"], \r\n     \"MIN\": [\"tExpression\",\"*tExpression\"], \r\n     \"MAX\": [\"tExpression\",\"*tExpression\"], \r\n     \"AVG\": [\"tExpression\",\"*tExpression\"], \r\n     \"SAMPLE\": [\"tExpression\",\"*tExpression\"], \r\n     \"GROUP_CONCAT\": [\"tExpression\",\"*tExpression\"], \r\n     \"SUBSTR\": [\"tExpression\",\"*tExpression\"], \r\n     \"REPLACE\": [\"tExpression\",\"*tExpression\"], \r\n     \"REGEX\": [\"tExpression\",\"*tExpression\"], \r\n     \"EXISTS\": [\"tExpression\",\"*tExpression\"], \r\n     \"NOT\": [\"tExpression\",\"*tExpression\"], \r\n     \"IRI_REF\": [\"tExpression\",\"*tExpression\"], \r\n     \"IRI_REF_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"INTEGER\": [\"tExpression\",\"*tExpression\"], \r\n     \"DECIMAL\": [\"tExpression\",\"*tExpression\"], \r\n     \"DOUBLE\": [\"tExpression\",\"*tExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"tExpression\",\"*tExpression\"], \r\n     \"PNAME_LN\": [\"tExpression\",\"*tExpression\"], \r\n     \"PNAME_NS\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL1\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL1_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL2\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL2_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"tExpression\",\"*tExpression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"tExpression\",\"*tExpression\"]}, \r\n  \"+var\" : {\r\n     \"VAR1\": [\"var\",\"*var\"], \r\n     \"VAR2\": [\"var\",\"*var\"]}, \r\n  \"?.\" : {\r\n     \".\": [\".\"], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?DISTINCT\" : {\r\n     \"DISTINCT\": [\"DISTINCT\"], \r\n     \"{\": [], \r\n     \"!\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"(\": [], \r\n     \"STR\": [], \r\n     \"LANG\": [], \r\n     \"LANGMATCHES\": [], \r\n     \"DATATYPE\": [], \r\n     \"BOUND\": [], \r\n     \"IRI\": [], \r\n     \"URI\": [], \r\n     \"BNODE\": [], \r\n     \"RAND\": [], \r\n     \"ABS\": [], \r\n     \"CEIL\": [], \r\n     \"FLOOR\": [], \r\n     \"ROUND\": [], \r\n     \"CONCAT\": [], \r\n     \"STRLEN\": [], \r\n     \"UCASE\": [], \r\n     \"LCASE\": [], \r\n     \"ENCODE_FOR_URI\": [], \r\n     \"CONTAINS\": [], \r\n     \"STRSTARTS\": [], \r\n     \"STRENDS\": [], \r\n     \"STRBEFORE\": [], \r\n     \"STRAFTER\": [], \r\n     \"YEAR\": [], \r\n     \"MONTH\": [], \r\n     \"DAY\": [], \r\n     \"HOURS\": [], \r\n     \"MINUTES\": [], \r\n     \"SECONDS\": [], \r\n     \"TIMEZONE\": [], \r\n     \"TZ\": [], \r\n     \"NOW\": [], \r\n     \"UUID\": [], \r\n     \"STRUUID\": [], \r\n     \"MD5\": [], \r\n     \"SHA1\": [], \r\n     \"SHA256\": [], \r\n     \"SHA384\": [], \r\n     \"SHA512\": [], \r\n     \"COALESCE\": [], \r\n     \"IF\": [], \r\n     \"STRLANG\": [], \r\n     \"STRDT\": [], \r\n     \"SAMETERM\": [], \r\n     \"ISIRI\": [], \r\n     \"ISURI\": [], \r\n     \"ISBLANK\": [], \r\n     \"ISLITERAL\": [], \r\n     \"ISNUMERIC\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"COUNT\": [], \r\n     \"SUM\": [], \r\n     \"MIN\": [], \r\n     \"MAX\": [], \r\n     \"AVG\": [], \r\n     \"SAMPLE\": [], \r\n     \"GROUP_CONCAT\": [], \r\n     \"SUBSTR\": [], \r\n     \"REPLACE\": [], \r\n     \"REGEX\": [], \r\n     \"EXISTS\": [], \r\n     \"NOT\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": [], \r\n     \"*\": []}, \r\n  \"?SILENT\" : {\r\n     \"SILENT\": [\"SILENT\"], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"START_XEXPR\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": []}, \r\n  \"?WHERE\" : {\r\n     \"WHERE\": [\"WHERE\"], \r\n     \"{\": []}, \r\n  \"?[,,expression]\" : {\r\n     \",\": [\"[,,expression]\"], \r\n     \")\": []}, \r\n  \"?[.,?constructTriples]\" : {\r\n     \".\": [\"[.,?constructTriples]\"], \r\n     \"}\": [], \r\n     \"GENERATE\": []}, \r\n  \"?[.,?triplesBlock]\" : {\r\n     \".\": [\"[.,?triplesBlock]\"], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\" : {\r\n     \";\": [\"[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"}\": []}, \r\n  \"?[;,templateAfter]\" : {\r\n     \";\": [\"[;,templateAfter]\"], \r\n     \"}\": []}, \r\n  \"?[ACCEPT,varOrXIri]\" : {\r\n     \"ACCEPT\": [\"[ACCEPT,varOrXIri]\"], \r\n     \"AS\": []}, \r\n  \"?[AS,var]\" : {\r\n     \"AS\": [\"[AS,var]\"], \r\n     \")\": []}, \r\n  \"?[NAMED,expression]\" : {\r\n     \"NAMED\": [\"[NAMED,expression]\"], \r\n     \".\": []}, \r\n  \"?[WHERE,groupGraphPattern]\" : {\r\n     \"WHERE\": [\"[WHERE,groupGraphPattern]\"], \r\n     \".\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": []}, \r\n  \"?[or([verbPath,verbSimple]),objectList]\" : {\r\n     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"START_XEXPR\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"IRI_REF_START\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \r\n     \";\": [], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\r\n     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"IRI_REF_START\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \r\n     \")\": []}, \r\n  \"?[sourceSelector,?varList]\" : {\r\n     \"IRI_REF\": [\"[sourceSelector,?varList]\"], \r\n     \"PNAME_LN\": [\"[sourceSelector,?varList]\"], \r\n     \"PNAME_NS\": [\"[sourceSelector,?varList]\"], \r\n     \"{\": []}, \r\n  \"?[sourceSelector,varList]\" : {\r\n     \"IRI_REF\": [\"[sourceSelector,varList]\"], \r\n     \"PNAME_LN\": [\"[sourceSelector,varList]\"], \r\n     \"PNAME_NS\": [\"[sourceSelector,varList]\"], \r\n     \"*\": [], \r\n     \"(\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"DISTINCT\": [], \r\n     \"REDUCED\": []}, \r\n  \"?[verb,objectList]\" : {\r\n     \"a\": [\"[verb,objectList]\"], \r\n     \"VAR1\": [\"[verb,objectList]\"], \r\n     \"VAR2\": [\"[verb,objectList]\"], \r\n     \"NIL\": [\"[verb,objectList]\"], \r\n     \"START_XEXPR\": [\"[verb,objectList]\"], \r\n     \"IRI_REF\": [\"[verb,objectList]\"], \r\n     \"IRI_REF_START\": [\"[verb,objectList]\"], \r\n     \"TRUE\": [\"[verb,objectList]\"], \r\n     \"FALSE\": [\"[verb,objectList]\"], \r\n     \"BLANK_NODE_LABEL\": [\"[verb,objectList]\"], \r\n     \"ANON\": [\"[verb,objectList]\"], \r\n     \"PNAME_LN\": [\"[verb,objectList]\"], \r\n     \"PNAME_NS\": [\"[verb,objectList]\"], \r\n     \"INTEGER\": [\"[verb,objectList]\"], \r\n     \"DECIMAL\": [\"[verb,objectList]\"], \r\n     \"DOUBLE\": [\"[verb,objectList]\"], \r\n     \"INTEGER_POSITIVE\": [\"[verb,objectList]\"], \r\n     \"DECIMAL_POSITIVE\": [\"[verb,objectList]\"], \r\n     \"DOUBLE_POSITIVE\": [\"[verb,objectList]\"], \r\n     \"INTEGER_NEGATIVE\": [\"[verb,objectList]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"[verb,objectList]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL1\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL1_START\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL2\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL2_START\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"[verb,objectList]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"[verb,objectList]\"], \r\n     \";\": [], \r\n     \"}\": [], \r\n     \".\": [], \r\n     \"]\": [], \r\n     \"GENERATE\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": []}, \r\n  \"?argList\" : {\r\n     \"NIL\": [\"argList\"], \r\n     \"(\": [\"argList\"], \r\n     \"}\": [], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"*\": [], \r\n     \"/\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \".\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \"BOX\": [], \r\n     \"FORMAT\": [], \r\n     \"TEMPLATE\": [], \r\n     \"STR\": [], \r\n     \"LANG\": [], \r\n     \"LANGMATCHES\": [], \r\n     \"DATATYPE\": [], \r\n     \"BOUND\": [], \r\n     \"IRI\": [], \r\n     \"URI\": [], \r\n     \"BNODE\": [], \r\n     \"RAND\": [], \r\n     \"ABS\": [], \r\n     \"CEIL\": [], \r\n     \"FLOOR\": [], \r\n     \"ROUND\": [], \r\n     \"CONCAT\": [], \r\n     \"STRLEN\": [], \r\n     \"UCASE\": [], \r\n     \"LCASE\": [], \r\n     \"ENCODE_FOR_URI\": [], \r\n     \"CONTAINS\": [], \r\n     \"STRSTARTS\": [], \r\n     \"STRENDS\": [], \r\n     \"STRBEFORE\": [], \r\n     \"STRAFTER\": [], \r\n     \"YEAR\": [], \r\n     \"MONTH\": [], \r\n     \"DAY\": [], \r\n     \"HOURS\": [], \r\n     \"MINUTES\": [], \r\n     \"SECONDS\": [], \r\n     \"TIMEZONE\": [], \r\n     \"TZ\": [], \r\n     \"NOW\": [], \r\n     \"UUID\": [], \r\n     \"STRUUID\": [], \r\n     \"MD5\": [], \r\n     \"SHA1\": [], \r\n     \"SHA256\": [], \r\n     \"SHA384\": [], \r\n     \"SHA512\": [], \r\n     \"COALESCE\": [], \r\n     \"IF\": [], \r\n     \"STRLANG\": [], \r\n     \"STRDT\": [], \r\n     \"SAMETERM\": [], \r\n     \"ISIRI\": [], \r\n     \"ISURI\": [], \r\n     \"ISBLANK\": [], \r\n     \"ISLITERAL\": [], \r\n     \"ISNUMERIC\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"COUNT\": [], \r\n     \"SUM\": [], \r\n     \"MIN\": [], \r\n     \"MAX\": [], \r\n     \"AVG\": [], \r\n     \"SAMPLE\": [], \r\n     \"GROUP_CONCAT\": [], \r\n     \"SUBSTR\": [], \r\n     \"REPLACE\": [], \r\n     \"REGEX\": [], \r\n     \"EXISTS\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": [], \r\n     \"{\": [], \r\n     \"NAMED\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"?constructTriples\" : {\r\n     \"VAR1\": [\"constructTriples\"], \r\n     \"VAR2\": [\"constructTriples\"], \r\n     \"NIL\": [\"constructTriples\"], \r\n     \"(\": [\"constructTriples\"], \r\n     \"[\": [\"constructTriples\"], \r\n     \"START_XEXPR\": [\"constructTriples\"], \r\n     \"IRI_REF\": [\"constructTriples\"], \r\n     \"IRI_REF_START\": [\"constructTriples\"], \r\n     \"TRUE\": [\"constructTriples\"], \r\n     \"FALSE\": [\"constructTriples\"], \r\n     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \r\n     \"ANON\": [\"constructTriples\"], \r\n     \"PNAME_LN\": [\"constructTriples\"], \r\n     \"PNAME_NS\": [\"constructTriples\"], \r\n     \"INTEGER\": [\"constructTriples\"], \r\n     \"DECIMAL\": [\"constructTriples\"], \r\n     \"DOUBLE\": [\"constructTriples\"], \r\n     \"INTEGER_POSITIVE\": [\"constructTriples\"], \r\n     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \r\n     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \r\n     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \r\n     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \r\n     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \r\n     \"STRING_LITERAL1\": [\"constructTriples\"], \r\n     \"STRING_LITERAL1_START\": [\"constructTriples\"], \r\n     \"STRING_LITERAL2\": [\"constructTriples\"], \r\n     \"STRING_LITERAL2_START\": [\"constructTriples\"], \r\n     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"constructTriples\"], \r\n     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"constructTriples\"], \r\n     \"}\": [], \r\n     \"GENERATE\": []}, \r\n  \"?groupClause\" : {\r\n     \"GROUP\": [\"groupClause\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"?havingClause\" : {\r\n     \"HAVING\": [\"havingClause\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"ORDER\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"?limitClause\" : {\r\n     \"LIMIT\": [\"limitClause\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"?limitOffsetClauses\" : {\r\n     \"LIMIT\": [\"limitOffsetClauses\"], \r\n     \"OFFSET\": [\"limitOffsetClauses\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"?offsetClause\" : {\r\n     \"OFFSET\": [\"offsetClause\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"?or([DISTINCT,REDUCED])\" : {\r\n     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \r\n     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \r\n     \"*\": [], \r\n     \"(\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": []}, \r\n  \"?or([LANGTAG,[^^,iriRef]])\" : {\r\n     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \r\n     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \r\n     \"UNDEF\": [], \r\n     \"IRI_REF\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"}\": [], \r\n     \")\": []}, \r\n  \"?or([LANGTAG,[^^,xiri]])\" : {\r\n     \"LANGTAG\": [\"or([LANGTAG,[^^,xiri]])\"], \r\n     \"^^\": [\"or([LANGTAG,[^^,xiri]])\"], \r\n     \"}\": [], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"*\": [], \r\n     \"/\": [], \r\n     \"a\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": [], \r\n     \"LIST\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"^\": [], \r\n     \"!\": [], \r\n     \".\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"BOX\": [], \r\n     \"FORMAT\": [], \r\n     \"GROUP\": [], \r\n     \"TEMPLATE\": [], \r\n     \"STR\": [], \r\n     \"LANG\": [], \r\n     \"LANGMATCHES\": [], \r\n     \"DATATYPE\": [], \r\n     \"BOUND\": [], \r\n     \"IRI\": [], \r\n     \"URI\": [], \r\n     \"BNODE\": [], \r\n     \"RAND\": [], \r\n     \"ABS\": [], \r\n     \"CEIL\": [], \r\n     \"FLOOR\": [], \r\n     \"ROUND\": [], \r\n     \"CONCAT\": [], \r\n     \"STRLEN\": [], \r\n     \"UCASE\": [], \r\n     \"LCASE\": [], \r\n     \"ENCODE_FOR_URI\": [], \r\n     \"CONTAINS\": [], \r\n     \"STRSTARTS\": [], \r\n     \"STRENDS\": [], \r\n     \"STRBEFORE\": [], \r\n     \"STRAFTER\": [], \r\n     \"YEAR\": [], \r\n     \"MONTH\": [], \r\n     \"DAY\": [], \r\n     \"HOURS\": [], \r\n     \"MINUTES\": [], \r\n     \"SECONDS\": [], \r\n     \"TIMEZONE\": [], \r\n     \"TZ\": [], \r\n     \"NOW\": [], \r\n     \"UUID\": [], \r\n     \"STRUUID\": [], \r\n     \"MD5\": [], \r\n     \"SHA1\": [], \r\n     \"SHA256\": [], \r\n     \"SHA384\": [], \r\n     \"SHA512\": [], \r\n     \"COALESCE\": [], \r\n     \"IF\": [], \r\n     \"STRLANG\": [], \r\n     \"STRDT\": [], \r\n     \"SAMETERM\": [], \r\n     \"ISIRI\": [], \r\n     \"ISURI\": [], \r\n     \"ISBLANK\": [], \r\n     \"ISLITERAL\": [], \r\n     \"ISNUMERIC\": [], \r\n     \"COUNT\": [], \r\n     \"SUM\": [], \r\n     \"MIN\": [], \r\n     \"MAX\": [], \r\n     \"AVG\": [], \r\n     \"SAMPLE\": [], \r\n     \"GROUP_CONCAT\": [], \r\n     \"SUBSTR\": [], \r\n     \"REPLACE\": [], \r\n     \"REGEX\": [], \r\n     \"EXISTS\": [], \r\n     \"]\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \"GENERATE\": [], \r\n     \"$\": []}, \r\n  \"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\" : {\r\n     \"NIL\": [\"or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"(\": [\"or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \".\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": []}, \r\n  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"+\": [], \r\n     \"-\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"=\": [], \r\n     \"!=\": [], \r\n     \"<\": [], \r\n     \">\": [], \r\n     \"<=\": [], \r\n     \">=\": [], \r\n     \"IN\": [], \r\n     \"NOT\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\r\n     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \";\": [], \r\n     \")\": [], \r\n     \"AS\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"||\": [], \r\n     \"&&\": [], \r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": [], \r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": [], \r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": [], \r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": [], \r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": [], \r\n     \"FROM\": [], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"WHERE\": [], \r\n     \"{\": [], \r\n     \"ITERATOR\": [], \r\n     \"SOURCE\": [], \r\n     \"BIND\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"?orderClause\" : {\r\n     \"ORDER\": [\"orderClause\"], \r\n     \"EXPRESSIONS\": [], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"}\": [], \r\n     \"$\": []}, \r\n  \"?pathMod\" : {\r\n     \"*\": [\"pathMod\"], \r\n     \"?\": [\"pathMod\"], \r\n     \"+\": [\"pathMod\"], \r\n     \"{\": [\"pathMod\"], \r\n     \"|\": [], \r\n     \"/\": [], \r\n     \")\": [], \r\n     \"LIST\": [], \r\n     \"(\": [], \r\n     \"[\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": []}, \r\n  \"?postSelectClause\" : {\r\n     \"EXPRESSIONS\": [\"postSelectClause\"], \r\n     \".\": [], \r\n     \"VALUES\": [], \r\n     \"NAMED\": [], \r\n     \")\": [], \r\n     \",\": [], \r\n     \"$\": []}, \r\n  \"?separator\" : {\r\n     \";\": [\"separator\"], \r\n     \"}\": [], \r\n     \")\": []}, \r\n  \"?templateBefore\" : {\r\n     \"BEFORE\": [\"templateBefore\"], \r\n     \"}\": [], \r\n     \";\": [], \r\n     \"BOX\": [], \r\n     \"FORMAT\": [], \r\n     \"GROUP\": [], \r\n     \"TEMPLATE\": [], \r\n     \"STR\": [], \r\n     \"LANG\": [], \r\n     \"LANGMATCHES\": [], \r\n     \"DATATYPE\": [], \r\n     \"BOUND\": [], \r\n     \"IRI\": [], \r\n     \"URI\": [], \r\n     \"BNODE\": [], \r\n     \"RAND\": [], \r\n     \"ABS\": [], \r\n     \"CEIL\": [], \r\n     \"FLOOR\": [], \r\n     \"ROUND\": [], \r\n     \"CONCAT\": [], \r\n     \"STRLEN\": [], \r\n     \"UCASE\": [], \r\n     \"LCASE\": [], \r\n     \"ENCODE_FOR_URI\": [], \r\n     \"CONTAINS\": [], \r\n     \"STRSTARTS\": [], \r\n     \"STRENDS\": [], \r\n     \"STRBEFORE\": [], \r\n     \"STRAFTER\": [], \r\n     \"YEAR\": [], \r\n     \"MONTH\": [], \r\n     \"DAY\": [], \r\n     \"HOURS\": [], \r\n     \"MINUTES\": [], \r\n     \"SECONDS\": [], \r\n     \"TIMEZONE\": [], \r\n     \"TZ\": [], \r\n     \"NOW\": [], \r\n     \"UUID\": [], \r\n     \"STRUUID\": [], \r\n     \"MD5\": [], \r\n     \"SHA1\": [], \r\n     \"SHA256\": [], \r\n     \"SHA384\": [], \r\n     \"SHA512\": [], \r\n     \"COALESCE\": [], \r\n     \"IF\": [], \r\n     \"STRLANG\": [], \r\n     \"STRDT\": [], \r\n     \"SAMETERM\": [], \r\n     \"ISIRI\": [], \r\n     \"ISURI\": [], \r\n     \"ISBLANK\": [], \r\n     \"ISLITERAL\": [], \r\n     \"ISNUMERIC\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"COUNT\": [], \r\n     \"SUM\": [], \r\n     \"MIN\": [], \r\n     \"MAX\": [], \r\n     \"AVG\": [], \r\n     \"SAMPLE\": [], \r\n     \"GROUP_CONCAT\": [], \r\n     \"SUBSTR\": [], \r\n     \"REPLACE\": [], \r\n     \"REGEX\": [], \r\n     \"EXISTS\": [], \r\n     \"NOT\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": []}, \r\n  \"?triplesBlock\" : {\r\n     \"VAR1\": [\"triplesBlock\"], \r\n     \"VAR2\": [\"triplesBlock\"], \r\n     \"NIL\": [\"triplesBlock\"], \r\n     \"(\": [\"triplesBlock\"], \r\n     \"[\": [\"triplesBlock\"], \r\n     \"START_XEXPR\": [\"triplesBlock\"], \r\n     \"IRI_REF\": [\"triplesBlock\"], \r\n     \"IRI_REF_START\": [\"triplesBlock\"], \r\n     \"TRUE\": [\"triplesBlock\"], \r\n     \"FALSE\": [\"triplesBlock\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \r\n     \"ANON\": [\"triplesBlock\"], \r\n     \"PNAME_LN\": [\"triplesBlock\"], \r\n     \"PNAME_NS\": [\"triplesBlock\"], \r\n     \"INTEGER\": [\"triplesBlock\"], \r\n     \"DECIMAL\": [\"triplesBlock\"], \r\n     \"DOUBLE\": [\"triplesBlock\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL1\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL1_START\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL2\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL2_START\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"triplesBlock\"], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"?varList\" : {\r\n     \"NIL\": [\"varList\"], \r\n     \"(\": [\"varList\"], \r\n     \"{\": []}, \r\n  \"?whereClause\" : {\r\n     \"WHERE\": [\"whereClause\"], \r\n     \"{\": [\"whereClause\"], \r\n     \"ORDER\": [], \r\n     \"HAVING\": [], \r\n     \"GROUP\": [], \r\n     \"LIMIT\": [], \r\n     \"OFFSET\": [], \r\n     \"EXPRESSIONS\": [], \r\n     \"VALUES\": [], \r\n     \"$\": []}, \r\n  \"[ (,*dataBlockValue,)]\" : {\r\n     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \r\n  \"[ (,*var,)]\" : {\r\n     \"(\": [\"(\",\"*var\",\")\"]}, \r\n  \"[ (,expression,)]\" : {\r\n     \"(\": [\"(\",\"expression\",\")\"]}, \r\n  \"[ (,expression,AS,var,)]\" : {\r\n     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \r\n  \"[ (,pExpression,*[,,pExpression],)]\" : {\r\n     \"(\": [\"(\",\"pExpression\",\"*[,,pExpression]\",\")\"]}, \r\n  \"[!=,numericExpression]\" : {\r\n     \"!=\": [\"!=\",\"numericExpression\"]}, \r\n  \"[&&,valueLogical]\" : {\r\n     \"&&\": [\"&&\",\"valueLogical\"]}, \r\n  \"[*,unaryExpression]\" : {\r\n     \"*\": [\"*\",\"unaryExpression\"]}, \r\n  \"[+,multiplicativeExpression]\" : {\r\n     \"+\": [\"+\",\"multiplicativeExpression\"]}, \r\n  \"[,,expression]\" : {\r\n     \",\": [\",\",\"expression\"]}, \r\n  \"[,,integer,}]\" : {\r\n     \",\": [\",\",\"integer\",\"}\"]}, \r\n  \"[,,objectPath]\" : {\r\n     \",\": [\",\",\"objectPath\"]}, \r\n  \"[,,object]\" : {\r\n     \",\": [\",\",\"object\"]}, \r\n  \"[,,or([},[integer,}]])]\" : {\r\n     \",\": [\",\",\"or([},[integer,}]])\"]}, \r\n  \"[,,pExpression]\" : {\r\n     \",\": [\",\",\"pExpression\"]}, \r\n  \"[,,var]\" : {\r\n     \",\": [\",\",\"var\"]}, \r\n  \"[-,multiplicativeExpression]\" : {\r\n     \"-\": [\"-\",\"multiplicativeExpression\"]}, \r\n  \"[.,?constructTriples]\" : {\r\n     \".\": [\".\",\"?constructTriples\"]}, \r\n  \"[.,?triplesBlock]\" : {\r\n     \".\": [\".\",\"?triplesBlock\"]}, \r\n  \"[/,pathEltOrInverse]\" : {\r\n     \"/\": [\"/\",\"pathEltOrInverse\"]}, \r\n  \"[/,unaryExpression]\" : {\r\n     \"/\": [\"/\",\"unaryExpression\"]}, \r\n  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\r\n     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \r\n  \"[;,?[verb,objectList]]\" : {\r\n     \";\": [\";\",\"?[verb,objectList]\"]}, \r\n  \"[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\" : {\r\n     \";\": [\";\",\"or([[templateSeparator,?[;,templateAfter]],templateAfter])\"]}, \r\n  \"[;,templateAfter]\" : {\r\n     \";\": [\";\",\"templateAfter\"]}, \r\n  \"[<,numericExpression]\" : {\r\n     \"<\": [\"<\",\"numericExpression\"]}, \r\n  \"[<=,numericExpression]\" : {\r\n     \"<=\": [\"<=\",\"numericExpression\"]}, \r\n  \"[=,numericExpression]\" : {\r\n     \"=\": [\"=\",\"numericExpression\"]}, \r\n  \"[>,numericExpression]\" : {\r\n     \">\": [\">\",\"numericExpression\"]}, \r\n  \"[>=,numericExpression]\" : {\r\n     \">=\": [\">=\",\"numericExpression\"]}, \r\n  \"[?varList,generateClause]\" : {\r\n     \"{\": [\"?varList\",\"generateClause\"], \r\n     \"NIL\": [\"?varList\",\"generateClause\"], \r\n     \"(\": [\"?varList\",\"generateClause\"]}, \r\n  \"[?varList,performClause]\" : {\r\n     \"{\": [\"?varList\",\"performClause\"], \r\n     \"NIL\": [\"?varList\",\"performClause\"], \r\n     \"(\": [\"?varList\",\"performClause\"]}, \r\n  \"[?varList,templateClause]\" : {\r\n     \"{\": [\"?varList\",\"templateClause\"], \r\n     \"NIL\": [\"?varList\",\"templateClause\"], \r\n     \"(\": [\"?varList\",\"templateClause\"]}, \r\n  \"[ACCEPT,varOrXIri]\" : {\r\n     \"ACCEPT\": [\"ACCEPT\",\"varOrXIri\"]}, \r\n  \"[AS,var]\" : {\r\n     \"AS\": [\"AS\",\"var\"]}, \r\n  \"[IN,expressionList]\" : {\r\n     \"IN\": [\"IN\",\"expressionList\"]}, \r\n  \"[IRI_REF_START,xiri_Sub]\" : {\r\n     \"IRI_REF_START\": [\"IRI_REF_START\",\"xiri_Sub\"]}, \r\n  \"[IRI_REF_SUB,xiri_Sub]\" : {\r\n     \"IRI_REF_SUB\": [\"IRI_REF_SUB\",\"xiri_Sub\"]}, \r\n  \"[NAMED,expression]\" : {\r\n     \"NAMED\": [\"NAMED\",\"expression\"]}, \r\n  \"[NOT,IN,expressionList]\" : {\r\n     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \r\n  \"[PERFORM,or([performCall,[?varList,performClause]])]\" : {\r\n     \"PERFORM\": [\"PERFORM\",\"or([performCall,[?varList,performClause]])\"]}, \r\n  \"[STRING_LITERAL1_START,xString_Literal1_Sub]\" : {\r\n     \"STRING_LITERAL1_START\": [\"STRING_LITERAL1_START\",\"xString_Literal1_Sub\"]}, \r\n  \"[STRING_LITERAL1_SUB,xString_Literal1_Sub]\" : {\r\n     \"STRING_LITERAL1_SUB\": [\"STRING_LITERAL1_SUB\",\"xString_Literal1_Sub\"]}, \r\n  \"[STRING_LITERAL2_START,xString_Literal2_Sub]\" : {\r\n     \"STRING_LITERAL2_START\": [\"STRING_LITERAL2_START\",\"xString_Literal2_Sub\"]}, \r\n  \"[STRING_LITERAL2_SUB,xString_Literal2_Sub]\" : {\r\n     \"STRING_LITERAL2_SUB\": [\"STRING_LITERAL2_SUB\",\"xString_Literal2_Sub\"]}, \r\n  \"[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]\" : {\r\n     \"STRING_LITERAL_LONG1_START\": [\"STRING_LITERAL_LONG1_START\",\"xString_Literal_Long1_Sub\"]}, \r\n  \"[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]\" : {\r\n     \"STRING_LITERAL_LONG1_SUB\": [\"STRING_LITERAL_LONG1_SUB\",\"xString_Literal_Long1_Sub\"]}, \r\n  \"[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]\" : {\r\n     \"STRING_LITERAL_LONG2_START\": [\"STRING_LITERAL_LONG2_START\",\"xString_Literal_Long2_Sub\"]}, \r\n  \"[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]\" : {\r\n     \"STRING_LITERAL_LONG2_SUB\": [\"STRING_LITERAL_LONG2_SUB\",\"xString_Literal_Long2_Sub\"]}, \r\n  \"[UNION,groupGraphPattern]\" : {\r\n     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \r\n  \"[WHERE,groupGraphPattern]\" : {\r\n     \"WHERE\": [\"WHERE\",\"groupGraphPattern\"]}, \r\n  \"[[subGenerateQuery,.],?constructTriples]\" : {\r\n     \"GENERATE\": [\"[subGenerateQuery,.]\",\"?constructTriples\"]}, \r\n  \"[^^,iriRef]\" : {\r\n     \"^^\": [\"^^\",\"iriRef\"]}, \r\n  \"[^^,xiri]\" : {\r\n     \"^^\": [\"^^\",\"xiri\"]}, \r\n  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\r\n     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \r\n     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \r\n  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\r\n     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \r\n  \"[integer,}]\" : {\r\n     \"INTEGER\": [\"integer\",\"}\"]}, \r\n  \"[or([IRI,URI]), (,expression,)]\" : {\r\n     \"IRI\": [\"or([IRI,URI])\",\"(\",\"expression\",\")\"], \r\n     \"URI\": [\"or([IRI,URI])\",\"(\",\"expression\",\")\"]}, \r\n  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\r\n     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \r\n  \"[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause]\" : {\r\n     \"GENERATE\": [\"or([selectQuery,generateQuery,templateQuery,performQuery])\",\"valuesClause\"], \r\n     \"TEMPLATE\": [\"or([selectQuery,generateQuery,templateQuery,performQuery])\",\"valuesClause\"], \r\n     \"PERFORM\": [\"or([selectQuery,generateQuery,templateQuery,performQuery])\",\"valuesClause\"], \r\n     \"SELECT\": [\"or([selectQuery,generateQuery,templateQuery,performQuery])\",\"valuesClause\"]}, \r\n  \"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\" : {\r\n     \"IRI\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"URI\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"VAR1\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"VAR2\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"IRI_REF\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"IRI_REF_START\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"START_XEXPR\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"PNAME_LN\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"], \r\n     \"PNAME_NS\": [\"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\",\"?argList\"]}, \r\n  \"[or([verbPath,verbSimple]),objectList]\" : {\r\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"START_XEXPR\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"IRI_REF_START\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \r\n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \r\n  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\r\n     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"IRI_REF_START\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \r\n     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \r\n  \"[sourceSelector,?varList]\" : {\r\n     \"IRI_REF\": [\"sourceSelector\",\"?varList\"], \r\n     \"PNAME_LN\": [\"sourceSelector\",\"?varList\"], \r\n     \"PNAME_NS\": [\"sourceSelector\",\"?varList\"]}, \r\n  \"[sourceSelector,varList]\" : {\r\n     \"IRI_REF\": [\"sourceSelector\",\"varList\"], \r\n     \"PNAME_LN\": [\"sourceSelector\",\"varList\"], \r\n     \"PNAME_NS\": [\"sourceSelector\",\"varList\"]}, \r\n  \"[subGenerateQuery,.]\" : {\r\n     \"GENERATE\": [\"subGenerateQuery\",\".\"]}, \r\n  \"[subPerformQuery,.]\" : {\r\n     \"PERFORM\": [\"subPerformQuery\",\".\"], \r\n     \"VAR1\": [\"subPerformQuery\",\".\"], \r\n     \"VAR2\": [\"subPerformQuery\",\".\"], \r\n     \"IRI_REF\": [\"subPerformQuery\",\".\"], \r\n     \"IRI_REF_START\": [\"subPerformQuery\",\".\"], \r\n     \"START_XEXPR\": [\"subPerformQuery\",\".\"], \r\n     \"PNAME_LN\": [\"subPerformQuery\",\".\"], \r\n     \"PNAME_NS\": [\"subPerformQuery\",\".\"]}, \r\n  \"[subTemplateQuery,.]\" : {\r\n     \"TEMPLATE\": [\"subTemplateQuery\",\".\"]}, \r\n  \"[templateSeparator,?[;,templateAfter]]\" : {\r\n     \"SEPARATOR\": [\"templateSeparator\",\"?[;,templateAfter]\"]}, \r\n  \"[verb,objectList]\" : {\r\n     \"a\": [\"verb\",\"objectList\"], \r\n     \"VAR1\": [\"verb\",\"objectList\"], \r\n     \"VAR2\": [\"verb\",\"objectList\"], \r\n     \"NIL\": [\"verb\",\"objectList\"], \r\n     \"START_XEXPR\": [\"verb\",\"objectList\"], \r\n     \"IRI_REF\": [\"verb\",\"objectList\"], \r\n     \"IRI_REF_START\": [\"verb\",\"objectList\"], \r\n     \"TRUE\": [\"verb\",\"objectList\"], \r\n     \"FALSE\": [\"verb\",\"objectList\"], \r\n     \"BLANK_NODE_LABEL\": [\"verb\",\"objectList\"], \r\n     \"ANON\": [\"verb\",\"objectList\"], \r\n     \"PNAME_LN\": [\"verb\",\"objectList\"], \r\n     \"PNAME_NS\": [\"verb\",\"objectList\"], \r\n     \"INTEGER\": [\"verb\",\"objectList\"], \r\n     \"DECIMAL\": [\"verb\",\"objectList\"], \r\n     \"DOUBLE\": [\"verb\",\"objectList\"], \r\n     \"INTEGER_POSITIVE\": [\"verb\",\"objectList\"], \r\n     \"DECIMAL_POSITIVE\": [\"verb\",\"objectList\"], \r\n     \"DOUBLE_POSITIVE\": [\"verb\",\"objectList\"], \r\n     \"INTEGER_NEGATIVE\": [\"verb\",\"objectList\"], \r\n     \"DECIMAL_NEGATIVE\": [\"verb\",\"objectList\"], \r\n     \"DOUBLE_NEGATIVE\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL1\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL1_START\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL2\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL2_START\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL_LONG1\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL_LONG2\": [\"verb\",\"objectList\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"verb\",\"objectList\"]}, \r\n  \"[{,constructTriples,}]\" : {\r\n     \"{\": [\"{\",\"constructTriples\",\"}\"]}, \r\n  \"[|,pathOneInPropertySet]\" : {\r\n     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \r\n  \"[|,pathSequence]\" : {\r\n     \"|\": [\"|\",\"pathSequence\"]}, \r\n  \"[||,conditionalAndExpression]\" : {\r\n     \"||\": [\"||\",\"conditionalAndExpression\"]}, \r\n  \"additiveExpression\" : {\r\n     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"IRI_REF_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL1_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL2_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \r\n  \"aggregate\" : {\r\n     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \r\n     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \r\n     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?separator\",\")\"]}, \r\n  \"argList\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \r\n  \"baseDecl\" : {\r\n     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \r\n  \"bind\" : {\r\n     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \r\n  \"bindingClauses\" : {\r\n     \"ITERATOR\": [\"or([iteratorClause,sourceClause,bind])\"], \r\n     \"SOURCE\": [\"or([iteratorClause,sourceClause,bind])\"], \r\n     \"BIND\": [\"or([iteratorClause,sourceClause,bind])\"]}, \r\n  \"blankNode\" : {\r\n     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \r\n     \"ANON\": [\"ANON\"]}, \r\n  \"blankNodePropertyList\" : {\r\n     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \r\n  \"blankNodePropertyListPath\" : {\r\n     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \r\n  \"booleanLiteral\" : {\r\n     \"TRUE\": [\"TRUE\"], \r\n     \"FALSE\": [\"FALSE\"]}, \r\n  \"box\" : {\r\n     \"BOX\": [\"BOX\",\"{\",\"*tExpression\",\"}\"]}, \r\n  \"brackettedExpression\" : {\r\n     \"(\": [\"(\",\"expression\",\")\"]}, \r\n  \"builtInCall\" : {\r\n     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \r\n     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \r\n     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \r\n     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \r\n     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \r\n     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \r\n     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \r\n     \"RAND\": [\"RAND\",\"NIL\"], \r\n     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \r\n     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \r\n     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \r\n     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \r\n     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \r\n     \"SUBSTR\": [\"substringExpression\"], \r\n     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \r\n     \"REPLACE\": [\"strReplaceExpression\"], \r\n     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \r\n     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \r\n     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \r\n     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \r\n     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \r\n     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \r\n     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \r\n     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \r\n     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \r\n     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \r\n     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \r\n     \"NOW\": [\"NOW\",\"NIL\"], \r\n     \"UUID\": [\"UUID\",\"NIL\"], \r\n     \"STRUUID\": [\"STRUUID\",\"NIL\"], \r\n     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \r\n     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \r\n     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \r\n     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \r\n     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \r\n     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \r\n     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \r\n     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \r\n     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \r\n     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \r\n     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \r\n     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \r\n     \"REGEX\": [\"regexExpression\"], \r\n     \"EXISTS\": [\"existsFunc\"], \r\n     \"NOT\": [\"notExistsFunc\"]}, \r\n  \"collection\" : {\r\n     \"(\": [\"(\",\"+graphNode\",\")\"]}, \r\n  \"collectionPath\" : {\r\n     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \r\n  \"conditionalAndExpression\" : {\r\n     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"IRI_REF_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL1_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL2_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \r\n  \"conditionalOrExpression\" : {\r\n     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"IRI_REF_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL1_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL2_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \r\n  \"constraint\" : {\r\n     \"(\": [\"brackettedExpression\"], \r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"functionCall\"], \r\n     \"PNAME_LN\": [\"functionCall\"], \r\n     \"PNAME_NS\": [\"functionCall\"]}, \r\n  \"constructTriples\" : {\r\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"START_XEXPR\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"IRI_REF_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL1_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL2_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \r\n  \"dataBlock\" : {\r\n     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \r\n     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \r\n  \"dataBlockValue\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"UNDEF\": [\"UNDEF\"]}, \r\n  \"datasetClause\" : {\r\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause,generateGraphClause])\"]}, \r\n  \"defaultGraphClause\" : {\r\n     \"!\": [\"expression\"], \r\n     \"+\": [\"expression\"], \r\n     \"-\": [\"expression\"], \r\n     \"VAR1\": [\"expression\"], \r\n     \"VAR2\": [\"expression\"], \r\n     \"(\": [\"expression\"], \r\n     \"STR\": [\"expression\"], \r\n     \"LANG\": [\"expression\"], \r\n     \"LANGMATCHES\": [\"expression\"], \r\n     \"DATATYPE\": [\"expression\"], \r\n     \"BOUND\": [\"expression\"], \r\n     \"IRI\": [\"expression\"], \r\n     \"URI\": [\"expression\"], \r\n     \"BNODE\": [\"expression\"], \r\n     \"RAND\": [\"expression\"], \r\n     \"ABS\": [\"expression\"], \r\n     \"CEIL\": [\"expression\"], \r\n     \"FLOOR\": [\"expression\"], \r\n     \"ROUND\": [\"expression\"], \r\n     \"CONCAT\": [\"expression\"], \r\n     \"STRLEN\": [\"expression\"], \r\n     \"UCASE\": [\"expression\"], \r\n     \"LCASE\": [\"expression\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\"], \r\n     \"CONTAINS\": [\"expression\"], \r\n     \"STRSTARTS\": [\"expression\"], \r\n     \"STRENDS\": [\"expression\"], \r\n     \"STRBEFORE\": [\"expression\"], \r\n     \"STRAFTER\": [\"expression\"], \r\n     \"YEAR\": [\"expression\"], \r\n     \"MONTH\": [\"expression\"], \r\n     \"DAY\": [\"expression\"], \r\n     \"HOURS\": [\"expression\"], \r\n     \"MINUTES\": [\"expression\"], \r\n     \"SECONDS\": [\"expression\"], \r\n     \"TIMEZONE\": [\"expression\"], \r\n     \"TZ\": [\"expression\"], \r\n     \"NOW\": [\"expression\"], \r\n     \"UUID\": [\"expression\"], \r\n     \"STRUUID\": [\"expression\"], \r\n     \"MD5\": [\"expression\"], \r\n     \"SHA1\": [\"expression\"], \r\n     \"SHA256\": [\"expression\"], \r\n     \"SHA384\": [\"expression\"], \r\n     \"SHA512\": [\"expression\"], \r\n     \"COALESCE\": [\"expression\"], \r\n     \"IF\": [\"expression\"], \r\n     \"STRLANG\": [\"expression\"], \r\n     \"STRDT\": [\"expression\"], \r\n     \"SAMETERM\": [\"expression\"], \r\n     \"ISIRI\": [\"expression\"], \r\n     \"ISURI\": [\"expression\"], \r\n     \"ISBLANK\": [\"expression\"], \r\n     \"ISLITERAL\": [\"expression\"], \r\n     \"ISNUMERIC\": [\"expression\"], \r\n     \"TRUE\": [\"expression\"], \r\n     \"FALSE\": [\"expression\"], \r\n     \"COUNT\": [\"expression\"], \r\n     \"SUM\": [\"expression\"], \r\n     \"MIN\": [\"expression\"], \r\n     \"MAX\": [\"expression\"], \r\n     \"AVG\": [\"expression\"], \r\n     \"SAMPLE\": [\"expression\"], \r\n     \"GROUP_CONCAT\": [\"expression\"], \r\n     \"SUBSTR\": [\"expression\"], \r\n     \"REPLACE\": [\"expression\"], \r\n     \"REGEX\": [\"expression\"], \r\n     \"EXISTS\": [\"expression\"], \r\n     \"NOT\": [\"expression\"], \r\n     \"IRI_REF\": [\"expression\"], \r\n     \"IRI_REF_START\": [\"expression\"], \r\n     \"INTEGER\": [\"expression\"], \r\n     \"DECIMAL\": [\"expression\"], \r\n     \"DOUBLE\": [\"expression\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\"], \r\n     \"PNAME_LN\": [\"expression\"], \r\n     \"PNAME_NS\": [\"expression\"], \r\n     \"STRING_LITERAL1\": [\"expression\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\"], \r\n     \"STRING_LITERAL2\": [\"expression\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\"]}, \r\n  \"existsFunc\" : {\r\n     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \r\n  \"expression\" : {\r\n     \"!\": [\"conditionalOrExpression\"], \r\n     \"+\": [\"conditionalOrExpression\"], \r\n     \"-\": [\"conditionalOrExpression\"], \r\n     \"VAR1\": [\"conditionalOrExpression\"], \r\n     \"VAR2\": [\"conditionalOrExpression\"], \r\n     \"(\": [\"conditionalOrExpression\"], \r\n     \"STR\": [\"conditionalOrExpression\"], \r\n     \"LANG\": [\"conditionalOrExpression\"], \r\n     \"LANGMATCHES\": [\"conditionalOrExpression\"], \r\n     \"DATATYPE\": [\"conditionalOrExpression\"], \r\n     \"BOUND\": [\"conditionalOrExpression\"], \r\n     \"IRI\": [\"conditionalOrExpression\"], \r\n     \"URI\": [\"conditionalOrExpression\"], \r\n     \"BNODE\": [\"conditionalOrExpression\"], \r\n     \"RAND\": [\"conditionalOrExpression\"], \r\n     \"ABS\": [\"conditionalOrExpression\"], \r\n     \"CEIL\": [\"conditionalOrExpression\"], \r\n     \"FLOOR\": [\"conditionalOrExpression\"], \r\n     \"ROUND\": [\"conditionalOrExpression\"], \r\n     \"CONCAT\": [\"conditionalOrExpression\"], \r\n     \"STRLEN\": [\"conditionalOrExpression\"], \r\n     \"UCASE\": [\"conditionalOrExpression\"], \r\n     \"LCASE\": [\"conditionalOrExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \r\n     \"CONTAINS\": [\"conditionalOrExpression\"], \r\n     \"STRSTARTS\": [\"conditionalOrExpression\"], \r\n     \"STRENDS\": [\"conditionalOrExpression\"], \r\n     \"STRBEFORE\": [\"conditionalOrExpression\"], \r\n     \"STRAFTER\": [\"conditionalOrExpression\"], \r\n     \"YEAR\": [\"conditionalOrExpression\"], \r\n     \"MONTH\": [\"conditionalOrExpression\"], \r\n     \"DAY\": [\"conditionalOrExpression\"], \r\n     \"HOURS\": [\"conditionalOrExpression\"], \r\n     \"MINUTES\": [\"conditionalOrExpression\"], \r\n     \"SECONDS\": [\"conditionalOrExpression\"], \r\n     \"TIMEZONE\": [\"conditionalOrExpression\"], \r\n     \"TZ\": [\"conditionalOrExpression\"], \r\n     \"NOW\": [\"conditionalOrExpression\"], \r\n     \"UUID\": [\"conditionalOrExpression\"], \r\n     \"STRUUID\": [\"conditionalOrExpression\"], \r\n     \"MD5\": [\"conditionalOrExpression\"], \r\n     \"SHA1\": [\"conditionalOrExpression\"], \r\n     \"SHA256\": [\"conditionalOrExpression\"], \r\n     \"SHA384\": [\"conditionalOrExpression\"], \r\n     \"SHA512\": [\"conditionalOrExpression\"], \r\n     \"COALESCE\": [\"conditionalOrExpression\"], \r\n     \"IF\": [\"conditionalOrExpression\"], \r\n     \"STRLANG\": [\"conditionalOrExpression\"], \r\n     \"STRDT\": [\"conditionalOrExpression\"], \r\n     \"SAMETERM\": [\"conditionalOrExpression\"], \r\n     \"ISIRI\": [\"conditionalOrExpression\"], \r\n     \"ISURI\": [\"conditionalOrExpression\"], \r\n     \"ISBLANK\": [\"conditionalOrExpression\"], \r\n     \"ISLITERAL\": [\"conditionalOrExpression\"], \r\n     \"ISNUMERIC\": [\"conditionalOrExpression\"], \r\n     \"TRUE\": [\"conditionalOrExpression\"], \r\n     \"FALSE\": [\"conditionalOrExpression\"], \r\n     \"COUNT\": [\"conditionalOrExpression\"], \r\n     \"SUM\": [\"conditionalOrExpression\"], \r\n     \"MIN\": [\"conditionalOrExpression\"], \r\n     \"MAX\": [\"conditionalOrExpression\"], \r\n     \"AVG\": [\"conditionalOrExpression\"], \r\n     \"SAMPLE\": [\"conditionalOrExpression\"], \r\n     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \r\n     \"SUBSTR\": [\"conditionalOrExpression\"], \r\n     \"REPLACE\": [\"conditionalOrExpression\"], \r\n     \"REGEX\": [\"conditionalOrExpression\"], \r\n     \"EXISTS\": [\"conditionalOrExpression\"], \r\n     \"NOT\": [\"conditionalOrExpression\"], \r\n     \"IRI_REF\": [\"conditionalOrExpression\"], \r\n     \"IRI_REF_START\": [\"conditionalOrExpression\"], \r\n     \"INTEGER\": [\"conditionalOrExpression\"], \r\n     \"DECIMAL\": [\"conditionalOrExpression\"], \r\n     \"DOUBLE\": [\"conditionalOrExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \r\n     \"PNAME_LN\": [\"conditionalOrExpression\"], \r\n     \"PNAME_NS\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL1_START\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL2_START\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"conditionalOrExpression\"]}, \r\n  \"expressionList\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \r\n  \"extQuery\" : {\r\n     \"GENERATE\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"], \r\n     \"TEMPLATE\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"], \r\n     \"PERFORM\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"], \r\n     \"FUNCTION\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"], \r\n     \"SELECT\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"], \r\n     \"BASE\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"], \r\n     \"PREFIX\": [\"prologue\",\"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\"]}, \r\n  \"filter\" : {\r\n     \"FILTER\": [\"FILTER\",\"constraint\"]}, \r\n  \"function\" : {\r\n     \"FUNCTION\": [\"FUNCTION\",\"sourceSelector\",\"varList\",\"{\",\"primaryExpression\",\"}\"]}, \r\n  \"functionCall\" : {\r\n     \"IRI_REF\": [\"iriRef\",\"argList\"], \r\n     \"PNAME_LN\": [\"iriRef\",\"argList\"], \r\n     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \r\n  \"generateClause\" : {\r\n     \"{\": [\"{\",\"generateClauseSub\",\"}\"]}, \r\n  \"generateClauseSub\" : {\r\n     \"GENERATE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"VAR1\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"VAR2\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"NIL\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"(\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"[\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"START_XEXPR\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"IRI_REF\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"IRI_REF_START\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"TRUE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"FALSE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"BLANK_NODE_LABEL\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"ANON\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"PNAME_LN\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"PNAME_NS\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"INTEGER\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"DECIMAL\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"DOUBLE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"INTEGER_POSITIVE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"DECIMAL_POSITIVE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"DOUBLE_POSITIVE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"INTEGER_NEGATIVE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL1\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL1_START\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL2\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL2_START\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"], \r\n     \"}\": [\"?constructTriples\",\"*[[subGenerateQuery,.],?constructTriples]\"]}, \r\n  \"generateGraphClause\" : {\r\n     \"GENERATE\": [\"subGenerateQuery\",\"?[NAMED,expression]\",\".\"]}, \r\n  \"generateQuery\" : {\r\n     \"GENERATE\": [\"GENERATE\",\"?[sourceSelector,?varList]\",\"generateClause\",\"*datasetClause\",\"*bindingClauses\",\"?whereClause\",\"solutionModifier\",\"?postSelectClause\"]}, \r\n  \"graphGraphPattern\" : {\r\n     \"GRAPH\": [\"GRAPH\",\"varOrXIri\",\"groupGraphPattern\"]}, \r\n  \"graphNode\" : {\r\n     \"VAR1\": [\"varOrXTerm\"], \r\n     \"VAR2\": [\"varOrXTerm\"], \r\n     \"NIL\": [\"varOrXTerm\"], \r\n     \"START_XEXPR\": [\"varOrXTerm\"], \r\n     \"IRI_REF\": [\"varOrXTerm\"], \r\n     \"IRI_REF_START\": [\"varOrXTerm\"], \r\n     \"TRUE\": [\"varOrXTerm\"], \r\n     \"FALSE\": [\"varOrXTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrXTerm\"], \r\n     \"ANON\": [\"varOrXTerm\"], \r\n     \"PNAME_LN\": [\"varOrXTerm\"], \r\n     \"PNAME_NS\": [\"varOrXTerm\"], \r\n     \"INTEGER\": [\"varOrXTerm\"], \r\n     \"DECIMAL\": [\"varOrXTerm\"], \r\n     \"DOUBLE\": [\"varOrXTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrXTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrXTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrXTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrXTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrXTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL1\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL1_START\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL2\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL2_START\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"varOrXTerm\"], \r\n     \"(\": [\"triplesNode\"], \r\n     \"[\": [\"triplesNode\"]}, \r\n  \"graphNodePath\" : {\r\n     \"VAR1\": [\"varOrXTerm\"], \r\n     \"VAR2\": [\"varOrXTerm\"], \r\n     \"NIL\": [\"varOrXTerm\"], \r\n     \"START_XEXPR\": [\"varOrXTerm\"], \r\n     \"IRI_REF\": [\"varOrXTerm\"], \r\n     \"IRI_REF_START\": [\"varOrXTerm\"], \r\n     \"TRUE\": [\"varOrXTerm\"], \r\n     \"FALSE\": [\"varOrXTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrXTerm\"], \r\n     \"ANON\": [\"varOrXTerm\"], \r\n     \"PNAME_LN\": [\"varOrXTerm\"], \r\n     \"PNAME_NS\": [\"varOrXTerm\"], \r\n     \"INTEGER\": [\"varOrXTerm\"], \r\n     \"DECIMAL\": [\"varOrXTerm\"], \r\n     \"DOUBLE\": [\"varOrXTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrXTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrXTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrXTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrXTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrXTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL1\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL1_START\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL2\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL2_START\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"varOrXTerm\"], \r\n     \"(\": [\"triplesNodePath\"], \r\n     \"[\": [\"triplesNodePath\"]}, \r\n  \"graphPatternNotTriples\" : {\r\n     \"{\": [\"groupOrUnionGraphPattern\"], \r\n     \"OPTIONAL\": [\"optionalGraphPattern\"], \r\n     \"MINUS\": [\"minusGraphPattern\"], \r\n     \"GRAPH\": [\"graphGraphPattern\"], \r\n     \"SERVICE\": [\"serviceGraphPattern\"], \r\n     \"FILTER\": [\"filter\"], \r\n     \"BIND\": [\"bind\"], \r\n     \"VALUES\": [\"inlineData\"]}, \r\n  \"group\" : {\r\n     \"GROUP\": [\"GROUP\",\"?DISTINCT\",\"{\",\"*or([primaryExpressionNotBracketted,box,tformat])\",\"?separator\",\"}\"]}, \r\n  \"groupClause\" : {\r\n     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \r\n  \"groupCondition\" : {\r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"functionCall\"], \r\n     \"PNAME_LN\": [\"functionCall\"], \r\n     \"PNAME_NS\": [\"functionCall\"], \r\n     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"]}, \r\n  \"groupGraphPattern\" : {\r\n     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \r\n  \"groupGraphPatternSub\" : {\r\n     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"START_XEXPR\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"IRI_REF_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL1_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL2_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \r\n     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \r\n  \"groupOrUnionGraphPattern\" : {\r\n     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \r\n  \"havingClause\" : {\r\n     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \r\n  \"havingCondition\" : {\r\n     \"(\": [\"constraint\"], \r\n     \"STR\": [\"constraint\"], \r\n     \"LANG\": [\"constraint\"], \r\n     \"LANGMATCHES\": [\"constraint\"], \r\n     \"DATATYPE\": [\"constraint\"], \r\n     \"BOUND\": [\"constraint\"], \r\n     \"IRI\": [\"constraint\"], \r\n     \"URI\": [\"constraint\"], \r\n     \"BNODE\": [\"constraint\"], \r\n     \"RAND\": [\"constraint\"], \r\n     \"ABS\": [\"constraint\"], \r\n     \"CEIL\": [\"constraint\"], \r\n     \"FLOOR\": [\"constraint\"], \r\n     \"ROUND\": [\"constraint\"], \r\n     \"CONCAT\": [\"constraint\"], \r\n     \"STRLEN\": [\"constraint\"], \r\n     \"UCASE\": [\"constraint\"], \r\n     \"LCASE\": [\"constraint\"], \r\n     \"ENCODE_FOR_URI\": [\"constraint\"], \r\n     \"CONTAINS\": [\"constraint\"], \r\n     \"STRSTARTS\": [\"constraint\"], \r\n     \"STRENDS\": [\"constraint\"], \r\n     \"STRBEFORE\": [\"constraint\"], \r\n     \"STRAFTER\": [\"constraint\"], \r\n     \"YEAR\": [\"constraint\"], \r\n     \"MONTH\": [\"constraint\"], \r\n     \"DAY\": [\"constraint\"], \r\n     \"HOURS\": [\"constraint\"], \r\n     \"MINUTES\": [\"constraint\"], \r\n     \"SECONDS\": [\"constraint\"], \r\n     \"TIMEZONE\": [\"constraint\"], \r\n     \"TZ\": [\"constraint\"], \r\n     \"NOW\": [\"constraint\"], \r\n     \"UUID\": [\"constraint\"], \r\n     \"STRUUID\": [\"constraint\"], \r\n     \"MD5\": [\"constraint\"], \r\n     \"SHA1\": [\"constraint\"], \r\n     \"SHA256\": [\"constraint\"], \r\n     \"SHA384\": [\"constraint\"], \r\n     \"SHA512\": [\"constraint\"], \r\n     \"COALESCE\": [\"constraint\"], \r\n     \"IF\": [\"constraint\"], \r\n     \"STRLANG\": [\"constraint\"], \r\n     \"STRDT\": [\"constraint\"], \r\n     \"SAMETERM\": [\"constraint\"], \r\n     \"ISIRI\": [\"constraint\"], \r\n     \"ISURI\": [\"constraint\"], \r\n     \"ISBLANK\": [\"constraint\"], \r\n     \"ISLITERAL\": [\"constraint\"], \r\n     \"ISNUMERIC\": [\"constraint\"], \r\n     \"SUBSTR\": [\"constraint\"], \r\n     \"REPLACE\": [\"constraint\"], \r\n     \"REGEX\": [\"constraint\"], \r\n     \"EXISTS\": [\"constraint\"], \r\n     \"NOT\": [\"constraint\"], \r\n     \"IRI_REF\": [\"constraint\"], \r\n     \"PNAME_LN\": [\"constraint\"], \r\n     \"PNAME_NS\": [\"constraint\"]}, \r\n  \"inlineData\" : {\r\n     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \r\n  \"inlineDataFull\" : {\r\n     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \r\n     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \r\n  \"inlineDataOneVar\" : {\r\n     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \r\n     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \r\n  \"integer\" : {\r\n     \"INTEGER\": [\"INTEGER\"]}, \r\n  \"iriRef\" : {\r\n     \"IRI_REF\": [\"IRI_REF\"], \r\n     \"PNAME_LN\": [\"prefixedName\"], \r\n     \"PNAME_NS\": [\"prefixedName\"]}, \r\n  \"iteratorClause\" : {\r\n     \"ITERATOR\": [\"ITERATOR\",\"functionCall\",\"AS\",\"+var\"]}, \r\n  \"limitClause\" : {\r\n     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \r\n  \"limitOffsetClauses\" : {\r\n     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \r\n     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \r\n  \"listNode\" : {\r\n     \"LIST\": [\"LIST\",\"(\",\"expression\",\")\"]}, \r\n  \"minusGraphPattern\" : {\r\n     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \r\n  \"multiplicativeExpression\" : {\r\n     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"IRI_REF_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL1_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL2_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \r\n  \"namedGraphClause\" : {\r\n     \"NAMED\": [\"NAMED\",\"expression\"]}, \r\n  \"namedSelectClause\" : {\r\n     \"SELECT\": [\"SELECT\",\"?[sourceSelector,varList]\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \r\n  \"notExistsFunc\" : {\r\n     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \r\n  \"numericExpression\" : {\r\n     \"!\": [\"additiveExpression\"], \r\n     \"+\": [\"additiveExpression\"], \r\n     \"-\": [\"additiveExpression\"], \r\n     \"VAR1\": [\"additiveExpression\"], \r\n     \"VAR2\": [\"additiveExpression\"], \r\n     \"(\": [\"additiveExpression\"], \r\n     \"STR\": [\"additiveExpression\"], \r\n     \"LANG\": [\"additiveExpression\"], \r\n     \"LANGMATCHES\": [\"additiveExpression\"], \r\n     \"DATATYPE\": [\"additiveExpression\"], \r\n     \"BOUND\": [\"additiveExpression\"], \r\n     \"IRI\": [\"additiveExpression\"], \r\n     \"URI\": [\"additiveExpression\"], \r\n     \"BNODE\": [\"additiveExpression\"], \r\n     \"RAND\": [\"additiveExpression\"], \r\n     \"ABS\": [\"additiveExpression\"], \r\n     \"CEIL\": [\"additiveExpression\"], \r\n     \"FLOOR\": [\"additiveExpression\"], \r\n     \"ROUND\": [\"additiveExpression\"], \r\n     \"CONCAT\": [\"additiveExpression\"], \r\n     \"STRLEN\": [\"additiveExpression\"], \r\n     \"UCASE\": [\"additiveExpression\"], \r\n     \"LCASE\": [\"additiveExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \r\n     \"CONTAINS\": [\"additiveExpression\"], \r\n     \"STRSTARTS\": [\"additiveExpression\"], \r\n     \"STRENDS\": [\"additiveExpression\"], \r\n     \"STRBEFORE\": [\"additiveExpression\"], \r\n     \"STRAFTER\": [\"additiveExpression\"], \r\n     \"YEAR\": [\"additiveExpression\"], \r\n     \"MONTH\": [\"additiveExpression\"], \r\n     \"DAY\": [\"additiveExpression\"], \r\n     \"HOURS\": [\"additiveExpression\"], \r\n     \"MINUTES\": [\"additiveExpression\"], \r\n     \"SECONDS\": [\"additiveExpression\"], \r\n     \"TIMEZONE\": [\"additiveExpression\"], \r\n     \"TZ\": [\"additiveExpression\"], \r\n     \"NOW\": [\"additiveExpression\"], \r\n     \"UUID\": [\"additiveExpression\"], \r\n     \"STRUUID\": [\"additiveExpression\"], \r\n     \"MD5\": [\"additiveExpression\"], \r\n     \"SHA1\": [\"additiveExpression\"], \r\n     \"SHA256\": [\"additiveExpression\"], \r\n     \"SHA384\": [\"additiveExpression\"], \r\n     \"SHA512\": [\"additiveExpression\"], \r\n     \"COALESCE\": [\"additiveExpression\"], \r\n     \"IF\": [\"additiveExpression\"], \r\n     \"STRLANG\": [\"additiveExpression\"], \r\n     \"STRDT\": [\"additiveExpression\"], \r\n     \"SAMETERM\": [\"additiveExpression\"], \r\n     \"ISIRI\": [\"additiveExpression\"], \r\n     \"ISURI\": [\"additiveExpression\"], \r\n     \"ISBLANK\": [\"additiveExpression\"], \r\n     \"ISLITERAL\": [\"additiveExpression\"], \r\n     \"ISNUMERIC\": [\"additiveExpression\"], \r\n     \"TRUE\": [\"additiveExpression\"], \r\n     \"FALSE\": [\"additiveExpression\"], \r\n     \"COUNT\": [\"additiveExpression\"], \r\n     \"SUM\": [\"additiveExpression\"], \r\n     \"MIN\": [\"additiveExpression\"], \r\n     \"MAX\": [\"additiveExpression\"], \r\n     \"AVG\": [\"additiveExpression\"], \r\n     \"SAMPLE\": [\"additiveExpression\"], \r\n     \"GROUP_CONCAT\": [\"additiveExpression\"], \r\n     \"SUBSTR\": [\"additiveExpression\"], \r\n     \"REPLACE\": [\"additiveExpression\"], \r\n     \"REGEX\": [\"additiveExpression\"], \r\n     \"EXISTS\": [\"additiveExpression\"], \r\n     \"NOT\": [\"additiveExpression\"], \r\n     \"IRI_REF\": [\"additiveExpression\"], \r\n     \"IRI_REF_START\": [\"additiveExpression\"], \r\n     \"INTEGER\": [\"additiveExpression\"], \r\n     \"DECIMAL\": [\"additiveExpression\"], \r\n     \"DOUBLE\": [\"additiveExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \r\n     \"PNAME_LN\": [\"additiveExpression\"], \r\n     \"PNAME_NS\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL1\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL1_START\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL2\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL2_START\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"additiveExpression\"]}, \r\n  \"numericLiteral\" : {\r\n     \"INTEGER\": [\"numericLiteralUnsigned\"], \r\n     \"DECIMAL\": [\"numericLiteralUnsigned\"], \r\n     \"DOUBLE\": [\"numericLiteralUnsigned\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \r\n  \"numericLiteralNegative\" : {\r\n     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \r\n     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \r\n     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \r\n  \"numericLiteralPositive\" : {\r\n     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \r\n     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \r\n     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \r\n  \"numericLiteralUnsigned\" : {\r\n     \"INTEGER\": [\"INTEGER\"], \r\n     \"DECIMAL\": [\"DECIMAL\"], \r\n     \"DOUBLE\": [\"DOUBLE\"]}, \r\n  \"object\" : {\r\n     \"LIST\": [\"or([graphNode,listNode])\"], \r\n     \"(\": [\"or([graphNode,listNode])\"], \r\n     \"[\": [\"or([graphNode,listNode])\"], \r\n     \"VAR1\": [\"or([graphNode,listNode])\"], \r\n     \"VAR2\": [\"or([graphNode,listNode])\"], \r\n     \"NIL\": [\"or([graphNode,listNode])\"], \r\n     \"START_XEXPR\": [\"or([graphNode,listNode])\"], \r\n     \"IRI_REF\": [\"or([graphNode,listNode])\"], \r\n     \"IRI_REF_START\": [\"or([graphNode,listNode])\"], \r\n     \"TRUE\": [\"or([graphNode,listNode])\"], \r\n     \"FALSE\": [\"or([graphNode,listNode])\"], \r\n     \"BLANK_NODE_LABEL\": [\"or([graphNode,listNode])\"], \r\n     \"ANON\": [\"or([graphNode,listNode])\"], \r\n     \"PNAME_LN\": [\"or([graphNode,listNode])\"], \r\n     \"PNAME_NS\": [\"or([graphNode,listNode])\"], \r\n     \"INTEGER\": [\"or([graphNode,listNode])\"], \r\n     \"DECIMAL\": [\"or([graphNode,listNode])\"], \r\n     \"DOUBLE\": [\"or([graphNode,listNode])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([graphNode,listNode])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([graphNode,listNode])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([graphNode,listNode])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([graphNode,listNode])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([graphNode,listNode])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL1\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL1_START\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL2\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL2_START\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"or([graphNode,listNode])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"or([graphNode,listNode])\"]}, \r\n  \"objectList\" : {\r\n     \"LIST\": [\"object\",\"*[,,object]\"], \r\n     \"(\": [\"object\",\"*[,,object]\"], \r\n     \"[\": [\"object\",\"*[,,object]\"], \r\n     \"VAR1\": [\"object\",\"*[,,object]\"], \r\n     \"VAR2\": [\"object\",\"*[,,object]\"], \r\n     \"NIL\": [\"object\",\"*[,,object]\"], \r\n     \"START_XEXPR\": [\"object\",\"*[,,object]\"], \r\n     \"IRI_REF\": [\"object\",\"*[,,object]\"], \r\n     \"IRI_REF_START\": [\"object\",\"*[,,object]\"], \r\n     \"TRUE\": [\"object\",\"*[,,object]\"], \r\n     \"FALSE\": [\"object\",\"*[,,object]\"], \r\n     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \r\n     \"ANON\": [\"object\",\"*[,,object]\"], \r\n     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \r\n     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \r\n     \"INTEGER\": [\"object\",\"*[,,object]\"], \r\n     \"DECIMAL\": [\"object\",\"*[,,object]\"], \r\n     \"DOUBLE\": [\"object\",\"*[,,object]\"], \r\n     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \r\n     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL1_START\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL2_START\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"object\",\"*[,,object]\"]}, \r\n  \"objectListPath\" : {\r\n     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"START_XEXPR\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"IRI_REF_START\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL1_START\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL2_START\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"objectPath\",\"*[,,objectPath]\"]}, \r\n  \"objectPath\" : {\r\n     \"(\": [\"graphNodePath\"], \r\n     \"[\": [\"graphNodePath\"], \r\n     \"VAR1\": [\"graphNodePath\"], \r\n     \"VAR2\": [\"graphNodePath\"], \r\n     \"NIL\": [\"graphNodePath\"], \r\n     \"START_XEXPR\": [\"graphNodePath\"], \r\n     \"IRI_REF\": [\"graphNodePath\"], \r\n     \"IRI_REF_START\": [\"graphNodePath\"], \r\n     \"TRUE\": [\"graphNodePath\"], \r\n     \"FALSE\": [\"graphNodePath\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \r\n     \"ANON\": [\"graphNodePath\"], \r\n     \"PNAME_LN\": [\"graphNodePath\"], \r\n     \"PNAME_NS\": [\"graphNodePath\"], \r\n     \"INTEGER\": [\"graphNodePath\"], \r\n     \"DECIMAL\": [\"graphNodePath\"], \r\n     \"DOUBLE\": [\"graphNodePath\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL1\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL1_START\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL2\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL2_START\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\"]}, \r\n  \"offsetClause\" : {\r\n     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \r\n  \"optionalGraphPattern\" : {\r\n     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \r\n  \"or([*,expression])\" : {\r\n     \"*\": [\"*\"], \r\n     \"!\": [\"expression\"], \r\n     \"+\": [\"expression\"], \r\n     \"-\": [\"expression\"], \r\n     \"VAR1\": [\"expression\"], \r\n     \"VAR2\": [\"expression\"], \r\n     \"(\": [\"expression\"], \r\n     \"STR\": [\"expression\"], \r\n     \"LANG\": [\"expression\"], \r\n     \"LANGMATCHES\": [\"expression\"], \r\n     \"DATATYPE\": [\"expression\"], \r\n     \"BOUND\": [\"expression\"], \r\n     \"IRI\": [\"expression\"], \r\n     \"URI\": [\"expression\"], \r\n     \"BNODE\": [\"expression\"], \r\n     \"RAND\": [\"expression\"], \r\n     \"ABS\": [\"expression\"], \r\n     \"CEIL\": [\"expression\"], \r\n     \"FLOOR\": [\"expression\"], \r\n     \"ROUND\": [\"expression\"], \r\n     \"CONCAT\": [\"expression\"], \r\n     \"STRLEN\": [\"expression\"], \r\n     \"UCASE\": [\"expression\"], \r\n     \"LCASE\": [\"expression\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\"], \r\n     \"CONTAINS\": [\"expression\"], \r\n     \"STRSTARTS\": [\"expression\"], \r\n     \"STRENDS\": [\"expression\"], \r\n     \"STRBEFORE\": [\"expression\"], \r\n     \"STRAFTER\": [\"expression\"], \r\n     \"YEAR\": [\"expression\"], \r\n     \"MONTH\": [\"expression\"], \r\n     \"DAY\": [\"expression\"], \r\n     \"HOURS\": [\"expression\"], \r\n     \"MINUTES\": [\"expression\"], \r\n     \"SECONDS\": [\"expression\"], \r\n     \"TIMEZONE\": [\"expression\"], \r\n     \"TZ\": [\"expression\"], \r\n     \"NOW\": [\"expression\"], \r\n     \"UUID\": [\"expression\"], \r\n     \"STRUUID\": [\"expression\"], \r\n     \"MD5\": [\"expression\"], \r\n     \"SHA1\": [\"expression\"], \r\n     \"SHA256\": [\"expression\"], \r\n     \"SHA384\": [\"expression\"], \r\n     \"SHA512\": [\"expression\"], \r\n     \"COALESCE\": [\"expression\"], \r\n     \"IF\": [\"expression\"], \r\n     \"STRLANG\": [\"expression\"], \r\n     \"STRDT\": [\"expression\"], \r\n     \"SAMETERM\": [\"expression\"], \r\n     \"ISIRI\": [\"expression\"], \r\n     \"ISURI\": [\"expression\"], \r\n     \"ISBLANK\": [\"expression\"], \r\n     \"ISLITERAL\": [\"expression\"], \r\n     \"ISNUMERIC\": [\"expression\"], \r\n     \"TRUE\": [\"expression\"], \r\n     \"FALSE\": [\"expression\"], \r\n     \"COUNT\": [\"expression\"], \r\n     \"SUM\": [\"expression\"], \r\n     \"MIN\": [\"expression\"], \r\n     \"MAX\": [\"expression\"], \r\n     \"AVG\": [\"expression\"], \r\n     \"SAMPLE\": [\"expression\"], \r\n     \"GROUP_CONCAT\": [\"expression\"], \r\n     \"SUBSTR\": [\"expression\"], \r\n     \"REPLACE\": [\"expression\"], \r\n     \"REGEX\": [\"expression\"], \r\n     \"EXISTS\": [\"expression\"], \r\n     \"NOT\": [\"expression\"], \r\n     \"IRI_REF\": [\"expression\"], \r\n     \"IRI_REF_START\": [\"expression\"], \r\n     \"INTEGER\": [\"expression\"], \r\n     \"DECIMAL\": [\"expression\"], \r\n     \"DOUBLE\": [\"expression\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\"], \r\n     \"PNAME_LN\": [\"expression\"], \r\n     \"PNAME_NS\": [\"expression\"], \r\n     \"STRING_LITERAL1\": [\"expression\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\"], \r\n     \"STRING_LITERAL2\": [\"expression\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\"]}, \r\n  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\r\n     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \r\n     \"*\": [\"*\"]}, \r\n  \"or([ASC,DESC])\" : {\r\n     \"ASC\": [\"ASC\"], \r\n     \"DESC\": [\"DESC\"]}, \r\n  \"or([DISTINCT,REDUCED])\" : {\r\n     \"DISTINCT\": [\"DISTINCT\"], \r\n     \"REDUCED\": [\"REDUCED\"]}, \r\n  \"or([IRI,URI])\" : {\r\n     \"IRI\": [\"IRI\"], \r\n     \"URI\": [\"URI\"]}, \r\n  \"or([LANGTAG,[^^,iriRef]])\" : {\r\n     \"LANGTAG\": [\"LANGTAG\"], \r\n     \"^^\": [\"[^^,iriRef]\"]}, \r\n  \"or([LANGTAG,[^^,xiri]])\" : {\r\n     \"LANGTAG\": [\"LANGTAG\"], \r\n     \"^^\": [\"[^^,xiri]\"]}, \r\n  \"or([NIL,[ (,*var,)]])\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"[ (,*var,)]\"]}, \r\n  \"or([NIL,[ (,pExpression,*[,,pExpression],)]])\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"[ (,pExpression,*[,,pExpression],)]\"]}, \r\n  \"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\" : {\r\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \r\n     \"STRING_LITERAL1_START\": [\"[STRING_LITERAL1_START,xString_Literal1_Sub]\"]}, \r\n  \"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\" : {\r\n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \r\n     \"STRING_LITERAL2_START\": [\"[STRING_LITERAL2_START,xString_Literal2_Sub]\"]}, \r\n  \"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\" : {\r\n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]\"]}, \r\n  \"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\" : {\r\n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]\"]}, \r\n  \"or([[ (,*dataBlockValue,)],NIL])\" : {\r\n     \"(\": [\"[ (,*dataBlockValue,)]\"], \r\n     \"NIL\": [\"NIL\"]}, \r\n  \"or([[ (,expression,)],NIL])\" : {\r\n     \"(\": [\"[ (,expression,)]\"], \r\n     \"NIL\": [\"NIL\"]}, \r\n  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\r\n     \"*\": [\"[*,unaryExpression]\"], \r\n     \"/\": [\"[/,unaryExpression]\"]}, \r\n  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\r\n     \"+\": [\"[+,multiplicativeExpression]\"], \r\n     \"-\": [\"[-,multiplicativeExpression]\"], \r\n     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \r\n  \"or([[,,or([},[integer,}]])],}])\" : {\r\n     \",\": [\"[,,or([},[integer,}]])]\"], \r\n     \"}\": [\"}\"]}, \r\n  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\r\n     \"=\": [\"[=,numericExpression]\"], \r\n     \"!=\": [\"[!=,numericExpression]\"], \r\n     \"<\": [\"[<,numericExpression]\"], \r\n     \">\": [\"[>,numericExpression]\"], \r\n     \"<=\": [\"[<=,numericExpression]\"], \r\n     \">=\": [\"[>=,numericExpression]\"], \r\n     \"IN\": [\"[IN,expressionList]\"], \r\n     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \r\n  \"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\" : {\r\n     \"IRI_REF_SUB\": [\"[IRI_REF_SUB,xiri_Sub]\"], \r\n     \"IRI_REF_END\": [\"IRI_REF_END\"]}, \r\n  \"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\" : {\r\n     \"STRING_LITERAL1_SUB\": [\"[STRING_LITERAL1_SUB,xString_Literal1_Sub]\"], \r\n     \"STRING_LITERAL1_END\": [\"STRING_LITERAL1_END\"]}, \r\n  \"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\" : {\r\n     \"STRING_LITERAL2_SUB\": [\"[STRING_LITERAL2_SUB,xString_Literal2_Sub]\"], \r\n     \"STRING_LITERAL2_END\": [\"STRING_LITERAL2_END\"]}, \r\n  \"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\" : {\r\n     \"STRING_LITERAL_LONG1_SUB\": [\"[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]\"], \r\n     \"STRING_LITERAL_LONG1_END\": [\"STRING_LITERAL_LONG1_END\"]}, \r\n  \"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\" : {\r\n     \"STRING_LITERAL_LONG2_SUB\": [\"[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]\"], \r\n     \"STRING_LITERAL_LONG2_END\": [\"STRING_LITERAL_LONG2_END\"]}, \r\n  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\r\n     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \r\n     \",\": [\"[,,integer,}]\"]}, \r\n  \"or([[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause],function])\" : {\r\n     \"GENERATE\": [\"[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause]\"], \r\n     \"TEMPLATE\": [\"[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause]\"], \r\n     \"PERFORM\": [\"[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause]\"], \r\n     \"SELECT\": [\"[or([selectQuery,generateQuery,templateQuery,performQuery]),valuesClause]\"], \r\n     \"FUNCTION\": [\"function\"]}, \r\n  \"or([[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList],[?varList,generateClause]])\" : {\r\n     \"IRI\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"URI\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"VAR1\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"VAR2\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"IRI_REF\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"IRI_REF_START\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"START_XEXPR\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"PNAME_LN\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"PNAME_NS\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"{\": [\"[?varList,generateClause]\"], \r\n     \"NIL\": [\"[?varList,generateClause]\"], \r\n     \"(\": [\"[?varList,generateClause]\"]}, \r\n  \"or([[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList],[?varList,templateClause]])\" : {\r\n     \"IRI\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"URI\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"VAR1\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"VAR2\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"IRI_REF\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"IRI_REF_START\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"START_XEXPR\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"PNAME_LN\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"PNAME_NS\": [\"[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList]\"], \r\n     \"{\": [\"[?varList,templateClause]\"], \r\n     \"NIL\": [\"[?varList,templateClause]\"], \r\n     \"(\": [\"[?varList,templateClause]\"]}, \r\n  \"or([[templateSeparator,?[;,templateAfter]],templateAfter])\" : {\r\n     \"SEPARATOR\": [\"[templateSeparator,?[;,templateAfter]]\"], \r\n     \"AFTER\": [\"templateAfter\"]}, \r\n  \"or([baseDecl,prefixDecl])\" : {\r\n     \"BASE\": [\"baseDecl\"], \r\n     \"PREFIX\": [\"prefixDecl\"]}, \r\n  \"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\" : {\r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"xiriOrFunction\"], \r\n     \"IRI_REF_START\": [\"xiriOrFunction\"], \r\n     \"PNAME_LN\": [\"xiriOrFunction\"], \r\n     \"PNAME_NS\": [\"xiriOrFunction\"], \r\n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"COUNT\": [\"aggregate\"], \r\n     \"SUM\": [\"aggregate\"], \r\n     \"MIN\": [\"aggregate\"], \r\n     \"MAX\": [\"aggregate\"], \r\n     \"AVG\": [\"aggregate\"], \r\n     \"SAMPLE\": [\"aggregate\"], \r\n     \"GROUP_CONCAT\": [\"aggregate\"]}, \r\n  \"or([defaultGraphClause,namedGraphClause,generateGraphClause])\" : {\r\n     \"!\": [\"defaultGraphClause\"], \r\n     \"+\": [\"defaultGraphClause\"], \r\n     \"-\": [\"defaultGraphClause\"], \r\n     \"VAR1\": [\"defaultGraphClause\"], \r\n     \"VAR2\": [\"defaultGraphClause\"], \r\n     \"(\": [\"defaultGraphClause\"], \r\n     \"STR\": [\"defaultGraphClause\"], \r\n     \"LANG\": [\"defaultGraphClause\"], \r\n     \"LANGMATCHES\": [\"defaultGraphClause\"], \r\n     \"DATATYPE\": [\"defaultGraphClause\"], \r\n     \"BOUND\": [\"defaultGraphClause\"], \r\n     \"IRI\": [\"defaultGraphClause\"], \r\n     \"URI\": [\"defaultGraphClause\"], \r\n     \"BNODE\": [\"defaultGraphClause\"], \r\n     \"RAND\": [\"defaultGraphClause\"], \r\n     \"ABS\": [\"defaultGraphClause\"], \r\n     \"CEIL\": [\"defaultGraphClause\"], \r\n     \"FLOOR\": [\"defaultGraphClause\"], \r\n     \"ROUND\": [\"defaultGraphClause\"], \r\n     \"CONCAT\": [\"defaultGraphClause\"], \r\n     \"STRLEN\": [\"defaultGraphClause\"], \r\n     \"UCASE\": [\"defaultGraphClause\"], \r\n     \"LCASE\": [\"defaultGraphClause\"], \r\n     \"ENCODE_FOR_URI\": [\"defaultGraphClause\"], \r\n     \"CONTAINS\": [\"defaultGraphClause\"], \r\n     \"STRSTARTS\": [\"defaultGraphClause\"], \r\n     \"STRENDS\": [\"defaultGraphClause\"], \r\n     \"STRBEFORE\": [\"defaultGraphClause\"], \r\n     \"STRAFTER\": [\"defaultGraphClause\"], \r\n     \"YEAR\": [\"defaultGraphClause\"], \r\n     \"MONTH\": [\"defaultGraphClause\"], \r\n     \"DAY\": [\"defaultGraphClause\"], \r\n     \"HOURS\": [\"defaultGraphClause\"], \r\n     \"MINUTES\": [\"defaultGraphClause\"], \r\n     \"SECONDS\": [\"defaultGraphClause\"], \r\n     \"TIMEZONE\": [\"defaultGraphClause\"], \r\n     \"TZ\": [\"defaultGraphClause\"], \r\n     \"NOW\": [\"defaultGraphClause\"], \r\n     \"UUID\": [\"defaultGraphClause\"], \r\n     \"STRUUID\": [\"defaultGraphClause\"], \r\n     \"MD5\": [\"defaultGraphClause\"], \r\n     \"SHA1\": [\"defaultGraphClause\"], \r\n     \"SHA256\": [\"defaultGraphClause\"], \r\n     \"SHA384\": [\"defaultGraphClause\"], \r\n     \"SHA512\": [\"defaultGraphClause\"], \r\n     \"COALESCE\": [\"defaultGraphClause\"], \r\n     \"IF\": [\"defaultGraphClause\"], \r\n     \"STRLANG\": [\"defaultGraphClause\"], \r\n     \"STRDT\": [\"defaultGraphClause\"], \r\n     \"SAMETERM\": [\"defaultGraphClause\"], \r\n     \"ISIRI\": [\"defaultGraphClause\"], \r\n     \"ISURI\": [\"defaultGraphClause\"], \r\n     \"ISBLANK\": [\"defaultGraphClause\"], \r\n     \"ISLITERAL\": [\"defaultGraphClause\"], \r\n     \"ISNUMERIC\": [\"defaultGraphClause\"], \r\n     \"TRUE\": [\"defaultGraphClause\"], \r\n     \"FALSE\": [\"defaultGraphClause\"], \r\n     \"COUNT\": [\"defaultGraphClause\"], \r\n     \"SUM\": [\"defaultGraphClause\"], \r\n     \"MIN\": [\"defaultGraphClause\"], \r\n     \"MAX\": [\"defaultGraphClause\"], \r\n     \"AVG\": [\"defaultGraphClause\"], \r\n     \"SAMPLE\": [\"defaultGraphClause\"], \r\n     \"GROUP_CONCAT\": [\"defaultGraphClause\"], \r\n     \"SUBSTR\": [\"defaultGraphClause\"], \r\n     \"REPLACE\": [\"defaultGraphClause\"], \r\n     \"REGEX\": [\"defaultGraphClause\"], \r\n     \"EXISTS\": [\"defaultGraphClause\"], \r\n     \"NOT\": [\"defaultGraphClause\"], \r\n     \"IRI_REF\": [\"defaultGraphClause\"], \r\n     \"IRI_REF_START\": [\"defaultGraphClause\"], \r\n     \"INTEGER\": [\"defaultGraphClause\"], \r\n     \"DECIMAL\": [\"defaultGraphClause\"], \r\n     \"DOUBLE\": [\"defaultGraphClause\"], \r\n     \"INTEGER_POSITIVE\": [\"defaultGraphClause\"], \r\n     \"DECIMAL_POSITIVE\": [\"defaultGraphClause\"], \r\n     \"DOUBLE_POSITIVE\": [\"defaultGraphClause\"], \r\n     \"INTEGER_NEGATIVE\": [\"defaultGraphClause\"], \r\n     \"DECIMAL_NEGATIVE\": [\"defaultGraphClause\"], \r\n     \"DOUBLE_NEGATIVE\": [\"defaultGraphClause\"], \r\n     \"PNAME_LN\": [\"defaultGraphClause\"], \r\n     \"PNAME_NS\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL1\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL1_START\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL2\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL2_START\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL_LONG1\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL_LONG2\": [\"defaultGraphClause\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"defaultGraphClause\"], \r\n     \"NAMED\": [\"namedGraphClause\"], \r\n     \"GENERATE\": [\"generateGraphClause\"]}, \r\n  \"or([expression,[{,constructTriples,}],subGenerateQuery])\" : {\r\n     \"!\": [\"expression\"], \r\n     \"+\": [\"expression\"], \r\n     \"-\": [\"expression\"], \r\n     \"VAR1\": [\"expression\"], \r\n     \"VAR2\": [\"expression\"], \r\n     \"(\": [\"expression\"], \r\n     \"STR\": [\"expression\"], \r\n     \"LANG\": [\"expression\"], \r\n     \"LANGMATCHES\": [\"expression\"], \r\n     \"DATATYPE\": [\"expression\"], \r\n     \"BOUND\": [\"expression\"], \r\n     \"IRI\": [\"expression\"], \r\n     \"URI\": [\"expression\"], \r\n     \"BNODE\": [\"expression\"], \r\n     \"RAND\": [\"expression\"], \r\n     \"ABS\": [\"expression\"], \r\n     \"CEIL\": [\"expression\"], \r\n     \"FLOOR\": [\"expression\"], \r\n     \"ROUND\": [\"expression\"], \r\n     \"CONCAT\": [\"expression\"], \r\n     \"STRLEN\": [\"expression\"], \r\n     \"UCASE\": [\"expression\"], \r\n     \"LCASE\": [\"expression\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\"], \r\n     \"CONTAINS\": [\"expression\"], \r\n     \"STRSTARTS\": [\"expression\"], \r\n     \"STRENDS\": [\"expression\"], \r\n     \"STRBEFORE\": [\"expression\"], \r\n     \"STRAFTER\": [\"expression\"], \r\n     \"YEAR\": [\"expression\"], \r\n     \"MONTH\": [\"expression\"], \r\n     \"DAY\": [\"expression\"], \r\n     \"HOURS\": [\"expression\"], \r\n     \"MINUTES\": [\"expression\"], \r\n     \"SECONDS\": [\"expression\"], \r\n     \"TIMEZONE\": [\"expression\"], \r\n     \"TZ\": [\"expression\"], \r\n     \"NOW\": [\"expression\"], \r\n     \"UUID\": [\"expression\"], \r\n     \"STRUUID\": [\"expression\"], \r\n     \"MD5\": [\"expression\"], \r\n     \"SHA1\": [\"expression\"], \r\n     \"SHA256\": [\"expression\"], \r\n     \"SHA384\": [\"expression\"], \r\n     \"SHA512\": [\"expression\"], \r\n     \"COALESCE\": [\"expression\"], \r\n     \"IF\": [\"expression\"], \r\n     \"STRLANG\": [\"expression\"], \r\n     \"STRDT\": [\"expression\"], \r\n     \"SAMETERM\": [\"expression\"], \r\n     \"ISIRI\": [\"expression\"], \r\n     \"ISURI\": [\"expression\"], \r\n     \"ISBLANK\": [\"expression\"], \r\n     \"ISLITERAL\": [\"expression\"], \r\n     \"ISNUMERIC\": [\"expression\"], \r\n     \"TRUE\": [\"expression\"], \r\n     \"FALSE\": [\"expression\"], \r\n     \"COUNT\": [\"expression\"], \r\n     \"SUM\": [\"expression\"], \r\n     \"MIN\": [\"expression\"], \r\n     \"MAX\": [\"expression\"], \r\n     \"AVG\": [\"expression\"], \r\n     \"SAMPLE\": [\"expression\"], \r\n     \"GROUP_CONCAT\": [\"expression\"], \r\n     \"SUBSTR\": [\"expression\"], \r\n     \"REPLACE\": [\"expression\"], \r\n     \"REGEX\": [\"expression\"], \r\n     \"EXISTS\": [\"expression\"], \r\n     \"NOT\": [\"expression\"], \r\n     \"IRI_REF\": [\"expression\"], \r\n     \"IRI_REF_START\": [\"expression\"], \r\n     \"INTEGER\": [\"expression\"], \r\n     \"DECIMAL\": [\"expression\"], \r\n     \"DOUBLE\": [\"expression\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\"], \r\n     \"PNAME_LN\": [\"expression\"], \r\n     \"PNAME_NS\": [\"expression\"], \r\n     \"STRING_LITERAL1\": [\"expression\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\"], \r\n     \"STRING_LITERAL2\": [\"expression\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\"], \r\n     \"{\": [\"[{,constructTriples,}]\"], \r\n     \"GENERATE\": [\"subGenerateQuery\"]}, \r\n  \"or([graphNode,listNode])\" : {\r\n     \"(\": [\"graphNode\"], \r\n     \"[\": [\"graphNode\"], \r\n     \"VAR1\": [\"graphNode\"], \r\n     \"VAR2\": [\"graphNode\"], \r\n     \"NIL\": [\"graphNode\"], \r\n     \"START_XEXPR\": [\"graphNode\"], \r\n     \"IRI_REF\": [\"graphNode\"], \r\n     \"IRI_REF_START\": [\"graphNode\"], \r\n     \"TRUE\": [\"graphNode\"], \r\n     \"FALSE\": [\"graphNode\"], \r\n     \"BLANK_NODE_LABEL\": [\"graphNode\"], \r\n     \"ANON\": [\"graphNode\"], \r\n     \"PNAME_LN\": [\"graphNode\"], \r\n     \"PNAME_NS\": [\"graphNode\"], \r\n     \"INTEGER\": [\"graphNode\"], \r\n     \"DECIMAL\": [\"graphNode\"], \r\n     \"DOUBLE\": [\"graphNode\"], \r\n     \"INTEGER_POSITIVE\": [\"graphNode\"], \r\n     \"DECIMAL_POSITIVE\": [\"graphNode\"], \r\n     \"DOUBLE_POSITIVE\": [\"graphNode\"], \r\n     \"INTEGER_NEGATIVE\": [\"graphNode\"], \r\n     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \r\n     \"DOUBLE_NEGATIVE\": [\"graphNode\"], \r\n     \"STRING_LITERAL1\": [\"graphNode\"], \r\n     \"STRING_LITERAL1_START\": [\"graphNode\"], \r\n     \"STRING_LITERAL2\": [\"graphNode\"], \r\n     \"STRING_LITERAL2_START\": [\"graphNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\"], \r\n     \"LIST\": [\"listNode\"]}, \r\n  \"or([inlineDataOneVar,inlineDataFull])\" : {\r\n     \"VAR1\": [\"inlineDataOneVar\"], \r\n     \"VAR2\": [\"inlineDataOneVar\"], \r\n     \"NIL\": [\"inlineDataFull\"], \r\n     \"(\": [\"inlineDataFull\"]}, \r\n  \"or([iriRef,[IRI_REF_START,xiri_Sub]])\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"], \r\n     \"IRI_REF_START\": [\"[IRI_REF_START,xiri_Sub]\"]}, \r\n  \"or([iteratorClause,sourceClause,bind])\" : {\r\n     \"ITERATOR\": [\"iteratorClause\"], \r\n     \"SOURCE\": [\"sourceClause\"], \r\n     \"BIND\": [\"bind\"]}, \r\n  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\r\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \r\n  \"or([performCall,[?varList,performClause]])\" : {\r\n     \"VAR1\": [\"performCall\"], \r\n     \"VAR2\": [\"performCall\"], \r\n     \"IRI_REF\": [\"performCall\"], \r\n     \"IRI_REF_START\": [\"performCall\"], \r\n     \"START_XEXPR\": [\"performCall\"], \r\n     \"PNAME_LN\": [\"performCall\"], \r\n     \"PNAME_NS\": [\"performCall\"], \r\n     \"{\": [\"[?varList,performClause]\"], \r\n     \"NIL\": [\"[?varList,performClause]\"], \r\n     \"(\": [\"[?varList,performClause]\"]}, \r\n  \"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\" : {\r\n     \"VAR1\": [\"performCall\"], \r\n     \"VAR2\": [\"performCall\"], \r\n     \"IRI_REF\": [\"performCall\"], \r\n     \"IRI_REF_START\": [\"performCall\"], \r\n     \"START_XEXPR\": [\"performCall\"], \r\n     \"PNAME_LN\": [\"performCall\"], \r\n     \"PNAME_NS\": [\"performCall\"], \r\n     \"PERFORM\": [\"[PERFORM,or([performCall,[?varList,performClause]])]\"]}, \r\n  \"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\" : {\r\n     \"STR\": [\"primaryExpressionNotBracketted\"], \r\n     \"LANG\": [\"primaryExpressionNotBracketted\"], \r\n     \"LANGMATCHES\": [\"primaryExpressionNotBracketted\"], \r\n     \"DATATYPE\": [\"primaryExpressionNotBracketted\"], \r\n     \"BOUND\": [\"primaryExpressionNotBracketted\"], \r\n     \"IRI\": [\"primaryExpressionNotBracketted\"], \r\n     \"URI\": [\"primaryExpressionNotBracketted\"], \r\n     \"BNODE\": [\"primaryExpressionNotBracketted\"], \r\n     \"RAND\": [\"primaryExpressionNotBracketted\"], \r\n     \"ABS\": [\"primaryExpressionNotBracketted\"], \r\n     \"CEIL\": [\"primaryExpressionNotBracketted\"], \r\n     \"FLOOR\": [\"primaryExpressionNotBracketted\"], \r\n     \"ROUND\": [\"primaryExpressionNotBracketted\"], \r\n     \"CONCAT\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRLEN\": [\"primaryExpressionNotBracketted\"], \r\n     \"UCASE\": [\"primaryExpressionNotBracketted\"], \r\n     \"LCASE\": [\"primaryExpressionNotBracketted\"], \r\n     \"ENCODE_FOR_URI\": [\"primaryExpressionNotBracketted\"], \r\n     \"CONTAINS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRSTARTS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRENDS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRBEFORE\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRAFTER\": [\"primaryExpressionNotBracketted\"], \r\n     \"YEAR\": [\"primaryExpressionNotBracketted\"], \r\n     \"MONTH\": [\"primaryExpressionNotBracketted\"], \r\n     \"DAY\": [\"primaryExpressionNotBracketted\"], \r\n     \"HOURS\": [\"primaryExpressionNotBracketted\"], \r\n     \"MINUTES\": [\"primaryExpressionNotBracketted\"], \r\n     \"SECONDS\": [\"primaryExpressionNotBracketted\"], \r\n     \"TIMEZONE\": [\"primaryExpressionNotBracketted\"], \r\n     \"TZ\": [\"primaryExpressionNotBracketted\"], \r\n     \"NOW\": [\"primaryExpressionNotBracketted\"], \r\n     \"UUID\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRUUID\": [\"primaryExpressionNotBracketted\"], \r\n     \"MD5\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA1\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA256\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA384\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA512\": [\"primaryExpressionNotBracketted\"], \r\n     \"COALESCE\": [\"primaryExpressionNotBracketted\"], \r\n     \"IF\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRLANG\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRDT\": [\"primaryExpressionNotBracketted\"], \r\n     \"SAMETERM\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISIRI\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISURI\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISBLANK\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISLITERAL\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISNUMERIC\": [\"primaryExpressionNotBracketted\"], \r\n     \"TRUE\": [\"primaryExpressionNotBracketted\"], \r\n     \"FALSE\": [\"primaryExpressionNotBracketted\"], \r\n     \"VAR1\": [\"primaryExpressionNotBracketted\"], \r\n     \"VAR2\": [\"primaryExpressionNotBracketted\"], \r\n     \"COUNT\": [\"primaryExpressionNotBracketted\"], \r\n     \"SUM\": [\"primaryExpressionNotBracketted\"], \r\n     \"MIN\": [\"primaryExpressionNotBracketted\"], \r\n     \"MAX\": [\"primaryExpressionNotBracketted\"], \r\n     \"AVG\": [\"primaryExpressionNotBracketted\"], \r\n     \"SAMPLE\": [\"primaryExpressionNotBracketted\"], \r\n     \"GROUP_CONCAT\": [\"primaryExpressionNotBracketted\"], \r\n     \"SUBSTR\": [\"primaryExpressionNotBracketted\"], \r\n     \"REPLACE\": [\"primaryExpressionNotBracketted\"], \r\n     \"REGEX\": [\"primaryExpressionNotBracketted\"], \r\n     \"EXISTS\": [\"primaryExpressionNotBracketted\"], \r\n     \"NOT\": [\"primaryExpressionNotBracketted\"], \r\n     \"IRI_REF\": [\"primaryExpressionNotBracketted\"], \r\n     \"IRI_REF_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"INTEGER\": [\"primaryExpressionNotBracketted\"], \r\n     \"DECIMAL\": [\"primaryExpressionNotBracketted\"], \r\n     \"DOUBLE\": [\"primaryExpressionNotBracketted\"], \r\n     \"INTEGER_POSITIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DECIMAL_POSITIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DOUBLE_POSITIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"INTEGER_NEGATIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DECIMAL_NEGATIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DOUBLE_NEGATIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"PNAME_LN\": [\"primaryExpressionNotBracketted\"], \r\n     \"PNAME_NS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL1\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL1_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL2\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL2_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG1\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG2\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"BOX\": [\"box\"], \r\n     \"FORMAT\": [\"tformat\"], \r\n     \"GROUP\": [\"group\"], \r\n     \"TEMPLATE\": [\"[subTemplateQuery,.]\"]}, \r\n  \"or([primaryExpressionNotBracketted,box,tformat])\" : {\r\n     \"STR\": [\"primaryExpressionNotBracketted\"], \r\n     \"LANG\": [\"primaryExpressionNotBracketted\"], \r\n     \"LANGMATCHES\": [\"primaryExpressionNotBracketted\"], \r\n     \"DATATYPE\": [\"primaryExpressionNotBracketted\"], \r\n     \"BOUND\": [\"primaryExpressionNotBracketted\"], \r\n     \"IRI\": [\"primaryExpressionNotBracketted\"], \r\n     \"URI\": [\"primaryExpressionNotBracketted\"], \r\n     \"BNODE\": [\"primaryExpressionNotBracketted\"], \r\n     \"RAND\": [\"primaryExpressionNotBracketted\"], \r\n     \"ABS\": [\"primaryExpressionNotBracketted\"], \r\n     \"CEIL\": [\"primaryExpressionNotBracketted\"], \r\n     \"FLOOR\": [\"primaryExpressionNotBracketted\"], \r\n     \"ROUND\": [\"primaryExpressionNotBracketted\"], \r\n     \"CONCAT\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRLEN\": [\"primaryExpressionNotBracketted\"], \r\n     \"UCASE\": [\"primaryExpressionNotBracketted\"], \r\n     \"LCASE\": [\"primaryExpressionNotBracketted\"], \r\n     \"ENCODE_FOR_URI\": [\"primaryExpressionNotBracketted\"], \r\n     \"CONTAINS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRSTARTS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRENDS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRBEFORE\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRAFTER\": [\"primaryExpressionNotBracketted\"], \r\n     \"YEAR\": [\"primaryExpressionNotBracketted\"], \r\n     \"MONTH\": [\"primaryExpressionNotBracketted\"], \r\n     \"DAY\": [\"primaryExpressionNotBracketted\"], \r\n     \"HOURS\": [\"primaryExpressionNotBracketted\"], \r\n     \"MINUTES\": [\"primaryExpressionNotBracketted\"], \r\n     \"SECONDS\": [\"primaryExpressionNotBracketted\"], \r\n     \"TIMEZONE\": [\"primaryExpressionNotBracketted\"], \r\n     \"TZ\": [\"primaryExpressionNotBracketted\"], \r\n     \"NOW\": [\"primaryExpressionNotBracketted\"], \r\n     \"UUID\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRUUID\": [\"primaryExpressionNotBracketted\"], \r\n     \"MD5\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA1\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA256\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA384\": [\"primaryExpressionNotBracketted\"], \r\n     \"SHA512\": [\"primaryExpressionNotBracketted\"], \r\n     \"COALESCE\": [\"primaryExpressionNotBracketted\"], \r\n     \"IF\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRLANG\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRDT\": [\"primaryExpressionNotBracketted\"], \r\n     \"SAMETERM\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISIRI\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISURI\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISBLANK\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISLITERAL\": [\"primaryExpressionNotBracketted\"], \r\n     \"ISNUMERIC\": [\"primaryExpressionNotBracketted\"], \r\n     \"TRUE\": [\"primaryExpressionNotBracketted\"], \r\n     \"FALSE\": [\"primaryExpressionNotBracketted\"], \r\n     \"VAR1\": [\"primaryExpressionNotBracketted\"], \r\n     \"VAR2\": [\"primaryExpressionNotBracketted\"], \r\n     \"COUNT\": [\"primaryExpressionNotBracketted\"], \r\n     \"SUM\": [\"primaryExpressionNotBracketted\"], \r\n     \"MIN\": [\"primaryExpressionNotBracketted\"], \r\n     \"MAX\": [\"primaryExpressionNotBracketted\"], \r\n     \"AVG\": [\"primaryExpressionNotBracketted\"], \r\n     \"SAMPLE\": [\"primaryExpressionNotBracketted\"], \r\n     \"GROUP_CONCAT\": [\"primaryExpressionNotBracketted\"], \r\n     \"SUBSTR\": [\"primaryExpressionNotBracketted\"], \r\n     \"REPLACE\": [\"primaryExpressionNotBracketted\"], \r\n     \"REGEX\": [\"primaryExpressionNotBracketted\"], \r\n     \"EXISTS\": [\"primaryExpressionNotBracketted\"], \r\n     \"NOT\": [\"primaryExpressionNotBracketted\"], \r\n     \"IRI_REF\": [\"primaryExpressionNotBracketted\"], \r\n     \"IRI_REF_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"INTEGER\": [\"primaryExpressionNotBracketted\"], \r\n     \"DECIMAL\": [\"primaryExpressionNotBracketted\"], \r\n     \"DOUBLE\": [\"primaryExpressionNotBracketted\"], \r\n     \"INTEGER_POSITIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DECIMAL_POSITIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DOUBLE_POSITIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"INTEGER_NEGATIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DECIMAL_NEGATIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"DOUBLE_NEGATIVE\": [\"primaryExpressionNotBracketted\"], \r\n     \"PNAME_LN\": [\"primaryExpressionNotBracketted\"], \r\n     \"PNAME_NS\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL1\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL1_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL2\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL2_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG1\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG2\": [\"primaryExpressionNotBracketted\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"primaryExpressionNotBracketted\"], \r\n     \"BOX\": [\"box\"], \r\n     \"FORMAT\": [\"tformat\"]}, \r\n  \"or([selectQuery,generateQuery,templateQuery,performQuery])\" : {\r\n     \"SELECT\": [\"selectQuery\"], \r\n     \"GENERATE\": [\"generateQuery\"], \r\n     \"TEMPLATE\": [\"templateQuery\"], \r\n     \"PERFORM\": [\"performQuery\"]}, \r\n  \"or([subSelect,groupGraphPatternSub])\" : {\r\n     \"SELECT\": [\"subSelect\"], \r\n     \"{\": [\"groupGraphPatternSub\"], \r\n     \"OPTIONAL\": [\"groupGraphPatternSub\"], \r\n     \"MINUS\": [\"groupGraphPatternSub\"], \r\n     \"GRAPH\": [\"groupGraphPatternSub\"], \r\n     \"SERVICE\": [\"groupGraphPatternSub\"], \r\n     \"FILTER\": [\"groupGraphPatternSub\"], \r\n     \"BIND\": [\"groupGraphPatternSub\"], \r\n     \"VALUES\": [\"groupGraphPatternSub\"], \r\n     \"VAR1\": [\"groupGraphPatternSub\"], \r\n     \"VAR2\": [\"groupGraphPatternSub\"], \r\n     \"NIL\": [\"groupGraphPatternSub\"], \r\n     \"(\": [\"groupGraphPatternSub\"], \r\n     \"[\": [\"groupGraphPatternSub\"], \r\n     \"START_XEXPR\": [\"groupGraphPatternSub\"], \r\n     \"IRI_REF\": [\"groupGraphPatternSub\"], \r\n     \"IRI_REF_START\": [\"groupGraphPatternSub\"], \r\n     \"TRUE\": [\"groupGraphPatternSub\"], \r\n     \"FALSE\": [\"groupGraphPatternSub\"], \r\n     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \r\n     \"ANON\": [\"groupGraphPatternSub\"], \r\n     \"PNAME_LN\": [\"groupGraphPatternSub\"], \r\n     \"PNAME_NS\": [\"groupGraphPatternSub\"], \r\n     \"INTEGER\": [\"groupGraphPatternSub\"], \r\n     \"DECIMAL\": [\"groupGraphPatternSub\"], \r\n     \"DOUBLE\": [\"groupGraphPatternSub\"], \r\n     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \r\n     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \r\n     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \r\n     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL1_START\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL2_START\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"groupGraphPatternSub\"], \r\n     \"}\": [\"groupGraphPatternSub\"]}, \r\n  \"or([var,[ (,expression,AS,var,)]])\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"(\": [\"[ (,expression,AS,var,)]\"]}, \r\n  \"or([var,xExpr])\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"START_XEXPR\": [\"xExpr\"]}, \r\n  \"or([varOrXIri,[or([IRI,URI]), (,expression,)]])\" : {\r\n     \"VAR1\": [\"varOrXIri\"], \r\n     \"VAR2\": [\"varOrXIri\"], \r\n     \"IRI_REF\": [\"varOrXIri\"], \r\n     \"IRI_REF_START\": [\"varOrXIri\"], \r\n     \"START_XEXPR\": [\"varOrXIri\"], \r\n     \"PNAME_LN\": [\"varOrXIri\"], \r\n     \"PNAME_NS\": [\"varOrXIri\"], \r\n     \"IRI\": [\"[or([IRI,URI]), (,expression,)]\"], \r\n     \"URI\": [\"[or([IRI,URI]), (,expression,)]\"]}, \r\n  \"or([verbPath,verbSimple])\" : {\r\n     \"^\": [\"verbPath\"], \r\n     \"a\": [\"verbPath\"], \r\n     \"!\": [\"verbPath\"], \r\n     \"(\": [\"verbPath\"], \r\n     \"IRI_REF\": [\"verbPath\"], \r\n     \"IRI_REF_START\": [\"verbPath\"], \r\n     \"PNAME_LN\": [\"verbPath\"], \r\n     \"PNAME_NS\": [\"verbPath\"], \r\n     \"VAR1\": [\"verbSimple\"], \r\n     \"VAR2\": [\"verbSimple\"], \r\n     \"START_XEXPR\": [\"verbSimple\"]}, \r\n  \"or([xiri,a])\" : {\r\n     \"IRI_REF\": [\"xiri\"], \r\n     \"IRI_REF_START\": [\"xiri\"], \r\n     \"PNAME_LN\": [\"xiri\"], \r\n     \"PNAME_NS\": [\"xiri\"], \r\n     \"a\": [\"a\"]}, \r\n  \"or([},[integer,}]])\" : {\r\n     \"}\": [\"}\"], \r\n     \"INTEGER\": [\"[integer,}]\"]}, \r\n  \"orderClause\" : {\r\n     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \r\n  \"orderCondition\" : {\r\n     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \r\n     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \r\n     \"(\": [\"constraint\"], \r\n     \"STR\": [\"constraint\"], \r\n     \"LANG\": [\"constraint\"], \r\n     \"LANGMATCHES\": [\"constraint\"], \r\n     \"DATATYPE\": [\"constraint\"], \r\n     \"BOUND\": [\"constraint\"], \r\n     \"IRI\": [\"constraint\"], \r\n     \"URI\": [\"constraint\"], \r\n     \"BNODE\": [\"constraint\"], \r\n     \"RAND\": [\"constraint\"], \r\n     \"ABS\": [\"constraint\"], \r\n     \"CEIL\": [\"constraint\"], \r\n     \"FLOOR\": [\"constraint\"], \r\n     \"ROUND\": [\"constraint\"], \r\n     \"CONCAT\": [\"constraint\"], \r\n     \"STRLEN\": [\"constraint\"], \r\n     \"UCASE\": [\"constraint\"], \r\n     \"LCASE\": [\"constraint\"], \r\n     \"ENCODE_FOR_URI\": [\"constraint\"], \r\n     \"CONTAINS\": [\"constraint\"], \r\n     \"STRSTARTS\": [\"constraint\"], \r\n     \"STRENDS\": [\"constraint\"], \r\n     \"STRBEFORE\": [\"constraint\"], \r\n     \"STRAFTER\": [\"constraint\"], \r\n     \"YEAR\": [\"constraint\"], \r\n     \"MONTH\": [\"constraint\"], \r\n     \"DAY\": [\"constraint\"], \r\n     \"HOURS\": [\"constraint\"], \r\n     \"MINUTES\": [\"constraint\"], \r\n     \"SECONDS\": [\"constraint\"], \r\n     \"TIMEZONE\": [\"constraint\"], \r\n     \"TZ\": [\"constraint\"], \r\n     \"NOW\": [\"constraint\"], \r\n     \"UUID\": [\"constraint\"], \r\n     \"STRUUID\": [\"constraint\"], \r\n     \"MD5\": [\"constraint\"], \r\n     \"SHA1\": [\"constraint\"], \r\n     \"SHA256\": [\"constraint\"], \r\n     \"SHA384\": [\"constraint\"], \r\n     \"SHA512\": [\"constraint\"], \r\n     \"COALESCE\": [\"constraint\"], \r\n     \"IF\": [\"constraint\"], \r\n     \"STRLANG\": [\"constraint\"], \r\n     \"STRDT\": [\"constraint\"], \r\n     \"SAMETERM\": [\"constraint\"], \r\n     \"ISIRI\": [\"constraint\"], \r\n     \"ISURI\": [\"constraint\"], \r\n     \"ISBLANK\": [\"constraint\"], \r\n     \"ISLITERAL\": [\"constraint\"], \r\n     \"ISNUMERIC\": [\"constraint\"], \r\n     \"SUBSTR\": [\"constraint\"], \r\n     \"REPLACE\": [\"constraint\"], \r\n     \"REGEX\": [\"constraint\"], \r\n     \"EXISTS\": [\"constraint\"], \r\n     \"NOT\": [\"constraint\"], \r\n     \"IRI_REF\": [\"constraint\"], \r\n     \"PNAME_LN\": [\"constraint\"], \r\n     \"PNAME_NS\": [\"constraint\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"]}, \r\n  \"pExpression\" : {\r\n     \"{\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"GENERATE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"!\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"+\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"-\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"VAR1\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"VAR2\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"(\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STR\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"LANG\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"LANGMATCHES\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DATATYPE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"BOUND\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"IRI\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"URI\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"BNODE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"RAND\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ABS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"CEIL\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"FLOOR\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ROUND\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"CONCAT\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRLEN\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"UCASE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"LCASE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ENCODE_FOR_URI\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"CONTAINS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRSTARTS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRENDS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRBEFORE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRAFTER\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"YEAR\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"MONTH\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DAY\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"HOURS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"MINUTES\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SECONDS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"TIMEZONE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"TZ\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"NOW\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"UUID\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRUUID\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"MD5\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SHA1\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SHA256\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SHA384\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SHA512\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"COALESCE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"IF\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRLANG\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRDT\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SAMETERM\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ISIRI\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ISURI\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ISBLANK\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ISLITERAL\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"ISNUMERIC\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"TRUE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"FALSE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"COUNT\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SUM\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"MIN\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"MAX\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"AVG\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SAMPLE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"GROUP_CONCAT\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"SUBSTR\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"REPLACE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"REGEX\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"EXISTS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"NOT\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"IRI_REF\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"IRI_REF_START\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"INTEGER\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DECIMAL\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DOUBLE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"PNAME_LN\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"PNAME_NS\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL1\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL1_START\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL2\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL2_START\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"or([expression,[{,constructTriples,}],subGenerateQuery])\"]}, \r\n  \"path\" : {\r\n     \"^\": [\"pathAlternative\"], \r\n     \"a\": [\"pathAlternative\"], \r\n     \"!\": [\"pathAlternative\"], \r\n     \"(\": [\"pathAlternative\"], \r\n     \"IRI_REF\": [\"pathAlternative\"], \r\n     \"IRI_REF_START\": [\"pathAlternative\"], \r\n     \"PNAME_LN\": [\"pathAlternative\"], \r\n     \"PNAME_NS\": [\"pathAlternative\"]}, \r\n  \"pathAlternative\" : {\r\n     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"IRI_REF_START\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \r\n     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \r\n  \"pathElt\" : {\r\n     \"a\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"!\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"(\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"IRI_REF_START\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \r\n     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \r\n  \"pathEltOrInverse\" : {\r\n     \"a\": [\"pathElt\"], \r\n     \"!\": [\"pathElt\"], \r\n     \"(\": [\"pathElt\"], \r\n     \"IRI_REF\": [\"pathElt\"], \r\n     \"IRI_REF_START\": [\"pathElt\"], \r\n     \"PNAME_LN\": [\"pathElt\"], \r\n     \"PNAME_NS\": [\"pathElt\"], \r\n     \"^\": [\"^\",\"pathElt\"]}, \r\n  \"pathMod\" : {\r\n     \"*\": [\"*\"], \r\n     \"?\": [\"?\"], \r\n     \"+\": [\"+\"], \r\n     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \r\n  \"pathNegatedPropertySet\" : {\r\n     \"a\": [\"pathOneInPropertySet\"], \r\n     \"^\": [\"pathOneInPropertySet\"], \r\n     \"IRI_REF\": [\"pathOneInPropertySet\"], \r\n     \"IRI_REF_START\": [\"pathOneInPropertySet\"], \r\n     \"PNAME_LN\": [\"pathOneInPropertySet\"], \r\n     \"PNAME_NS\": [\"pathOneInPropertySet\"], \r\n     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \r\n  \"pathOneInPropertySet\" : {\r\n     \"IRI_REF\": [\"xiri\"], \r\n     \"IRI_REF_START\": [\"xiri\"], \r\n     \"PNAME_LN\": [\"xiri\"], \r\n     \"PNAME_NS\": [\"xiri\"], \r\n     \"a\": [\"a\"], \r\n     \"^\": [\"^\",\"or([xiri,a])\"]}, \r\n  \"pathPrimary\" : {\r\n     \"IRI_REF\": [\"storeProperty\",\"xiri\"], \r\n     \"IRI_REF_START\": [\"storeProperty\",\"xiri\"], \r\n     \"PNAME_LN\": [\"storeProperty\",\"xiri\"], \r\n     \"PNAME_NS\": [\"storeProperty\",\"xiri\"], \r\n     \"a\": [\"storeProperty\",\"a\"], \r\n     \"!\": [\"!\",\"pathNegatedPropertySet\"], \r\n     \"(\": [\"(\",\"path\",\")\"]}, \r\n  \"pathSequence\" : {\r\n     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"IRI_REF_START\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \r\n     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \r\n  \"performCall\" : {\r\n     \"VAR1\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"VAR2\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"IRI_REF\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"IRI_REF_START\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"START_XEXPR\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"PNAME_LN\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"], \r\n     \"PNAME_NS\": [\"varOrXIri\",\"?or([NIL,[ (,pExpression,*[,,pExpression],)]])\"]}, \r\n  \"performClause\" : {\r\n     \"{\": [\"{\",\"performClauseSub\",\"}\"]}, \r\n  \"performClauseSub\" : {\r\n     \"PERFORM\": [\"*[subPerformQuery,.]\"], \r\n     \"VAR1\": [\"*[subPerformQuery,.]\"], \r\n     \"VAR2\": [\"*[subPerformQuery,.]\"], \r\n     \"IRI_REF\": [\"*[subPerformQuery,.]\"], \r\n     \"IRI_REF_START\": [\"*[subPerformQuery,.]\"], \r\n     \"START_XEXPR\": [\"*[subPerformQuery,.]\"], \r\n     \"PNAME_LN\": [\"*[subPerformQuery,.]\"], \r\n     \"PNAME_NS\": [\"*[subPerformQuery,.]\"], \r\n     \"}\": [\"*[subPerformQuery,.]\"]}, \r\n  \"performQuery\" : {\r\n     \"PERFORM\": [\"PERFORM\",\"?[sourceSelector,?varList]\",\"performClause\",\"*datasetClause\",\"*bindingClauses\",\"?whereClause\",\"solutionModifier\",\"?postSelectClause\"]}, \r\n  \"postSelectClause\" : {\r\n     \"EXPRESSIONS\": [\"EXPRESSIONS\",\"+[ (,expression,AS,var,)]\"]}, \r\n  \"prefixDecl\" : {\r\n     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \r\n  \"prefixedName\" : {\r\n     \"PNAME_LN\": [\"PNAME_LN\"], \r\n     \"PNAME_NS\": [\"PNAME_NS\"]}, \r\n  \"primaryExpression\" : {\r\n     \"(\": [\"brackettedExpression\"], \r\n     \"STR\": [\"builtInCall\"], \r\n     \"LANG\": [\"builtInCall\"], \r\n     \"LANGMATCHES\": [\"builtInCall\"], \r\n     \"DATATYPE\": [\"builtInCall\"], \r\n     \"BOUND\": [\"builtInCall\"], \r\n     \"IRI\": [\"builtInCall\"], \r\n     \"URI\": [\"builtInCall\"], \r\n     \"BNODE\": [\"builtInCall\"], \r\n     \"RAND\": [\"builtInCall\"], \r\n     \"ABS\": [\"builtInCall\"], \r\n     \"CEIL\": [\"builtInCall\"], \r\n     \"FLOOR\": [\"builtInCall\"], \r\n     \"ROUND\": [\"builtInCall\"], \r\n     \"CONCAT\": [\"builtInCall\"], \r\n     \"STRLEN\": [\"builtInCall\"], \r\n     \"UCASE\": [\"builtInCall\"], \r\n     \"LCASE\": [\"builtInCall\"], \r\n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \r\n     \"CONTAINS\": [\"builtInCall\"], \r\n     \"STRSTARTS\": [\"builtInCall\"], \r\n     \"STRENDS\": [\"builtInCall\"], \r\n     \"STRBEFORE\": [\"builtInCall\"], \r\n     \"STRAFTER\": [\"builtInCall\"], \r\n     \"YEAR\": [\"builtInCall\"], \r\n     \"MONTH\": [\"builtInCall\"], \r\n     \"DAY\": [\"builtInCall\"], \r\n     \"HOURS\": [\"builtInCall\"], \r\n     \"MINUTES\": [\"builtInCall\"], \r\n     \"SECONDS\": [\"builtInCall\"], \r\n     \"TIMEZONE\": [\"builtInCall\"], \r\n     \"TZ\": [\"builtInCall\"], \r\n     \"NOW\": [\"builtInCall\"], \r\n     \"UUID\": [\"builtInCall\"], \r\n     \"STRUUID\": [\"builtInCall\"], \r\n     \"MD5\": [\"builtInCall\"], \r\n     \"SHA1\": [\"builtInCall\"], \r\n     \"SHA256\": [\"builtInCall\"], \r\n     \"SHA384\": [\"builtInCall\"], \r\n     \"SHA512\": [\"builtInCall\"], \r\n     \"COALESCE\": [\"builtInCall\"], \r\n     \"IF\": [\"builtInCall\"], \r\n     \"STRLANG\": [\"builtInCall\"], \r\n     \"STRDT\": [\"builtInCall\"], \r\n     \"SAMETERM\": [\"builtInCall\"], \r\n     \"ISIRI\": [\"builtInCall\"], \r\n     \"ISURI\": [\"builtInCall\"], \r\n     \"ISBLANK\": [\"builtInCall\"], \r\n     \"ISLITERAL\": [\"builtInCall\"], \r\n     \"ISNUMERIC\": [\"builtInCall\"], \r\n     \"SUBSTR\": [\"builtInCall\"], \r\n     \"REPLACE\": [\"builtInCall\"], \r\n     \"REGEX\": [\"builtInCall\"], \r\n     \"EXISTS\": [\"builtInCall\"], \r\n     \"NOT\": [\"builtInCall\"], \r\n     \"IRI_REF\": [\"xiriOrFunction\"], \r\n     \"IRI_REF_START\": [\"xiriOrFunction\"], \r\n     \"PNAME_LN\": [\"xiriOrFunction\"], \r\n     \"PNAME_NS\": [\"xiriOrFunction\"], \r\n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"COUNT\": [\"aggregate\"], \r\n     \"SUM\": [\"aggregate\"], \r\n     \"MIN\": [\"aggregate\"], \r\n     \"MAX\": [\"aggregate\"], \r\n     \"AVG\": [\"aggregate\"], \r\n     \"SAMPLE\": [\"aggregate\"], \r\n     \"GROUP_CONCAT\": [\"aggregate\"]}, \r\n  \"primaryExpressionNotBracketted\" : {\r\n     \"STR\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"LANG\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"LANGMATCHES\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DATATYPE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"BOUND\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"IRI\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"URI\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"BNODE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"RAND\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ABS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"CEIL\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"FLOOR\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ROUND\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"CONCAT\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRLEN\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"UCASE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"LCASE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ENCODE_FOR_URI\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"CONTAINS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRSTARTS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRENDS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRBEFORE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRAFTER\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"YEAR\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"MONTH\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DAY\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"HOURS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"MINUTES\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SECONDS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"TIMEZONE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"TZ\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"NOW\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"UUID\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRUUID\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"MD5\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SHA1\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SHA256\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SHA384\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SHA512\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"COALESCE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"IF\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRLANG\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRDT\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SAMETERM\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ISIRI\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ISURI\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ISBLANK\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ISLITERAL\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"ISNUMERIC\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"TRUE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"FALSE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"VAR1\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"VAR2\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"COUNT\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SUM\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"MIN\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"MAX\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"AVG\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SAMPLE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"GROUP_CONCAT\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"SUBSTR\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"REPLACE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"REGEX\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"EXISTS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"NOT\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"IRI_REF\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"IRI_REF_START\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"INTEGER\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DECIMAL\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DOUBLE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"PNAME_LN\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"PNAME_NS\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL1\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL1_START\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL2\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL2_START\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"or([builtInCall,xiriOrFunction,xRDFLiteral,numericLiteral,booleanLiteral,var,aggregate])\"]}, \r\n  \"prologue\" : {\r\n     \"BASE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"PREFIX\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"GENERATE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"TEMPLATE\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"PERFORM\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"FUNCTION\": [\"*or([baseDecl,prefixDecl])\"], \r\n     \"SELECT\": [\"*or([baseDecl,prefixDecl])\"]}, \r\n  \"propertyList\" : {\r\n     \"a\": [\"propertyListNotEmpty\"], \r\n     \"VAR1\": [\"propertyListNotEmpty\"], \r\n     \"VAR2\": [\"propertyListNotEmpty\"], \r\n     \"NIL\": [\"propertyListNotEmpty\"], \r\n     \"START_XEXPR\": [\"propertyListNotEmpty\"], \r\n     \"IRI_REF\": [\"propertyListNotEmpty\"], \r\n     \"IRI_REF_START\": [\"propertyListNotEmpty\"], \r\n     \"TRUE\": [\"propertyListNotEmpty\"], \r\n     \"FALSE\": [\"propertyListNotEmpty\"], \r\n     \"BLANK_NODE_LABEL\": [\"propertyListNotEmpty\"], \r\n     \"ANON\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \r\n     \"INTEGER\": [\"propertyListNotEmpty\"], \r\n     \"DECIMAL\": [\"propertyListNotEmpty\"], \r\n     \"DOUBLE\": [\"propertyListNotEmpty\"], \r\n     \"INTEGER_POSITIVE\": [\"propertyListNotEmpty\"], \r\n     \"DECIMAL_POSITIVE\": [\"propertyListNotEmpty\"], \r\n     \"DOUBLE_POSITIVE\": [\"propertyListNotEmpty\"], \r\n     \"INTEGER_NEGATIVE\": [\"propertyListNotEmpty\"], \r\n     \"DECIMAL_NEGATIVE\": [\"propertyListNotEmpty\"], \r\n     \"DOUBLE_NEGATIVE\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1_START\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2_START\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"propertyListNotEmpty\"], \r\n     \"}\": [], \r\n     \".\": [], \r\n     \"GENERATE\": []}, \r\n  \"propertyListNotEmpty\" : {\r\n     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"NIL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"START_XEXPR\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"IRI_REF_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"TRUE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"FALSE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"BLANK_NODE_LABEL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"ANON\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"INTEGER\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"DECIMAL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"DOUBLE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"INTEGER_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"DECIMAL_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"DOUBLE_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"INTEGER_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL1_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL2_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \r\n  \"propertyListPath\" : {\r\n     \"a\": [\"propertyListNotEmpty\"], \r\n     \"VAR1\": [\"propertyListNotEmpty\"], \r\n     \"VAR2\": [\"propertyListNotEmpty\"], \r\n     \"NIL\": [\"propertyListNotEmpty\"], \r\n     \"START_XEXPR\": [\"propertyListNotEmpty\"], \r\n     \"IRI_REF\": [\"propertyListNotEmpty\"], \r\n     \"IRI_REF_START\": [\"propertyListNotEmpty\"], \r\n     \"TRUE\": [\"propertyListNotEmpty\"], \r\n     \"FALSE\": [\"propertyListNotEmpty\"], \r\n     \"BLANK_NODE_LABEL\": [\"propertyListNotEmpty\"], \r\n     \"ANON\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \r\n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \r\n     \"INTEGER\": [\"propertyListNotEmpty\"], \r\n     \"DECIMAL\": [\"propertyListNotEmpty\"], \r\n     \"DOUBLE\": [\"propertyListNotEmpty\"], \r\n     \"INTEGER_POSITIVE\": [\"propertyListNotEmpty\"], \r\n     \"DECIMAL_POSITIVE\": [\"propertyListNotEmpty\"], \r\n     \"DOUBLE_POSITIVE\": [\"propertyListNotEmpty\"], \r\n     \"INTEGER_NEGATIVE\": [\"propertyListNotEmpty\"], \r\n     \"DECIMAL_NEGATIVE\": [\"propertyListNotEmpty\"], \r\n     \"DOUBLE_NEGATIVE\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1_START\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2_START\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2\": [\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"propertyListNotEmpty\"], \r\n     \".\": [], \r\n     \"{\": [], \r\n     \"OPTIONAL\": [], \r\n     \"MINUS\": [], \r\n     \"GRAPH\": [], \r\n     \"SERVICE\": [], \r\n     \"FILTER\": [], \r\n     \"BIND\": [], \r\n     \"VALUES\": [], \r\n     \"}\": []}, \r\n  \"propertyListPathNotEmpty\" : {\r\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"START_XEXPR\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"IRI_REF_START\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \r\n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \r\n  \"rdfLiteral\" : {\r\n     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \r\n  \"regexExpression\" : {\r\n     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n  \"relationalExpression\" : {\r\n     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"IRI_REF_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL1_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL2_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \r\n  \"selectClause\" : {\r\n     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \r\n  \"selectQuery\" : {\r\n     \"SELECT\": [\"namedSelectClause\",\"*datasetClause\",\"*bindingClauses\",\"?whereClause\",\"solutionModifier\"]}, \r\n  \"separator\" : {\r\n     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \r\n  \"serviceGraphPattern\" : {\r\n     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrXIri\",\"groupGraphPattern\"]}, \r\n  \"solutionModifier\" : {\r\n     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"EXPRESSIONS\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \".\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"NAMED\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \")\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \",\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \r\n     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \r\n  \"sourceClause\" : {\r\n     \"SOURCE\": [\"SOURCE\",\"varOrXIri\",\"?[ACCEPT,varOrXIri]\",\"AS\",\"var\"]}, \r\n  \"sourceSelector\" : {\r\n     \"IRI_REF\": [\"iriRef\"], \r\n     \"PNAME_LN\": [\"iriRef\"], \r\n     \"PNAME_NS\": [\"iriRef\"]}, \r\n  \"sparql11\" : {\r\n     \"GENERATE\": [\"sparqlExtUnit\",\"$\"], \r\n     \"TEMPLATE\": [\"sparqlExtUnit\",\"$\"], \r\n     \"PERFORM\": [\"sparqlExtUnit\",\"$\"], \r\n     \"FUNCTION\": [\"sparqlExtUnit\",\"$\"], \r\n     \"SELECT\": [\"sparqlExtUnit\",\"$\"], \r\n     \"BASE\": [\"sparqlExtUnit\",\"$\"], \r\n     \"PREFIX\": [\"sparqlExtUnit\",\"$\"]}, \r\n  \"sparqlExtUnit\" : {\r\n     \"GENERATE\": [\"extQuery\"], \r\n     \"TEMPLATE\": [\"extQuery\"], \r\n     \"PERFORM\": [\"extQuery\"], \r\n     \"FUNCTION\": [\"extQuery\"], \r\n     \"SELECT\": [\"extQuery\"], \r\n     \"BASE\": [\"extQuery\"], \r\n     \"PREFIX\": [\"extQuery\"]}, \r\n  \"storeProperty\" : {\r\n     \"VAR1\": [], \r\n     \"VAR2\": [], \r\n     \"NIL\": [], \r\n     \"START_XEXPR\": [], \r\n     \"IRI_REF\": [], \r\n     \"IRI_REF_START\": [], \r\n     \"TRUE\": [], \r\n     \"FALSE\": [], \r\n     \"BLANK_NODE_LABEL\": [], \r\n     \"ANON\": [], \r\n     \"PNAME_LN\": [], \r\n     \"PNAME_NS\": [], \r\n     \"INTEGER\": [], \r\n     \"DECIMAL\": [], \r\n     \"DOUBLE\": [], \r\n     \"INTEGER_POSITIVE\": [], \r\n     \"DECIMAL_POSITIVE\": [], \r\n     \"DOUBLE_POSITIVE\": [], \r\n     \"INTEGER_NEGATIVE\": [], \r\n     \"DECIMAL_NEGATIVE\": [], \r\n     \"DOUBLE_NEGATIVE\": [], \r\n     \"STRING_LITERAL1\": [], \r\n     \"STRING_LITERAL1_START\": [], \r\n     \"STRING_LITERAL2\": [], \r\n     \"STRING_LITERAL2_START\": [], \r\n     \"STRING_LITERAL_LONG1\": [], \r\n     \"STRING_LITERAL_LONG1_START\": [], \r\n     \"STRING_LITERAL_LONG2\": [], \r\n     \"STRING_LITERAL_LONG2_START\": [], \r\n     \"a\": []}, \r\n  \"strReplaceExpression\" : {\r\n     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n  \"string\" : {\r\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \r\n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \r\n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \r\n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \r\n  \"subGenerateQuery\" : {\r\n     \"GENERATE\": [\"GENERATE\",\"or([[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList],[?varList,generateClause]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"]}, \r\n  \"subPerformQuery\" : {\r\n     \"PERFORM\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"VAR1\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"VAR2\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"IRI_REF\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"IRI_REF_START\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"START_XEXPR\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"PNAME_LN\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"], \r\n     \"PNAME_NS\": [\"or([performCall,[PERFORM,or([performCall,[?varList,performClause]])]])\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\",\"?postSelectClause\"]}, \r\n  \"subSelect\" : {\r\n     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \r\n  \"subTemplateQuery\" : {\r\n     \"TEMPLATE\": [\"TEMPLATE\",\"or([[or([varOrXIri,[or([IRI,URI]), (,expression,)]]),?argList],[?varList,templateClause]])\",\"*datasetClause\",\"*bindingClauses\",\"?[WHERE,groupGraphPattern]\",\"solutionModifier\"]}, \r\n  \"substringExpression\" : {\r\n     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \r\n  \"switchToParsingXIRI\" : {\r\n     \"IRI_REF_SUB\": [], \r\n     \"IRI_REF_END\": []}, \r\n  \"switchToParsingXL1\" : {\r\n     \"STRING_LITERAL_LONG1_SUB\": [], \r\n     \"STRING_LITERAL_LONG1_END\": []}, \r\n  \"switchToParsingXL2\" : {\r\n     \"STRING_LITERAL_LONG2_SUB\": [], \r\n     \"STRING_LITERAL_LONG2_END\": []}, \r\n  \"switchToParsingXS1\" : {\r\n     \"STRING_LITERAL1_SUB\": [], \r\n     \"STRING_LITERAL1_END\": []}, \r\n  \"switchToParsingXS2\" : {\r\n     \"STRING_LITERAL2_SUB\": [], \r\n     \"STRING_LITERAL2_END\": []}, \r\n  \"tExpression\" : {\r\n     \"BOX\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"FORMAT\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"GROUP\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"TEMPLATE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STR\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"LANG\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"LANGMATCHES\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DATATYPE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"BOUND\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"IRI\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"URI\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"BNODE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"RAND\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ABS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"CEIL\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"FLOOR\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ROUND\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"CONCAT\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRLEN\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"UCASE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"LCASE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ENCODE_FOR_URI\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"CONTAINS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRSTARTS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRENDS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRBEFORE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRAFTER\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"YEAR\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"MONTH\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DAY\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"HOURS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"MINUTES\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SECONDS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"TIMEZONE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"TZ\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"NOW\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"UUID\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRUUID\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"MD5\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SHA1\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SHA256\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SHA384\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SHA512\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"COALESCE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"IF\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRLANG\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRDT\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SAMETERM\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ISIRI\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ISURI\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ISBLANK\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ISLITERAL\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"ISNUMERIC\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"TRUE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"FALSE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"VAR1\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"VAR2\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"COUNT\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SUM\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"MIN\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"MAX\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"AVG\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SAMPLE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"GROUP_CONCAT\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"SUBSTR\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"REPLACE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"REGEX\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"EXISTS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"NOT\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"IRI_REF\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"IRI_REF_START\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"INTEGER\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DECIMAL\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DOUBLE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"INTEGER_POSITIVE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DECIMAL_POSITIVE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DOUBLE_POSITIVE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"INTEGER_NEGATIVE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"PNAME_LN\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"PNAME_NS\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL1\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL1_START\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL2\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL2_START\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"or([primaryExpressionNotBracketted,box,tformat,group,[subTemplateQuery,.]])\"]}, \r\n  \"templateAfter\" : {\r\n     \"AFTER\": [\"AFTER\",\"=\",\"expression\"]}, \r\n  \"templateBefore\" : {\r\n     \"BEFORE\": [\"BEFORE\",\"=\",\"expression\",\";\"]}, \r\n  \"templateClause\" : {\r\n     \"{\": [\"{\",\"templateInnerClause\",\"}\"]}, \r\n  \"templateInnerClause\" : {\r\n     \";\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"BOX\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"FORMAT\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"GROUP\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"TEMPLATE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STR\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"LANG\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"LANGMATCHES\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DATATYPE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"BOUND\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"IRI\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"URI\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"BNODE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"RAND\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ABS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"CEIL\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"FLOOR\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ROUND\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"CONCAT\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRLEN\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"UCASE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"LCASE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ENCODE_FOR_URI\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"CONTAINS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRSTARTS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRENDS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRBEFORE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRAFTER\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"YEAR\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"MONTH\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DAY\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"HOURS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"MINUTES\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SECONDS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"TIMEZONE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"TZ\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"NOW\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"UUID\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRUUID\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"MD5\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SHA1\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SHA256\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SHA384\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SHA512\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"COALESCE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"IF\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRLANG\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRDT\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SAMETERM\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ISIRI\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ISURI\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ISBLANK\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ISLITERAL\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"ISNUMERIC\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"TRUE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"FALSE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"VAR1\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"VAR2\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"COUNT\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SUM\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"MIN\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"MAX\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"AVG\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SAMPLE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"GROUP_CONCAT\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"SUBSTR\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"REPLACE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"REGEX\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"EXISTS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"NOT\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"IRI_REF\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"IRI_REF_START\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"INTEGER\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DECIMAL\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DOUBLE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"INTEGER_POSITIVE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DECIMAL_POSITIVE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DOUBLE_POSITIVE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"INTEGER_NEGATIVE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"PNAME_LN\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"PNAME_NS\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL1\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL1_START\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL2\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL2_START\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"BEFORE\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"], \r\n     \"}\": [\"?templateBefore\",\"*tExpression\",\"?[;,or([[templateSeparator,?[;,templateAfter]],templateAfter])]\"]}, \r\n  \"templateQuery\" : {\r\n     \"TEMPLATE\": [\"TEMPLATE\",\"?[sourceSelector,?varList]\",\"templateClause\",\"*datasetClause\",\"*bindingClauses\",\"?whereClause\",\"solutionModifier\"]}, \r\n  \"templateSeparator\" : {\r\n     \"SEPARATOR\": [\"SEPARATOR\",\"=\",\"expression\"]}, \r\n  \"tformat\" : {\r\n     \"FORMAT\": [\"FORMAT\",\"{\",\"primaryExpressionNotBracketted\",\"+tExpression\",\"}\"]}, \r\n  \"triplesBlock\" : {\r\n     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"START_XEXPR\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"IRI_REF_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL1_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL2_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \r\n  \"triplesNode\" : {\r\n     \"(\": [\"collection\"], \r\n     \"[\": [\"blankNodePropertyList\"]}, \r\n  \"triplesNodePath\" : {\r\n     \"(\": [\"collectionPath\"], \r\n     \"[\": [\"blankNodePropertyListPath\"]}, \r\n  \"triplesSameSubject\" : {\r\n     \"VAR1\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"VAR2\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"NIL\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"START_XEXPR\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"IRI_REF\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"IRI_REF_START\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"TRUE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"FALSE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"ANON\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"PNAME_LN\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"PNAME_NS\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"INTEGER\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"DECIMAL\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"DOUBLE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL1_START\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL2_START\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"varOrXTerm\",\"propertyListNotEmpty\"], \r\n     \"(\": [\"triplesNode\",\"propertyList\"], \r\n     \"[\": [\"triplesNode\",\"propertyList\"]}, \r\n  \"triplesSameSubjectPath\" : {\r\n     \"VAR1\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"VAR2\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"NIL\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"START_XEXPR\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"IRI_REF\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"IRI_REF_START\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"TRUE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"FALSE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"BLANK_NODE_LABEL\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"ANON\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"PNAME_LN\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"PNAME_NS\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"INTEGER\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DECIMAL\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DOUBLE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"INTEGER_POSITIVE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DECIMAL_POSITIVE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DOUBLE_POSITIVE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"INTEGER_NEGATIVE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DECIMAL_NEGATIVE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"DOUBLE_NEGATIVE\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL1\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL1_START\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL2\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL2_START\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"varOrXTerm\",\"propertyListPathNotEmpty\"], \r\n     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \r\n     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \r\n  \"unaryExpression\" : {\r\n     \"!\": [\"!\",\"primaryExpression\"], \r\n     \"+\": [\"+\",\"primaryExpression\"], \r\n     \"-\": [\"-\",\"primaryExpression\"], \r\n     \"VAR1\": [\"primaryExpression\"], \r\n     \"VAR2\": [\"primaryExpression\"], \r\n     \"(\": [\"primaryExpression\"], \r\n     \"STR\": [\"primaryExpression\"], \r\n     \"LANG\": [\"primaryExpression\"], \r\n     \"LANGMATCHES\": [\"primaryExpression\"], \r\n     \"DATATYPE\": [\"primaryExpression\"], \r\n     \"BOUND\": [\"primaryExpression\"], \r\n     \"IRI\": [\"primaryExpression\"], \r\n     \"URI\": [\"primaryExpression\"], \r\n     \"BNODE\": [\"primaryExpression\"], \r\n     \"RAND\": [\"primaryExpression\"], \r\n     \"ABS\": [\"primaryExpression\"], \r\n     \"CEIL\": [\"primaryExpression\"], \r\n     \"FLOOR\": [\"primaryExpression\"], \r\n     \"ROUND\": [\"primaryExpression\"], \r\n     \"CONCAT\": [\"primaryExpression\"], \r\n     \"STRLEN\": [\"primaryExpression\"], \r\n     \"UCASE\": [\"primaryExpression\"], \r\n     \"LCASE\": [\"primaryExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \r\n     \"CONTAINS\": [\"primaryExpression\"], \r\n     \"STRSTARTS\": [\"primaryExpression\"], \r\n     \"STRENDS\": [\"primaryExpression\"], \r\n     \"STRBEFORE\": [\"primaryExpression\"], \r\n     \"STRAFTER\": [\"primaryExpression\"], \r\n     \"YEAR\": [\"primaryExpression\"], \r\n     \"MONTH\": [\"primaryExpression\"], \r\n     \"DAY\": [\"primaryExpression\"], \r\n     \"HOURS\": [\"primaryExpression\"], \r\n     \"MINUTES\": [\"primaryExpression\"], \r\n     \"SECONDS\": [\"primaryExpression\"], \r\n     \"TIMEZONE\": [\"primaryExpression\"], \r\n     \"TZ\": [\"primaryExpression\"], \r\n     \"NOW\": [\"primaryExpression\"], \r\n     \"UUID\": [\"primaryExpression\"], \r\n     \"STRUUID\": [\"primaryExpression\"], \r\n     \"MD5\": [\"primaryExpression\"], \r\n     \"SHA1\": [\"primaryExpression\"], \r\n     \"SHA256\": [\"primaryExpression\"], \r\n     \"SHA384\": [\"primaryExpression\"], \r\n     \"SHA512\": [\"primaryExpression\"], \r\n     \"COALESCE\": [\"primaryExpression\"], \r\n     \"IF\": [\"primaryExpression\"], \r\n     \"STRLANG\": [\"primaryExpression\"], \r\n     \"STRDT\": [\"primaryExpression\"], \r\n     \"SAMETERM\": [\"primaryExpression\"], \r\n     \"ISIRI\": [\"primaryExpression\"], \r\n     \"ISURI\": [\"primaryExpression\"], \r\n     \"ISBLANK\": [\"primaryExpression\"], \r\n     \"ISLITERAL\": [\"primaryExpression\"], \r\n     \"ISNUMERIC\": [\"primaryExpression\"], \r\n     \"TRUE\": [\"primaryExpression\"], \r\n     \"FALSE\": [\"primaryExpression\"], \r\n     \"COUNT\": [\"primaryExpression\"], \r\n     \"SUM\": [\"primaryExpression\"], \r\n     \"MIN\": [\"primaryExpression\"], \r\n     \"MAX\": [\"primaryExpression\"], \r\n     \"AVG\": [\"primaryExpression\"], \r\n     \"SAMPLE\": [\"primaryExpression\"], \r\n     \"GROUP_CONCAT\": [\"primaryExpression\"], \r\n     \"SUBSTR\": [\"primaryExpression\"], \r\n     \"REPLACE\": [\"primaryExpression\"], \r\n     \"REGEX\": [\"primaryExpression\"], \r\n     \"EXISTS\": [\"primaryExpression\"], \r\n     \"NOT\": [\"primaryExpression\"], \r\n     \"IRI_REF\": [\"primaryExpression\"], \r\n     \"IRI_REF_START\": [\"primaryExpression\"], \r\n     \"INTEGER\": [\"primaryExpression\"], \r\n     \"DECIMAL\": [\"primaryExpression\"], \r\n     \"DOUBLE\": [\"primaryExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \r\n     \"PNAME_LN\": [\"primaryExpression\"], \r\n     \"PNAME_NS\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL1\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL1_START\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL2\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL2_START\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"primaryExpression\"]}, \r\n  \"valueLogical\" : {\r\n     \"!\": [\"relationalExpression\"], \r\n     \"+\": [\"relationalExpression\"], \r\n     \"-\": [\"relationalExpression\"], \r\n     \"VAR1\": [\"relationalExpression\"], \r\n     \"VAR2\": [\"relationalExpression\"], \r\n     \"(\": [\"relationalExpression\"], \r\n     \"STR\": [\"relationalExpression\"], \r\n     \"LANG\": [\"relationalExpression\"], \r\n     \"LANGMATCHES\": [\"relationalExpression\"], \r\n     \"DATATYPE\": [\"relationalExpression\"], \r\n     \"BOUND\": [\"relationalExpression\"], \r\n     \"IRI\": [\"relationalExpression\"], \r\n     \"URI\": [\"relationalExpression\"], \r\n     \"BNODE\": [\"relationalExpression\"], \r\n     \"RAND\": [\"relationalExpression\"], \r\n     \"ABS\": [\"relationalExpression\"], \r\n     \"CEIL\": [\"relationalExpression\"], \r\n     \"FLOOR\": [\"relationalExpression\"], \r\n     \"ROUND\": [\"relationalExpression\"], \r\n     \"CONCAT\": [\"relationalExpression\"], \r\n     \"STRLEN\": [\"relationalExpression\"], \r\n     \"UCASE\": [\"relationalExpression\"], \r\n     \"LCASE\": [\"relationalExpression\"], \r\n     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \r\n     \"CONTAINS\": [\"relationalExpression\"], \r\n     \"STRSTARTS\": [\"relationalExpression\"], \r\n     \"STRENDS\": [\"relationalExpression\"], \r\n     \"STRBEFORE\": [\"relationalExpression\"], \r\n     \"STRAFTER\": [\"relationalExpression\"], \r\n     \"YEAR\": [\"relationalExpression\"], \r\n     \"MONTH\": [\"relationalExpression\"], \r\n     \"DAY\": [\"relationalExpression\"], \r\n     \"HOURS\": [\"relationalExpression\"], \r\n     \"MINUTES\": [\"relationalExpression\"], \r\n     \"SECONDS\": [\"relationalExpression\"], \r\n     \"TIMEZONE\": [\"relationalExpression\"], \r\n     \"TZ\": [\"relationalExpression\"], \r\n     \"NOW\": [\"relationalExpression\"], \r\n     \"UUID\": [\"relationalExpression\"], \r\n     \"STRUUID\": [\"relationalExpression\"], \r\n     \"MD5\": [\"relationalExpression\"], \r\n     \"SHA1\": [\"relationalExpression\"], \r\n     \"SHA256\": [\"relationalExpression\"], \r\n     \"SHA384\": [\"relationalExpression\"], \r\n     \"SHA512\": [\"relationalExpression\"], \r\n     \"COALESCE\": [\"relationalExpression\"], \r\n     \"IF\": [\"relationalExpression\"], \r\n     \"STRLANG\": [\"relationalExpression\"], \r\n     \"STRDT\": [\"relationalExpression\"], \r\n     \"SAMETERM\": [\"relationalExpression\"], \r\n     \"ISIRI\": [\"relationalExpression\"], \r\n     \"ISURI\": [\"relationalExpression\"], \r\n     \"ISBLANK\": [\"relationalExpression\"], \r\n     \"ISLITERAL\": [\"relationalExpression\"], \r\n     \"ISNUMERIC\": [\"relationalExpression\"], \r\n     \"TRUE\": [\"relationalExpression\"], \r\n     \"FALSE\": [\"relationalExpression\"], \r\n     \"COUNT\": [\"relationalExpression\"], \r\n     \"SUM\": [\"relationalExpression\"], \r\n     \"MIN\": [\"relationalExpression\"], \r\n     \"MAX\": [\"relationalExpression\"], \r\n     \"AVG\": [\"relationalExpression\"], \r\n     \"SAMPLE\": [\"relationalExpression\"], \r\n     \"GROUP_CONCAT\": [\"relationalExpression\"], \r\n     \"SUBSTR\": [\"relationalExpression\"], \r\n     \"REPLACE\": [\"relationalExpression\"], \r\n     \"REGEX\": [\"relationalExpression\"], \r\n     \"EXISTS\": [\"relationalExpression\"], \r\n     \"NOT\": [\"relationalExpression\"], \r\n     \"IRI_REF\": [\"relationalExpression\"], \r\n     \"IRI_REF_START\": [\"relationalExpression\"], \r\n     \"INTEGER\": [\"relationalExpression\"], \r\n     \"DECIMAL\": [\"relationalExpression\"], \r\n     \"DOUBLE\": [\"relationalExpression\"], \r\n     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \r\n     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \r\n     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \r\n     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \r\n     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \r\n     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \r\n     \"PNAME_LN\": [\"relationalExpression\"], \r\n     \"PNAME_NS\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL1\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL1_START\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL2\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL2_START\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"relationalExpression\"]}, \r\n  \"valuesClause\" : {\r\n     \"VALUES\": [\"VALUES\",\"dataBlock\"], \r\n     \"$\": [], \r\n     \"}\": []}, \r\n  \"var\" : {\r\n     \"VAR1\": [\"VAR1\"], \r\n     \"VAR2\": [\"VAR2\"]}, \r\n  \"varList\" : {\r\n     \"NIL\": [\"NIL\"], \r\n     \"(\": [\"(\",\"var\",\"*[,,var]\",\")\"]}, \r\n  \"varOrXExpr\" : {\r\n     \"VAR1\": [\"or([var,xExpr])\"], \r\n     \"VAR2\": [\"or([var,xExpr])\"], \r\n     \"START_XEXPR\": [\"or([var,xExpr])\"]}, \r\n  \"varOrXIri\" : {\r\n     \"VAR1\": [\"varOrXExpr\"], \r\n     \"VAR2\": [\"varOrXExpr\"], \r\n     \"START_XEXPR\": [\"varOrXExpr\"], \r\n     \"IRI_REF\": [\"xiri\"], \r\n     \"IRI_REF_START\": [\"xiri\"], \r\n     \"PNAME_LN\": [\"xiri\"], \r\n     \"PNAME_NS\": [\"xiri\"]}, \r\n  \"varOrXTerm\" : {\r\n     \"VAR1\": [\"var\"], \r\n     \"VAR2\": [\"var\"], \r\n     \"NIL\": [\"xTerm\"], \r\n     \"START_XEXPR\": [\"xTerm\"], \r\n     \"IRI_REF\": [\"xTerm\"], \r\n     \"IRI_REF_START\": [\"xTerm\"], \r\n     \"TRUE\": [\"xTerm\"], \r\n     \"FALSE\": [\"xTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"xTerm\"], \r\n     \"ANON\": [\"xTerm\"], \r\n     \"PNAME_LN\": [\"xTerm\"], \r\n     \"PNAME_NS\": [\"xTerm\"], \r\n     \"INTEGER\": [\"xTerm\"], \r\n     \"DECIMAL\": [\"xTerm\"], \r\n     \"DOUBLE\": [\"xTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"xTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"xTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"xTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"xTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"xTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"xTerm\"], \r\n     \"STRING_LITERAL1\": [\"xTerm\"], \r\n     \"STRING_LITERAL1_START\": [\"xTerm\"], \r\n     \"STRING_LITERAL2\": [\"xTerm\"], \r\n     \"STRING_LITERAL2_START\": [\"xTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xTerm\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xTerm\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xTerm\"]}, \r\n  \"verb\" : {\r\n     \"VAR1\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"VAR2\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"NIL\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"START_XEXPR\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"IRI_REF\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"IRI_REF_START\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"TRUE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"FALSE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"BLANK_NODE_LABEL\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"ANON\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"PNAME_LN\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"PNAME_NS\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"INTEGER\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"DECIMAL\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"DOUBLE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"INTEGER_POSITIVE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"DECIMAL_POSITIVE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"DOUBLE_POSITIVE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"INTEGER_NEGATIVE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"DECIMAL_NEGATIVE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"DOUBLE_NEGATIVE\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL1\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL1_START\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL2\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL2_START\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG1\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG2\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"storeProperty\",\"varOrXTerm\"], \r\n     \"a\": [\"storeProperty\",\"a\"]}, \r\n  \"verbPath\" : {\r\n     \"^\": [\"path\"], \r\n     \"a\": [\"path\"], \r\n     \"!\": [\"path\"], \r\n     \"(\": [\"path\"], \r\n     \"IRI_REF\": [\"path\"], \r\n     \"IRI_REF_START\": [\"path\"], \r\n     \"PNAME_LN\": [\"path\"], \r\n     \"PNAME_NS\": [\"path\"]}, \r\n  \"verbSimple\" : {\r\n     \"VAR1\": [\"varOrXExpr\"], \r\n     \"VAR2\": [\"varOrXExpr\"], \r\n     \"START_XEXPR\": [\"varOrXExpr\"]}, \r\n  \"whereClause\" : {\r\n     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \r\n     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}, \r\n  \"xExpr\" : {\r\n     \"START_XEXPR\": [\"START_XEXPR\",\"expression\",\"}\"]}, \r\n  \"xNode\" : {\r\n     \"START_XEXPR\": [\"xExpr\"], \r\n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \r\n     \"IRI_REF\": [\"xiri\"], \r\n     \"IRI_REF_START\": [\"xiri\"], \r\n     \"PNAME_LN\": [\"xiri\"], \r\n     \"PNAME_NS\": [\"xiri\"]}, \r\n  \"xRDFLiteral\" : {\r\n     \"STRING_LITERAL1\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL1_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL2\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL2_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"]}, \r\n  \"xString\" : {\r\n     \"STRING_LITERAL1\": [\"xString_Literal1\"], \r\n     \"STRING_LITERAL1_START\": [\"xString_Literal1\"], \r\n     \"STRING_LITERAL2\": [\"xString_Literal2\"], \r\n     \"STRING_LITERAL2_START\": [\"xString_Literal2\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xString_Literal_Long1\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xString_Literal_Long1\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xString_Literal_Long2\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xString_Literal_Long2\"]}, \r\n  \"xString_Literal1\" : {\r\n     \"STRING_LITERAL1\": [\"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\"], \r\n     \"STRING_LITERAL1_START\": [\"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\"]}, \r\n  \"xString_Literal1_Sub\" : {\r\n     \"!\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"+\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"-\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"VAR1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"VAR2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"(\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"LANG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DATATYPE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"BOUND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"IRI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"URI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"BNODE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"RAND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ABS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"CEIL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"FLOOR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ROUND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"CONCAT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRLEN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"UCASE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"LCASE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"CONTAINS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRSTARTS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRENDS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRBEFORE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRAFTER\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"YEAR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"MONTH\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DAY\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"HOURS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"MINUTES\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SECONDS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"TIMEZONE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"TZ\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"NOW\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"UUID\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRUUID\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"MD5\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SHA1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SHA256\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SHA384\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SHA512\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"COALESCE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"IF\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRLANG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRDT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SAMETERM\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ISIRI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ISURI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ISBLANK\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ISLITERAL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"TRUE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"FALSE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"COUNT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SUM\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"MIN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"MAX\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"AVG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SAMPLE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"SUBSTR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"REPLACE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"REGEX\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"EXISTS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"NOT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"IRI_REF\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"INTEGER\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DECIMAL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DOUBLE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"PNAME_LN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"PNAME_NS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"]}, \r\n  \"xString_Literal2\" : {\r\n     \"STRING_LITERAL2\": [\"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\"], \r\n     \"STRING_LITERAL2_START\": [\"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\"]}, \r\n  \"xString_Literal2_Sub\" : {\r\n     \"!\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"+\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"-\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"VAR1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"VAR2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"(\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"LANG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DATATYPE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"BOUND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"IRI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"URI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"BNODE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"RAND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ABS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"CEIL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"FLOOR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ROUND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"CONCAT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRLEN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"UCASE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"LCASE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"CONTAINS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRSTARTS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRENDS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRBEFORE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRAFTER\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"YEAR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"MONTH\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DAY\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"HOURS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"MINUTES\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SECONDS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"TIMEZONE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"TZ\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"NOW\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"UUID\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRUUID\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"MD5\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SHA1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SHA256\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SHA384\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SHA512\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"COALESCE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"IF\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRLANG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRDT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SAMETERM\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ISIRI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ISURI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ISBLANK\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ISLITERAL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"TRUE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"FALSE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"COUNT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SUM\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"MIN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"MAX\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"AVG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SAMPLE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"SUBSTR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"REPLACE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"REGEX\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"EXISTS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"NOT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"IRI_REF\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"INTEGER\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DECIMAL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DOUBLE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"PNAME_LN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"PNAME_NS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"]}, \r\n  \"xString_Literal_Long1\" : {\r\n     \"STRING_LITERAL_LONG1\": [\"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\"]}, \r\n  \"xString_Literal_Long1_Sub\" : {\r\n     \"!\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"+\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"-\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"VAR1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"VAR2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"(\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"LANG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DATATYPE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"BOUND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"IRI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"URI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"BNODE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"RAND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ABS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"CEIL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"FLOOR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ROUND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"CONCAT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRLEN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"UCASE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"LCASE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"CONTAINS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRSTARTS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRENDS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRBEFORE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRAFTER\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"YEAR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"MONTH\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DAY\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"HOURS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"MINUTES\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SECONDS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"TIMEZONE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"TZ\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"NOW\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"UUID\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRUUID\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"MD5\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SHA1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SHA256\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SHA384\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SHA512\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"COALESCE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"IF\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRLANG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRDT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SAMETERM\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ISIRI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ISURI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ISBLANK\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ISLITERAL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"TRUE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"FALSE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"COUNT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SUM\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"MIN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"MAX\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"AVG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SAMPLE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"SUBSTR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"REPLACE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"REGEX\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"EXISTS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"NOT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"IRI_REF\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"INTEGER\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DECIMAL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DOUBLE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"PNAME_LN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"PNAME_NS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"]}, \r\n  \"xString_Literal_Long2\" : {\r\n     \"STRING_LITERAL_LONG2\": [\"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\"]}, \r\n  \"xString_Literal_Long2_Sub\" : {\r\n     \"!\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"+\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"-\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"VAR1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"VAR2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"(\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"LANG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DATATYPE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"BOUND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"IRI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"URI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"BNODE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"RAND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ABS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"CEIL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"FLOOR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ROUND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"CONCAT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRLEN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"UCASE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"LCASE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"CONTAINS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRSTARTS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRENDS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRBEFORE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRAFTER\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"YEAR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"MONTH\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DAY\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"HOURS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"MINUTES\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SECONDS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"TIMEZONE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"TZ\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"NOW\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"UUID\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRUUID\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"MD5\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SHA1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SHA256\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SHA384\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SHA512\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"COALESCE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"IF\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRLANG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRDT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SAMETERM\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ISIRI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ISURI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ISBLANK\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ISLITERAL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"TRUE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"FALSE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"COUNT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SUM\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"MIN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"MAX\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"AVG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SAMPLE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"SUBSTR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"REPLACE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"REGEX\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"EXISTS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"NOT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"IRI_REF\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"INTEGER\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DECIMAL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DOUBLE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"PNAME_LN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"PNAME_NS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"]}, \r\n  \"xTerm\" : {\r\n     \"START_XEXPR\": [\"xNode\"], \r\n     \"IRI_REF\": [\"xNode\"], \r\n     \"IRI_REF_START\": [\"xNode\"], \r\n     \"PNAME_LN\": [\"xNode\"], \r\n     \"PNAME_NS\": [\"xNode\"], \r\n     \"STRING_LITERAL1\": [\"xNode\"], \r\n     \"STRING_LITERAL1_START\": [\"xNode\"], \r\n     \"STRING_LITERAL2\": [\"xNode\"], \r\n     \"STRING_LITERAL2_START\": [\"xNode\"], \r\n     \"STRING_LITERAL_LONG1\": [\"xNode\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"xNode\"], \r\n     \"STRING_LITERAL_LONG2\": [\"xNode\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"xNode\"], \r\n     \"INTEGER\": [\"numericLiteral\"], \r\n     \"DECIMAL\": [\"numericLiteral\"], \r\n     \"DOUBLE\": [\"numericLiteral\"], \r\n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \r\n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \r\n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \r\n     \"TRUE\": [\"booleanLiteral\"], \r\n     \"FALSE\": [\"booleanLiteral\"], \r\n     \"BLANK_NODE_LABEL\": [\"blankNode\"], \r\n     \"ANON\": [\"blankNode\"], \r\n     \"NIL\": [\"NIL\"]}, \r\n  \"xiri\" : {\r\n     \"IRI_REF\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \r\n     \"IRI_REF_START\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \r\n     \"PNAME_LN\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \r\n     \"PNAME_NS\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"]}, \r\n  \"xiriOrFunction\" : {\r\n     \"IRI_REF\": [\"xiri\",\"?argList\"], \r\n     \"IRI_REF_START\": [\"xiri\",\"?argList\"], \r\n     \"PNAME_LN\": [\"xiri\",\"?argList\"], \r\n     \"PNAME_NS\": [\"xiri\",\"?argList\"]}, \r\n  \"xiri_Sub\" : {\r\n     \"!\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"+\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"-\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"VAR1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"VAR2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"(\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"LANG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DATATYPE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"BOUND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"IRI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"URI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"BNODE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"RAND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ABS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"CEIL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"FLOOR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ROUND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"CONCAT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRLEN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"UCASE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"LCASE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"CONTAINS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRSTARTS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRENDS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRBEFORE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRAFTER\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"YEAR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"MONTH\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DAY\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"HOURS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"MINUTES\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SECONDS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"TIMEZONE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"TZ\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"NOW\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"UUID\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRUUID\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"MD5\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SHA1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SHA256\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SHA384\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SHA512\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"COALESCE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"IF\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRLANG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRDT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SAMETERM\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ISIRI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ISURI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ISBLANK\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ISLITERAL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"TRUE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"FALSE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"COUNT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SUM\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"MIN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"MAX\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"AVG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SAMPLE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"SUBSTR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"REPLACE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"REGEX\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"EXISTS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"NOT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"IRI_REF\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"INTEGER\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DECIMAL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DOUBLE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"PNAME_LN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"PNAME_NS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \r\n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"]}\r\n},\r\n\r\nkeywords:/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|GENERATE|TEMPLATE|BOX|FORMAT|BEFORE|AFTER|PERFORM|ITERATOR|SOURCE|ACCEPT|LIST|FUNCTION|EXPRESSIONS|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ,\r\n\r\npunct:/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ,\r\n\r\nstartSymbol:\"sparql11\",\r\nacceptEmpty:true,\r\n}",
    "\"use strict\";\r\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\r\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\r\n  var indentUnit = config.indentUnit;\r\n\r\n  var grammar = require(\"./_tokenizer-table.js\");\r\n  var ll1_table = grammar.table;\r\n\r\n  var IRI_REF = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\r\n  var IRI_REF_START = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*\\\\{';\r\n  var IRI_REF_SUB = '}[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*\\\\{';\r\n  var IRI_REF_END = '}[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\r\n  /*\r\n   * PN_CHARS_BASE =\r\n   * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\r\n   */\r\n\r\n  var PN_CHARS_BASE = \"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\";\r\n  var PN_CHARS_U = PN_CHARS_BASE + \"|_\";\r\n\r\n  var PN_CHARS = \"(\" + PN_CHARS_U + \"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\";\r\n  var VARNAME = \"(\" + PN_CHARS_U + \"|[0-9])\" + \"(\" + PN_CHARS_U + \"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\";\r\n  var VAR1 = \"\\\\?\" + VARNAME;\r\n  var VAR2 = \"\\\\$\" + VARNAME;\r\n\r\n  var START_XEXPR = \"(\\\\$|\\\\?)\\\\{\";\r\n\r\n  var PN_PREFIX = \"(\" + PN_CHARS_BASE + \")(((\" + PN_CHARS + \")|\\\\.)*(\" + PN_CHARS + \"))?\";\r\n\r\n  var HEX = \"[0-9A-Fa-f]\";\r\n  var PERCENT = \"(%\" + HEX + HEX + \")\";\r\n  var PN_LOCAL_ESC = \"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\";\r\n  var PLX = \"(\" + PERCENT + \"|\" + PN_LOCAL_ESC + \")\";\r\n  var PN_LOCAL = \"(\" +\r\n    PN_CHARS_U +\r\n    \"|:|[0-9]|\" +\r\n    PLX +\r\n    \")((\" +\r\n    PN_CHARS +\r\n    \"|\\\\.|:|\" +\r\n    PLX +\r\n    \")*(\" +\r\n    PN_CHARS +\r\n    \"|:|\" +\r\n    PLX +\r\n    \"))?\";\r\n  var BLANK_NODE_LABEL = \"_:(\" + PN_CHARS_U + \"|[0-9])((\" + PN_CHARS + \"|\\\\.)*\" + PN_CHARS + \")?\";\r\n  var PNAME_NS = \"(\" + PN_PREFIX + \")?:\";\r\n  var PNAME_LN = PNAME_NS + PN_LOCAL;\r\n  var LANGTAG = \"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\";\r\n\r\n  var EXPONENT = \"[eE][\\\\+-]?[0-9]+\";\r\n  var INTEGER = \"[0-9]+\";\r\n  var DECIMAL = \"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\";\r\n  var DOUBLE = \"(([0-9]+\\\\.[0-9]*\" + EXPONENT + \")|\" + \"(\\\\.[0-9]+\" + EXPONENT + \")|\" + \"([0-9]+\" + EXPONENT + \"))\";\r\n\r\n  var INTEGER_POSITIVE = \"\\\\+\" + INTEGER;\r\n  var DECIMAL_POSITIVE = \"\\\\+\" + DECIMAL;\r\n  var DOUBLE_POSITIVE = \"\\\\+\" + DOUBLE;\r\n  var INTEGER_NEGATIVE = \"-\" + INTEGER;\r\n  var DECIMAL_NEGATIVE = \"-\" + DECIMAL;\r\n  var DOUBLE_NEGATIVE = \"-\" + DOUBLE;\r\n\r\n  var ECHAR = \"\\\\\\\\[tbnrf\\\\\\\\\\\"'\\\\{}]\";\r\n\r\n  //IMPORTANT: this unicode rule is not in the official grammar.\r\n  //Reason: https://github.com/YASGUI/SGE/issues/49\r\n  //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\r\n  //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\r\n  //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\r\n  var hex4 = HEX + \"{4}\";\r\n  var unicode = \"(\\\\\\\\u\" + hex4 + \"|\\\\\\\\U00(10|0\" + HEX + \")\" + hex4 + \")\";\r\n  var LINE_BREAK = \"\\n\";\r\n\r\n  var OPEN_EXPR = \"\\\\{\";\r\n  var CLOSE_EXPR = \"\\\\}\";\r\n\r\n  var STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*'\";\r\n  var STRING_LITERAL1_START = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*\" + OPEN_EXPR;\r\n  var STRING_LITERAL1_END = CLOSE_EXPR + \"(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*'\";\r\n  var STRING_LITERAL1_SUB = CLOSE_EXPR + \"(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*\" + OPEN_EXPR;\r\n\r\n  var STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*\"';\r\n  var STRING_LITERAL2_START = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*' + OPEN_EXPR;\r\n  var STRING_LITERAL2_END = CLOSE_EXPR + '(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*\"';\r\n  var STRING_LITERAL2_SUB = CLOSE_EXPR + '(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*' + OPEN_EXPR;\r\n\r\n  var STRING_LITERAL_LONG1_QUOTES = \"'''\";\r\n  var STRING_LITERAL_LONG1_CONTENT = \"(('|'')?([^'\\\\\\\\\\\\{]|\" + ECHAR + \"|\" + unicode + \"))*\";\r\n\r\n  var STRING_LITERAL_LONG2_QUOTES = '\"\"\"';\r\n  var STRING_LITERAL_LONG2_CONTENT = '((\"|\"\")?([^\"\\\\\\\\\\\\{]|' + ECHAR + \"|\" + unicode + \"))*\";\r\n\r\n\r\n  var WS = \"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\";\r\n  // Careful! Code mirror feeds one line at a time with no \\n\r\n  // ... but otherwise comment is terminated by \\n\r\n  var COMMENT = \"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\";\r\n  var WS_OR_COMMENT_STAR = \"(\" + WS + \"|(\" + COMMENT + \"))*\";\r\n  var NIL = \"\\\\(\" + WS_OR_COMMENT_STAR + \"\\\\)\";\r\n  var ANON = \"\\\\[\" + WS_OR_COMMENT_STAR + \"\\\\]\";\r\n\r\n  var terminals = { \r\n    \"default\" : [\r\n    {\r\n      name: \"WS\",\r\n      regex: new RegExp(\"^\" + WS + \"+\"),\r\n      style: \"ws\"\r\n    },\r\n    {\r\n      name: \"COMMENT\",\r\n      regex: new RegExp(\"^\" + COMMENT),\r\n      style: \"comment\"\r\n    },\r\n    {\r\n      name: \"IRI_REF\",\r\n      regex: new RegExp(\"^\" + IRI_REF),\r\n      style: \"variable-3\"\r\n    },\r\n    {\r\n      name: \"IRI_REF_START\",\r\n      regex: new RegExp(\"^\" + IRI_REF_START),\r\n      style: \"variable-3\"\r\n    },\r\n    {\r\n      name: \"VAR1\",\r\n      regex: new RegExp(\"^\" + VAR1),\r\n      style: \"atom\"\r\n    },\r\n    {\r\n      name: \"VAR2\",\r\n      regex: new RegExp(\"^\" + VAR2),\r\n      style: \"atom\"\r\n    },\r\n    {\r\n      name: \"START_XEXPR\",\r\n      regex: new RegExp(\"^\" + START_XEXPR),\r\n      style: \"atom\"\r\n    },\r\n    {\r\n      name: \"LANGTAG\",\r\n      regex: new RegExp(\"^\" + LANGTAG),\r\n      style: \"meta\"\r\n    },\r\n    {\r\n      name: \"DOUBLE\",\r\n      regex: new RegExp(\"^\" + DOUBLE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"DECIMAL\",\r\n      regex: new RegExp(\"^\" + DECIMAL),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"INTEGER\",\r\n      regex: new RegExp(\"^\" + INTEGER),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"DOUBLE_POSITIVE\",\r\n      regex: new RegExp(\"^\" + DOUBLE_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"DECIMAL_POSITIVE\",\r\n      regex: new RegExp(\"^\" + DECIMAL_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"INTEGER_POSITIVE\",\r\n      regex: new RegExp(\"^\" + INTEGER_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"DOUBLE_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + DOUBLE_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"DECIMAL_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + DECIMAL_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"INTEGER_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + INTEGER_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_START\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_START_TRUNC\", \r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\r\n      style: \"string\",\r\n      switchTo: \"trunc_l1\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_START\", \r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_START_TRUNC\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\r\n      style: \"string\",\r\n      switchTo: \"trunc_l2\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL1\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL1),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL1_START\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL1_START),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL2\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL2),\r\n      style: \"string\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL2_START\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL2_START),\r\n      style: \"string\"\r\n    },\r\n    // Enclosed comments won't be highlighted\r\n    {\r\n      name: \"NIL\",\r\n      regex: new RegExp(\"^\" + NIL),\r\n      style: \"punc\"\r\n    },\r\n    // Enclosed comments won't be highlighted\r\n    {\r\n      name: \"ANON\",\r\n      regex: new RegExp(\"^\" + ANON),\r\n      style: \"punc\"\r\n    },\r\n    {\r\n      name: \"PNAME_LN\",\r\n      regex: new RegExp(\"^\" + PNAME_LN),\r\n      style: \"string-2\"\r\n    },\r\n    {\r\n      name: \"PNAME_NS\",\r\n      regex: new RegExp(\"^\" + PNAME_NS),\r\n      style: \"string-2\"\r\n    },\r\n    {\r\n      name: \"BLANK_NODE_LABEL\",\r\n      regex: new RegExp(\"^\" + BLANK_NODE_LABEL),\r\n      style: \"string-2\"\r\n    }\r\n  ] ,\r\n  \"xiri\" : [\r\n    {\r\n      name: \"IRI_REF_END\",\r\n      regex: new RegExp(\"^\" + IRI_REF_END),\r\n      style: \"variable-3\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"IRI_REF_SUB\",\r\n      regex: new RegExp(\"^\" + IRI_REF_SUB),\r\n      style: \"variable-3\",\r\n      switchTo: \"default\"\r\n    }\r\n  ] ,\r\n  \"xs1\" : [\r\n    {\r\n      name: \"STRING_LITERAL1_END\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL1_END),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL1_SUB\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL1_SUB),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    }\r\n  ] ,\r\n  \"xs2\" : [\r\n    {\r\n      name: \"STRING_LITERAL2_SUB\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL2_SUB),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL2_END\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL2_END),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    }\r\n  ]  ,\r\n  \"trunc_l1\" : [\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_TRUNC_END\", \r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_TRUNC_OPEN\", \r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_TRUNC_TRUNC\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\r\n      style: \"string\"\r\n    }\r\n  ] ,\r\n  \"trunc_l2\" : [\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_TRUNC_END\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_TRUNC_OPEN\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_TRUNC_TRUNC\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\r\n      style: \"string\"\r\n    }\r\n  ] ,\r\n  \"xl1\" : [\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_END\",\r\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_SUB\",\r\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG1_CLOSE_TRUNC\", // switch to trunc_l1\r\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\r\n      style: \"string\",\r\n      switchTo: \"trunc_l1\"      \r\n    }\r\n  ] ,\r\n  \"xl2\" : [\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_END\",\r\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_SUB\",\r\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\r\n      style: \"string\",\r\n      switchTo: \"default\"\r\n    },\r\n    {\r\n      name: \"STRING_LITERAL_LONG2_CLOSE_TRUNC\",\r\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\r\n      style: \"string\",\r\n      switchTo: \"trunc_l2\"\r\n    }\r\n  ] } ;\r\n\r\n  function getPossibles(symbol) {\r\n    var possibles = [], possiblesOb = ll1_table[symbol];\r\n    if (possiblesOb != undefined) {\r\n      for (var property in possiblesOb) {\r\n        possibles.push(property.toString());\r\n      }\r\n    } else {\r\n      possibles.push(symbol);\r\n    }\r\n    return possibles;\r\n  }\r\n\r\n  function tokenBase(stream, state) {\r\n    function nextToken(consume) {\r\n      var consumed = null;\r\n\r\n      // Tokens defined by individual regular expressions in the current lexical state\r\n      var termls = terminals[state.lexicalState];\r\n      for (var i = 0; i < termls.length; ++i) {\r\n        consumed = stream.match(termls[i].regex, consume, false);\r\n        if (consumed) {\r\n          var result = {\r\n            cat: termls[i].name,\r\n            style: termls[i].style,\r\n            text: consumed[0],\r\n            start: stream.start,\r\n            switchTo: termls[i].switchTo\r\n          };\r\n          return result;\r\n        }\r\n      }\r\n\r\n      // Keywords\r\n      consumed = stream.match(grammar.keywords, consume, false);\r\n      if (consumed) {\r\n        return {\r\n          cat: consumed[0].toUpperCase(),\r\n          style: \"keyword\",\r\n          text: consumed[0].toUpperCase(),\r\n          start: stream.start\r\n        };\r\n      }\r\n\r\n      // Punctuation\r\n      consumed = stream.match(grammar.punct, consume, false);\r\n      if (consumed)\r\n        return {\r\n          cat: consumed[0],\r\n          style: \"punc\",\r\n          text: consumed[0],\r\n          start: stream.start\r\n        };\r\n\r\n      // Token is invalid\r\n      // better consume something anyway, or else we're stuck\r\n      consumed = stream.match(/^.[A-Za-z0-9]*/, consume, false);\r\n      return {\r\n        cat: \"<invalid_token>\",\r\n        style: \"error\",\r\n        text: consumed ? consumed[0] : \"$\",\r\n        start: stream.start\r\n      };\r\n    }\r\n\r\n    function recordFailurePos(tokenOb) {\r\n      var col = stream.column();\r\n      state.errorStartPos = col;\r\n      if(tokenOb && tokenOb.text) {\r\n        state.errorEndPos = col + tokenOb.text.length;\r\n      }\r\n    }\r\n\r\n    function setQueryType(s) {\r\n      if (state.queryType == null) {\r\n        if (\r\n          s == \"GENERATE\" ||\r\n          s == \"SELECT\" ||\r\n          s == \"CONSTRUCT\" ||\r\n          s == \"ASK\" ||\r\n          s == \"DESCRIBE\" ||\r\n          s == \"INSERT\" ||\r\n          s == \"DELETE\" ||\r\n          s == \"LOAD\" ||\r\n          s == \"CLEAR\" ||\r\n          s == \"CREATE\" ||\r\n          s == \"DROP\" ||\r\n          s == \"COPY\" ||\r\n          s == \"MOVE\" ||\r\n          s == \"ADD\"\r\n        )\r\n          state.queryType = s;\r\n      }\r\n    }\r\n\r\n    // Some fake non-terminals are just there to have side-effect on state\r\n    // - i.e. allow or disallow variables and bnodes in certain non-nesting\r\n    // contexts\r\n    function setSideConditions(topSymbol) {\r\n      if (topSymbol === \"prefixDecl\") {\r\n        state.inPrefixDecl = true;\r\n      } else {\r\n        state.inPrefixDecl = false;\r\n      }\r\n      switch (topSymbol) {\r\n        case \"disallowVars\":\r\n          state.allowVars = false;\r\n          break;\r\n        case \"allowVars\":\r\n          state.allowVars = true;\r\n          break;\r\n        case \"disallowBnodes\":\r\n          state.allowBnodes = false;\r\n          break;\r\n        case \"allowBnodes\":\r\n          state.allowBnodes = true;\r\n          break;\r\n        case \"storeProperty\":\r\n          state.storeProperty = true;\r\n          break;\r\n      }\r\n    }\r\n\r\n    function checkSideConditions(topSymbol) {\r\n      return (state.allowVars || topSymbol != \"var\") &&\r\n        (state.allowBnodes ||\r\n          (topSymbol != \"blankNode\" &&\r\n            topSymbol != \"blankNodePropertyList\" &&\r\n            topSymbol != \"blankNodePropertyListPath\"));\r\n    }\r\n\r\n    function changeLexicalState(topSymbol) {\r\n      switch (topSymbol) {\r\n        case \"switchToParsingXIRI\":\r\n          state.lexicalState = \"xiri\";\r\n          break;\r\n        case \"switchToParsingXS1\":\r\n          state.lexicalState = \"xs1\";\r\n          break;\r\n        case \"switchToParsingXS2\":\r\n          state.lexicalState = \"xs2\";\r\n          break;\r\n        case \"switchToParsingXL1\":\r\n          state.lexicalState = \"xl1\";\r\n          break;\r\n        case \"switchToParsingXL2\":\r\n          state.lexicalState = \"xl2\";\r\n          break;\r\n      }\r\n    }\r\n\r\n    function checkinLiteral(tokenOb) {\r\n      switch (tokenOb.cat) {\r\n        case \"STRING_LITERAL_LONG1_START_TRUNC\":\r\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\r\n          state.inLiteral.cat = \"STRING_LITERAL_LONG1_START\";\r\n          break;\r\n        case \"STRING_LITERAL_LONG1_TRUNC_END\":\r\n          //console.log(\"in \" + tokenOb.cat + \" and currently in literal \" + state.inLiteral.cat , tokenOb);\r\n          switch (state.inLiteral.cat) {\r\n            case \"STRING_LITERAL_LONG1_START\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG1\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            case \"STRING_LITERAL_LONG1_CLOSE\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG1_END\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            default:\r\n              console.error(\" in token \", state.inLiteral);\r\n              state.OK = false;\r\n              state.complete = false;\r\n              recordFailurePos(tokenOb);\r\n              state.errorMsg = \"Long ''' start_trunc parsing error\";\r\n          }\r\n          break;\r\n        case \"STRING_LITERAL_LONG1_TRUNC_OPEN\":\r\n          //console.log(\"in \" + tokenOb.cat + \" and currently in literal \" + state.inLiteral.cat , tokenOb);\r\n          switch (state.inLiteral.cat) {\r\n            case \"STRING_LITERAL_LONG1_START\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG1_START\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            case \"STRING_LITERAL_LONG1_CLOSE\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG1_SUB\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            default:\r\n              console.error(\" in token \", state.inLiteral);\r\n              state.OK = false;\r\n              state.complete = false;\r\n              recordFailurePos(tokenOb);\r\n              state.errorMsg = \"Long ''' trunc_open parsing error\";\r\n          }\r\n          break;\r\n        case \"STRING_LITERAL_LONG1_TRUNC_TRUNC\":\r\n          state.inLiteral.text += \".\";\r\n          break;\r\n        case \"STRING_LITERAL_LONG1_CLOSE_TRUNC\":\r\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\r\n          state.inLiteral.cat = \"STRING_LITERAL_LONG1_CLOSE\";\r\n          break;\r\n        case \"STRING_LITERAL_LONG2_START_TRUNC\":\r\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\r\n          state.inLiteral.cat = \"STRING_LITERAL_LONG2_START\";\r\n          break;\r\n        case \"STRING_LITERAL_LONG2_TRUNC_END\":\r\n          //console.log(\"in \" + tokenOb.cat + \" and currently in literal \" + state.inLiteral.cat , tokenOb);\r\n          switch (state.inLiteral.cat) {\r\n            case \"STRING_LITERAL_LONG2_START\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG2\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            case \"STRING_LITERAL_LONG2_CLOSE\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG2_END\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            default:\r\n              console.error(\" in token \", state.inLiteral);\r\n              state.OK = false;\r\n              state.complete = false;\r\n              recordFailurePos(tokenOb);\r\n              state.errorMsg = 'Long \"\"\" start_trunc parsing error';\r\n          }\r\n          break;\r\n        case \"STRING_LITERAL_LONG2_TRUNC_OPEN\":\r\n          //console.log(\"in STRING_LITERAL_LONG2_TRUNC_OPEN and currently in literal \" + state.inLiteral.cat , tokenOb);\r\n          switch (state.inLiteral.cat) {\r\n            \r\n            case \"STRING_LITERAL_LONG2_START\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG2_START\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            case \"STRING_LITERAL_LONG2_CLOSE\":\r\n              tokenOb.cat = \"STRING_LITERAL_LONG2_SUB\";\r\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\r\n              state.inLiteral = null;\r\n              break;\r\n            default:\r\n              console.error(\" in token \", state.inLiteral);\r\n              state.OK = false;\r\n              state.complete = false;\r\n              recordFailurePos(tokenOb);\r\n              state.errorMsg = 'Long \"\"\" trunc_open parsing error';\r\n          }\r\n          break;\r\n        case \"STRING_LITERAL_LONG2_TRUNC_TRUNC\":\r\n          state.inLiteral.text += \".\";\r\n          break;\r\n        case \"STRING_LITERAL_LONG2_CLOSE_TRUNC\":\r\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\r\n          state.inLiteral.cat = \"STRING_LITERAL_LONG2_CLOSE\";\r\n          break;\r\n      }\r\n      if(tokenOb.switchTo) {\r\n        state.lexicalState = tokenOb.switchTo;\r\n      }\r\n    }\r\n\r\n    function attemptConsume() {\r\n      var consumed = false;\r\n\r\n      if (stream.pos == 0) {\r\n        state.possibleCurrent = state.possibleNext;\r\n      }\r\n\r\n      var tokenOb = nextToken(false);\r\n      if (tokenOb.cat == \"<invalid_token>\") {\r\n        var t = nextToken(true);\r\n        //console.log(\"consumed \", t.cat, t.text);\r\n        consumed = true;\r\n        if (state.OK==true) {\r\n          state.OK=false;\r\n          state.lexicalState = \"default\";\r\n          recordFailurePos(tokenOb);\r\n        }\r\n        state.complete=false;\r\n        return tokenOb.style;\r\n      }\r\n\r\n      if (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\") {\r\n        state.possibleCurrent = state.possibleNext;\r\n        var t = nextToken(true);\r\n        //console.log(\"consumed \", t.cat, t.text);\r\n        consumed = true;\r\n        return tokenOb.style;\r\n      }\r\n\r\n      if(tokenOb.cat.includes(\"TRUNC\")) {\r\n        var t = nextToken(true);\r\n        //console.log(\"consumed \", t.cat, t.text);\r\n        consumed = true;\r\n        checkinLiteral(tokenOb);\r\n      }  \r\n\r\n      if(state.inLiteral) {\r\n        state.complete = false;\r\n        state.possibleCurrent = state.possibleNext;\r\n        //console.log(\"inliteral, return \", state.inLiteral.style);\r\n        return state.inLiteral.style;\r\n      }\r\n\r\n      // Run the parser until the token is digested or failure\r\n      var finished = false;\r\n      var token = tokenOb.cat;\r\n      var topSymbol;\r\n\r\n      // Incremental LL1 parse\r\n      while (state.stack.length > 0 && token && state.OK && !finished) {\r\n        //console.log(\"----------------\" + topSymbol);\r\n        topSymbol = state.stack.pop();\r\n\r\n        if (!ll1_table[topSymbol]) {\r\n          // Top symbol is a terminal\r\n          if (topSymbol == token) {\r\n            if (state.inPrefixDecl) {\r\n              if (topSymbol === \"PNAME_NS\" && tokenOb.text.length > 0) {\r\n                state.currentPnameNs = tokenOb.text.slice(0, -1);\r\n              } else if (state.currentPnameNs !== undefined && tokenOb.text.length > 2) {\r\n                state.prefixes[state.currentPnameNs] = tokenOb.text.slice(1, -1);\r\n                //reset current pname ns\r\n                state.currentPnameNs = undefined;\r\n              }\r\n            }\r\n            // Matching terminals\r\n            // - ensure token is consumed from input stream\r\n            finished = true;\r\n\r\n            setQueryType(topSymbol);\r\n            // Check whether $ (end of input token) is poss next\r\n            // for everything on stack\r\n            var allNillable = true;\r\n            for (var sp = state.stack.length; sp > 0; --sp) {\r\n              var item = ll1_table[state.stack[sp - 1]];\r\n              if (state.stack[sp - 1] != '$' && ( !item || !item[\"$\"]))  {\r\n                allNillable = false;\r\n              }\r\n            }\r\n            state.complete = allNillable;\r\n            if (state.storeProperty && token.cat != \"punc\") {\r\n              state.lastProperty = tokenOb.text;\r\n              state.storeProperty = false;\r\n            }\r\n\r\n            //check whether a used prefix is actually defined\r\n            if (!state.inPrefixDecl && (token === \"PNAME_NS\" || token === \"PNAME_LN\")) {\r\n              var colonIndex = tokenOb.text.indexOf(\":\");\r\n              if (colonIndex >= 0) {\r\n                var prefNs = tokenOb.text.slice(0, colonIndex);\r\n                //avoid warnings for missing bif prefixes (yuck, virtuoso-specific)\r\n                if (!state.prefixes[prefNs] && [\"bif\", \"xsd\", \"sql\"].indexOf(prefNs) < 0) {\r\n                  state.OK = false;\r\n                  state.lexicalState = \"default\";\r\n                  recordFailurePos(tokenOb);\r\n                  state.errorMsg = \"Prefix '\" + prefNs + \"' is not defined\";\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            state.OK = false;\r\n            state.lexicalState = \"default\";\r\n            state.complete = false;\r\n            recordFailurePos(tokenOb);\r\n          }\r\n        } else {\r\n          // topSymbol is nonterminal\r\n          // - see if there is an entry for topSymbol\r\n          // and nextToken in table\r\n          var nextSymbols = ll1_table[topSymbol][token];\r\n          if (nextSymbols != undefined && checkSideConditions(topSymbol)) {\r\n            // Match - copy RHS of rule to stack\r\n            for (var i = nextSymbols.length - 1; i >= 0; --i) {\r\n              state.stack.push(nextSymbols[i]);\r\n            }\r\n            // Peform any non-grammatical side-effects\r\n            setSideConditions(topSymbol);\r\n          } else if(topSymbol.startsWith(\"switchTo\")) {\r\n            // Attempt with a chage of the lexical state\r\n            changeLexicalState(topSymbol);\r\n            return attemptConsume();\r\n          } else {\r\n            // No match in table - fail\r\n            state.OK = false;\r\n            state.complete = false;\r\n            state.lexicalState = \"default\";\r\n            recordFailurePos(tokenOb);\r\n            state.stack.push(topSymbol); // Shove topSymbol back on stack\r\n          }\r\n        }\r\n      }\r\n      if (!finished && state.OK) {\r\n        state.OK = false;\r\n        state.lexicalState = \"default\";\r\n        state.complete = false;\r\n        recordFailurePos(tokenOb);\r\n      }\r\n\r\n      if(!consumed) {\r\n        var t = nextToken(true);\r\n        //console.log(\"consumed \", t.cat, t.text);\r\n      }\r\n      if(tokenOb.switchTo) {\r\n        state.lexicalState = tokenOb.switchTo;\r\n      }\r\n\r\n      if (state.possibleCurrent.indexOf(\"a\") >= 0) {\r\n        state.lastPredicateOffset = tokenOb.start;\r\n      }\r\n      state.possibleCurrent = state.possibleNext;\r\n      state.possibleNext = getPossibles(state.stack[state.stack.length - 1]);\r\n\r\n      return tokenOb.style;\r\n    }\r\n\r\n    // CodeMirror works with one line at a time,\r\n    // but newline should behave like whitespace\r\n    // - i.e. a definite break between tokens (for autocompleter)\r\n    return attemptConsume();\r\n  }\r\n\r\n  var indentTop = {\r\n    \"*[,, object]\": 3,\r\n    \"*[(,),object]\": 3,\r\n    \"*[(,),objectPath]\": 3,\r\n    \"*[/,pathEltOrInverse]\": 2,\r\n    object: 2,\r\n    objectPath: 2,\r\n    objectList: 2,\r\n    objectListPath: 2,\r\n    storeProperty: 2,\r\n    pathMod: 2,\r\n    \"?pathMod\": 2,\r\n    propertyListNotEmpty: 1,\r\n    propertyList: 1,\r\n    propertyListPath: 1,\r\n    propertyListPathNotEmpty: 1,\r\n    \"?[verb,objectList]\": 1\r\n    //    \"?[or([verbPath, verbSimple]),objectList]\": 1,\r\n  };\r\n\r\n  var indentTable = {\r\n    \"}\": 1,\r\n    \"]\": 1,\r\n    \")\": 1,\r\n    \"{\": -1,\r\n    \"(\": -1,\r\n    \"[\": -1\r\n    //    \"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\r\n  };\r\n\r\n  function indent(state, textAfter) {\r\n    //just avoid we don't indent multi-line  literals\r\n    if (state.inLiteral) return 0;\r\n    if (state.stack.length && state.stack[state.stack.length - 1] == \"?[or([verbPath,verbSimple]),objectList]\") {\r\n      //we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\r\n      return state.lastPredicateOffset;\r\n    } else {\r\n      var n = 0; // indent level\r\n      var i = state.stack.length - 1;\r\n      if (/^[\\}\\]\\)]/.test(textAfter)) {\r\n        // Skip stack items until after matching bracket\r\n        var closeBracket = textAfter.substr(0, 1);\r\n        for (; i >= 0; --i) {\r\n          if (state.stack[i] == closeBracket) {\r\n            --i;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        // Consider nullable non-terminals if at top of stack\r\n        var dn = indentTop[state.stack[i]];\r\n        if (dn) {\r\n          n += dn;\r\n          --i;\r\n        }\r\n      }\r\n      for (; i >= 0; --i) {\r\n        var dn = indentTable[state.stack[i]];\r\n        if (dn) {\r\n          n += dn;\r\n        }\r\n      }\r\n      return n * config.indentUnit;\r\n    }\r\n  }\r\n\r\n  return {\r\n    token: tokenBase,\r\n    startState: function(base) {\r\n      return {\r\n        tokenize: tokenBase,\r\n        OK: true,\r\n        complete: grammar.acceptEmpty,\r\n        errorStartPos: null,\r\n        errorEndPos: null,\r\n        queryType: null,\r\n        possibleCurrent: getPossibles(grammar.startSymbol),\r\n        possibleNext: getPossibles(grammar.startSymbol),\r\n        allowVars: true,\r\n        allowBnodes: true,\r\n        storeProperty: false,\r\n        lastProperty: \"\",\r\n        lexicalState: \"default\",\r\n        inLiteral: null,\r\n        stack: [grammar.startSymbol],\r\n        lastPredicateOffset: config.indentUnit,\r\n        prefixes: {}\r\n      };\r\n    },\r\n    indent: indent,\r\n    electricChars: \"])\"\r\n  };\r\n});\r\nCodeMirror.defineMIME(\"application/vnd.sparql-generate\", \"sparql11\");",
    "/*\r\n* TRIE implementation in Javascript\r\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*\r\n* Date: Nov 7, 2010\r\n*/\r\n\r\n/*\r\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet.\r\n* It has been used to store large dictionaries of English (say) words in spell-checking programs\r\n* and in natural-language \"understanding\" programs.\r\n* @see http://en.wikipedia.org/wiki/Trie\r\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\r\n/*\r\n\r\n* @class Trie\r\n* @constructor\r\n*/\r\n\r\nvar Trie = module.exports = function() {\r\n  this.words = 0;\r\n  this.prefixes = 0;\r\n  this.children = [];\r\n};\r\n\r\nTrie.prototype = {\r\n  /*\r\n    * Insert a word into the dictionary.\r\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\r\n    *\r\n    * @method insert\r\n    * @param {String} str Word to insert in the dictionary\r\n    * @param {Integer} pos Current index of the string to be inserted\r\n    * @return {Void}\r\n    */\r\n  insert: function(str, pos) {\r\n    if (str.length == 0) {\r\n      //blank string cannot be inserted\r\n      return;\r\n    }\r\n\r\n    var T = this, k, child;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      T.words++;\r\n      return;\r\n    }\r\n    T.prefixes++;\r\n    k = str[pos];\r\n    if (T.children[k] === undefined) {\r\n      //if node for this char doesn't exist, create one\r\n      T.children[k] = new Trie();\r\n    }\r\n    child = T.children[k];\r\n    child.insert(str, pos + 1);\r\n  },\r\n\r\n  /*\r\n    * Remove a word from the dictionary.\r\n    *\r\n    * @method remove\r\n    * @param {String} str Word to be removed\r\n    * @param {Integer} pos Current index of the string to be removed\r\n    * @return {Void}\r\n    */\r\n  remove: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return;\r\n    }\r\n\r\n    var T = this, k, child;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (T === undefined) {\r\n      return;\r\n    }\r\n    if (pos === str.length) {\r\n      T.words--;\r\n      return;\r\n    }\r\n    T.prefixes--;\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    child.remove(str, pos + 1);\r\n  },\r\n\r\n  /*\r\n    * Update an existing word in the dictionary.\r\n    * This method removes the old word from the dictionary and inserts the new word.\r\n    *\r\n    * @method update\r\n    * @param {String} strOld The old word to be replaced\r\n    * @param {String} strNew The new word to be inserted\r\n    * @return {Void}\r\n    */\r\n  update: function(strOld, strNew) {\r\n    if (strOld.length == 0 || strNew.length == 0) {\r\n      return;\r\n    }\r\n    this.remove(strOld);\r\n    this.insert(strNew);\r\n  },\r\n\r\n  /*\r\n    * Count the number of times a given word has been inserted into the dictionary\r\n    *\r\n    * @method countWord\r\n    * @param {String} str Word to get count of\r\n    * @param {Integer} pos Current index of the given word\r\n    * @return {Integer} The number of times a given word exists in the dictionary\r\n    */\r\n  countWord: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return 0;\r\n    }\r\n\r\n    var T = this, k, child, ret = 0;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      return T.words;\r\n    }\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    if (child !== undefined) {\r\n      //node exists\r\n      ret = child.countWord(str, pos + 1);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Count the number of times a given prefix exists in the dictionary\r\n    *\r\n    * @method countPrefix\r\n    * @param {String} str Prefix to get count of\r\n    * @param {Integer} pos Current index of the given prefix\r\n    * @return {Integer} The number of times a given prefix exists in the dictionary\r\n    */\r\n  countPrefix: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return 0;\r\n    }\r\n\r\n    var T = this, k, child, ret = 0;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      return T.prefixes;\r\n    }\r\n    var k = str[pos];\r\n    child = T.children[k];\r\n    if (child !== undefined) {\r\n      //node exists\r\n      ret = child.countPrefix(str, pos + 1);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Find a word in the dictionary\r\n    *\r\n    * @method find\r\n    * @param {String} str The word to find in the dictionary\r\n    * @return {Boolean} True if the word exists in the dictionary, else false\r\n    */\r\n  find: function(str) {\r\n    if (str.length == 0) {\r\n      return false;\r\n    }\r\n\r\n    if (this.countWord(str) > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /*\r\n    * Get all words in the dictionary\r\n    *\r\n    * @method getAllWords\r\n    * @param {String} str Prefix of current word\r\n    * @return {Array} Array of words in the dictionary\r\n    */\r\n  getAllWords: function(str) {\r\n    var T = this, k, child, ret = [];\r\n    if (str === undefined) {\r\n      str = \"\";\r\n    }\r\n    if (T === undefined) {\r\n      return [];\r\n    }\r\n    if (T.words > 0) {\r\n      ret.push(str);\r\n    }\r\n    for (k in T.children) {\r\n      if (T.children.hasOwnProperty(k)) {\r\n        child = T.children[k];\r\n        ret = ret.concat(child.getAllWords(str + k));\r\n      }\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Autocomplete a given prefix\r\n    *\r\n    * @method autoComplete\r\n    * @param {String} str Prefix to be completed based on dictionary entries\r\n    * @param {Integer} pos Current index of the prefix\r\n    * @return {Array} Array of possible suggestions\r\n    */\r\n  autoComplete: function(str, pos) {\r\n    var T = this, k, child;\r\n    if (str.length == 0) {\r\n      if (pos === undefined) {\r\n        return T.getAllWords(str);\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    if (child === undefined) {\r\n      //node doesn't exist\r\n      return [];\r\n    }\r\n    if (pos === str.length - 1) {\r\n      return child.getAllWords(str);\r\n    }\r\n    return child.autoComplete(str, pos + 1);\r\n  }\r\n};\r\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n",
    "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n",
    "var engine = require('../src/store-engine')\n\nvar storages = require('../storages/all')\nvar plugins = [require('../plugins/json2')]\n\nmodule.exports = engine.createStore(storages, plugins)\n",
    "module.exports = json2Plugin\n\nfunction json2Plugin() {\n\trequire('./lib/json2')\n\treturn {}\n}\n",
    "/* eslint-disable */\n\n//  json2.js\n//  2016-10-28\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n//  See http://www.JSON.org/js.html\n//  This code should be minified before deployment.\n//  See http://javascript.crockford.com/jsmin.html\n\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n\n//          For example, this would serialize Dates as ISO strings.\n\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n\n//          JSON.stringify(undefined) returns undefined.\n\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n\n//          Example:\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n\n//          Example:\n\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n//                          +a[5], +a[6]));\n//                  }\n//              }\n//              return value;\n//          });\n\n//          myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n//              var d;\n//              if (typeof value === \"string\" &&\n//                      value.slice(0, 5) === \"Date(\" &&\n//                      value.slice(-1) === \")\") {\n//                  d = new Date(value.slice(5, -1));\n//                  if (d) {\n//                      return d;\n//                  }\n//              }\n//              return value;\n//          });\n\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\n    eval, for, this\n*/\n\n/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== \"object\") {\n    JSON = {};\n}\n\n(function () {\n    \"use strict\";\n\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10\n            ? \"0\" + n\n            : n;\n    }\n\n    function this_value() {\n        return this.valueOf();\n    }\n\n    if (typeof Date.prototype.toJSON !== \"function\") {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear() + \"-\" +\n                        f(this.getUTCMonth() + 1) + \"-\" +\n                        f(this.getUTCDate()) + \"T\" +\n                        f(this.getUTCHours()) + \":\" +\n                        f(this.getUTCMinutes()) + \":\" +\n                        f(this.getUTCSeconds()) + \"Z\"\n                : null;\n        };\n\n        Boolean.prototype.toJSON = this_value;\n        Number.prototype.toJSON = this_value;\n        String.prototype.toJSON = this_value;\n    }\n\n    var gap;\n    var indent;\n    var meta;\n    var rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        rx_escapable.lastIndex = 0;\n        return rx_escapable.test(string)\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n                var c = meta[a];\n                return typeof c === \"string\"\n                    ? c\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + \"\\\"\"\n            : \"\\\"\" + string + \"\\\"\";\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i;          // The loop counter.\n        var k;          // The member key.\n        var v;          // The member value.\n        var length;\n        var mind = gap;\n        var partial;\n        var value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === \"object\" &&\n                typeof value.toJSON === \"function\") {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === \"function\") {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case \"string\":\n            return quote(value);\n\n        case \"number\":\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value)\n                ? String(value)\n                : \"null\";\n\n        case \"boolean\":\n        case \"null\":\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce \"null\". The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is \"object\", we might be dealing with an object or an array or\n// null.\n\n        case \"object\":\n\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\n// so watch out for that case.\n\n            if (!value) {\n                return \"null\";\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || \"null\";\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? \"[]\"\n                    : gap\n                        ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\"\n                        : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === \"string\") {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? \"{}\"\n                : gap\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\n                    : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== \"function\") {\n        meta = {    // table of character substitutions\n            \"\\b\": \"\\\\b\",\n            \"\\t\": \"\\\\t\",\n            \"\\n\": \"\\\\n\",\n            \"\\f\": \"\\\\f\",\n            \"\\r\": \"\\\\r\",\n            \"\\\"\": \"\\\\\\\"\",\n            \"\\\\\": \"\\\\\\\\\"\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = \"\";\n            indent = \"\";\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === \"number\") {\n                for (i = 0; i < space; i += 1) {\n                    indent += \" \";\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \"string\") {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \"function\" &&\n                    (typeof replacer !== \"object\" ||\n                    typeof replacer.length !== \"number\")) {\n                throw new Error(\"JSON.stringify\");\n            }\n\n// Make a fake root object containing our value under the key of \"\".\n// Return the result of stringifying the value.\n\n            return str(\"\", {\"\": value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== \"function\") {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k;\n                var v;\n                var value = holder[key];\n                if (value && typeof value === \"object\") {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            rx_dangerous.lastIndex = 0;\n            if (rx_dangerous.test(text)) {\n                text = text.replace(rx_dangerous, function (a) {\n                    return \"\\\\u\" +\n                            (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n// because they can cause invocation, and \"=\" because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n            if (\n                rx_one.test(\n                    text\n                        .replace(rx_two, \"@\")\n                        .replace(rx_three, \"]\")\n                        .replace(rx_four, \"\")\n                )\n            ) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval(\"(\" + text + \")\");\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return (typeof reviver === \"function\")\n                    ? walk({\"\": j}, \"\")\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\"JSON.parse\");\n        };\n    }\n}());",
    "var util = require('./util')\nvar slice = util.slice\nvar pluck = util.pluck\nvar each = util.each\nvar bind = util.bind\nvar create = util.create\nvar isList = util.isList\nvar isFunction = util.isFunction\nvar isObject = util.isObject\n\nmodule.exports = {\n\tcreateStore: createStore\n}\n\nvar storeAPI = {\n\tversion: '2.0.12',\n\tenabled: false,\n\t\n\t// get returns the value of the given key. If that value\n\t// is undefined, it returns optionalDefaultValue instead.\n\tget: function(key, optionalDefaultValue) {\n\t\tvar data = this.storage.read(this._namespacePrefix + key)\n\t\treturn this._deserialize(data, optionalDefaultValue)\n\t},\n\n\t// set will store the given value at key and returns value.\n\t// Calling set with value === undefined is equivalent to calling remove.\n\tset: function(key, value) {\n\t\tif (value === undefined) {\n\t\t\treturn this.remove(key)\n\t\t}\n\t\tthis.storage.write(this._namespacePrefix + key, this._serialize(value))\n\t\treturn value\n\t},\n\n\t// remove deletes the key and value stored at the given key.\n\tremove: function(key) {\n\t\tthis.storage.remove(this._namespacePrefix + key)\n\t},\n\n\t// each will call the given callback once for each key-value pair\n\t// in this store.\n\teach: function(callback) {\n\t\tvar self = this\n\t\tthis.storage.each(function(val, namespacedKey) {\n\t\t\tcallback.call(self, self._deserialize(val), (namespacedKey || '').replace(self._namespaceRegexp, ''))\n\t\t})\n\t},\n\n\t// clearAll will remove all the stored key-value pairs in this store.\n\tclearAll: function() {\n\t\tthis.storage.clearAll()\n\t},\n\n\t// additional functionality that can't live in plugins\n\t// ---------------------------------------------------\n\n\t// hasNamespace returns true if this store instance has the given namespace.\n\thasNamespace: function(namespace) {\n\t\treturn (this._namespacePrefix == '__storejs_'+namespace+'_')\n\t},\n\n\t// createStore creates a store.js instance with the first\n\t// functioning storage in the list of storage candidates,\n\t// and applies the the given mixins to the instance.\n\tcreateStore: function() {\n\t\treturn createStore.apply(this, arguments)\n\t},\n\t\n\taddPlugin: function(plugin) {\n\t\tthis._addPlugin(plugin)\n\t},\n\t\n\tnamespace: function(namespace) {\n\t\treturn createStore(this.storage, this.plugins, namespace)\n\t}\n}\n\nfunction _warn() {\n\tvar _console = (typeof console == 'undefined' ? null : console)\n\tif (!_console) { return }\n\tvar fn = (_console.warn ? _console.warn : _console.log)\n\tfn.apply(_console, arguments)\n}\n\nfunction createStore(storages, plugins, namespace) {\n\tif (!namespace) {\n\t\tnamespace = ''\n\t}\n\tif (storages && !isList(storages)) {\n\t\tstorages = [storages]\n\t}\n\tif (plugins && !isList(plugins)) {\n\t\tplugins = [plugins]\n\t}\n\n\tvar namespacePrefix = (namespace ? '__storejs_'+namespace+'_' : '')\n\tvar namespaceRegexp = (namespace ? new RegExp('^'+namespacePrefix) : null)\n\tvar legalNamespaces = /^[a-zA-Z0-9_\\-]*$/ // alpha-numeric + underscore and dash\n\tif (!legalNamespaces.test(namespace)) {\n\t\tthrow new Error('store.js namespaces can only have alphanumerics + underscores and dashes')\n\t}\n\t\n\tvar _privateStoreProps = {\n\t\t_namespacePrefix: namespacePrefix,\n\t\t_namespaceRegexp: namespaceRegexp,\n\n\t\t_testStorage: function(storage) {\n\t\t\ttry {\n\t\t\t\tvar testStr = '__storejs__test__'\n\t\t\t\tstorage.write(testStr, testStr)\n\t\t\t\tvar ok = (storage.read(testStr) === testStr)\n\t\t\t\tstorage.remove(testStr)\n\t\t\t\treturn ok\n\t\t\t} catch(e) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t},\n\n\t\t_assignPluginFnProp: function(pluginFnProp, propName) {\n\t\t\tvar oldFn = this[propName]\n\t\t\tthis[propName] = function pluginFn() {\n\t\t\t\tvar args = slice(arguments, 0)\n\t\t\t\tvar self = this\n\n\t\t\t\t// super_fn calls the old function which was overwritten by\n\t\t\t\t// this mixin.\n\t\t\t\tfunction super_fn() {\n\t\t\t\t\tif (!oldFn) { return }\n\t\t\t\t\teach(arguments, function(arg, i) {\n\t\t\t\t\t\targs[i] = arg\n\t\t\t\t\t})\n\t\t\t\t\treturn oldFn.apply(self, args)\n\t\t\t\t}\n\n\t\t\t\t// Give mixing function access to super_fn by prefixing all mixin function\n\t\t\t\t// arguments with super_fn.\n\t\t\t\tvar newFnArgs = [super_fn].concat(args)\n\n\t\t\t\treturn pluginFnProp.apply(self, newFnArgs)\n\t\t\t}\n\t\t},\n\n\t\t_serialize: function(obj) {\n\t\t\treturn JSON.stringify(obj)\n\t\t},\n\n\t\t_deserialize: function(strVal, defaultVal) {\n\t\t\tif (!strVal) { return defaultVal }\n\t\t\t// It is possible that a raw string value has been previously stored\n\t\t\t// in a storage without using store.js, meaning it will be a raw\n\t\t\t// string value instead of a JSON serialized string. By defaulting\n\t\t\t// to the raw string value in case of a JSON parse error, we allow\n\t\t\t// for past stored values to be forwards-compatible with store.js\n\t\t\tvar val = ''\n\t\t\ttry { val = JSON.parse(strVal) }\n\t\t\tcatch(e) { val = strVal }\n\n\t\t\treturn (val !== undefined ? val : defaultVal)\n\t\t},\n\t\t\n\t\t_addStorage: function(storage) {\n\t\t\tif (this.enabled) { return }\n\t\t\tif (this._testStorage(storage)) {\n\t\t\t\tthis.storage = storage\n\t\t\t\tthis.enabled = true\n\t\t\t}\n\t\t},\n\n\t\t_addPlugin: function(plugin) {\n\t\t\tvar self = this\n\n\t\t\t// If the plugin is an array, then add all plugins in the array.\n\t\t\t// This allows for a plugin to depend on other plugins.\n\t\t\tif (isList(plugin)) {\n\t\t\t\teach(plugin, function(plugin) {\n\t\t\t\t\tself._addPlugin(plugin)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Keep track of all plugins we've seen so far, so that we\n\t\t\t// don't add any of them twice.\n\t\t\tvar seenPlugin = pluck(this.plugins, function(seenPlugin) {\n\t\t\t\treturn (plugin === seenPlugin)\n\t\t\t})\n\t\t\tif (seenPlugin) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.plugins.push(plugin)\n\n\t\t\t// Check that the plugin is properly formed\n\t\t\tif (!isFunction(plugin)) {\n\t\t\t\tthrow new Error('Plugins must be function values that return objects')\n\t\t\t}\n\n\t\t\tvar pluginProperties = plugin.call(this)\n\t\t\tif (!isObject(pluginProperties)) {\n\t\t\t\tthrow new Error('Plugins must return an object of function properties')\n\t\t\t}\n\n\t\t\t// Add the plugin function properties to this store instance.\n\t\t\teach(pluginProperties, function(pluginFnProp, propName) {\n\t\t\t\tif (!isFunction(pluginFnProp)) {\n\t\t\t\t\tthrow new Error('Bad plugin property: '+propName+' from plugin '+plugin.name+'. Plugins should only return functions.')\n\t\t\t\t}\n\t\t\t\tself._assignPluginFnProp(pluginFnProp, propName)\n\t\t\t})\n\t\t},\n\t\t\n\t\t// Put deprecated properties in the private API, so as to not expose it to accidential\n\t\t// discovery through inspection of the store object.\n\t\t\n\t\t// Deprecated: addStorage\n\t\taddStorage: function(storage) {\n\t\t\t_warn('store.addStorage(storage) is deprecated. Use createStore([storages])')\n\t\t\tthis._addStorage(storage)\n\t\t}\n\t}\n\n\tvar store = create(_privateStoreProps, storeAPI, {\n\t\tplugins: []\n\t})\n\tstore.raw = {}\n\teach(store, function(prop, propName) {\n\t\tif (isFunction(prop)) {\n\t\t\tstore.raw[propName] = bind(store, prop)\t\t\t\n\t\t}\n\t})\n\teach(storages, function(storage) {\n\t\tstore._addStorage(storage)\n\t})\n\teach(plugins, function(plugin) {\n\t\tstore._addPlugin(plugin)\n\t})\n\treturn store\n}\n",
    "var assign = make_assign()\nvar create = make_create()\nvar trim = make_trim()\nvar Global = (typeof window !== 'undefined' ? window : global)\n\nmodule.exports = {\n\tassign: assign,\n\tcreate: create,\n\ttrim: trim,\n\tbind: bind,\n\tslice: slice,\n\teach: each,\n\tmap: map,\n\tpluck: pluck,\n\tisList: isList,\n\tisFunction: isFunction,\n\tisObject: isObject,\n\tGlobal: Global\n}\n\nfunction make_assign() {\n\tif (Object.assign) {\n\t\treturn Object.assign\n\t} else {\n\t\treturn function shimAssign(obj, props1, props2, etc) {\n\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\teach(Object(arguments[i]), function(val, key) {\n\t\t\t\t\tobj[key] = val\n\t\t\t\t})\n\t\t\t}\t\t\t\n\t\t\treturn obj\n\t\t}\n\t}\n}\n\nfunction make_create() {\n\tif (Object.create) {\n\t\treturn function create(obj, assignProps1, assignProps2, etc) {\n\t\t\tvar assignArgsList = slice(arguments, 1)\n\t\t\treturn assign.apply(this, [Object.create(obj)].concat(assignArgsList))\n\t\t}\n\t} else {\n\t\tfunction F() {} // eslint-disable-line no-inner-declarations\n\t\treturn function create(obj, assignProps1, assignProps2, etc) {\n\t\t\tvar assignArgsList = slice(arguments, 1)\n\t\t\tF.prototype = obj\n\t\t\treturn assign.apply(this, [new F()].concat(assignArgsList))\n\t\t}\n\t}\n}\n\nfunction make_trim() {\n\tif (String.prototype.trim) {\n\t\treturn function trim(str) {\n\t\t\treturn String.prototype.trim.call(str)\n\t\t}\n\t} else {\n\t\treturn function trim(str) {\n\t\t\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')\n\t\t}\n\t}\n}\n\nfunction bind(obj, fn) {\n\treturn function() {\n\t\treturn fn.apply(obj, Array.prototype.slice.call(arguments, 0))\n\t}\n}\n\nfunction slice(arr, index) {\n\treturn Array.prototype.slice.call(arr, index || 0)\n}\n\nfunction each(obj, fn) {\n\tpluck(obj, function(val, key) {\n\t\tfn(val, key)\n\t\treturn false\n\t})\n}\n\nfunction map(obj, fn) {\n\tvar res = (isList(obj) ? [] : {})\n\tpluck(obj, function(v, k) {\n\t\tres[k] = fn(v, k)\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunction pluck(obj, fn) {\n\tif (isList(obj)) {\n\t\tfor (var i=0; i<obj.length; i++) {\n\t\t\tif (fn(obj[i], i)) {\n\t\t\t\treturn obj[i]\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (var key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\tif (fn(obj[key], key)) {\n\t\t\t\t\treturn obj[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction isList(val) {\n\treturn (val != null && typeof val != 'function' && typeof val.length == 'number')\n}\n\nfunction isFunction(val) {\n\treturn val && {}.toString.call(val) === '[object Function]'\n}\n\nfunction isObject(val) {\n\treturn val && {}.toString.call(val) === '[object Object]'\n}\n",
    "module.exports = [\n\t// Listed in order of usage preference\n\trequire('./localStorage'),\n\trequire('./oldFF-globalStorage'),\n\trequire('./oldIE-userDataStorage'),\n\trequire('./cookieStorage'),\n\trequire('./sessionStorage'),\n\trequire('./memoryStorage')\n]\n",
    "// cookieStorage is useful Safari private browser mode, where localStorage\n// doesn't work but cookies do. This implementation is adopted from\n// https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage\n\nvar util = require('../src/util')\nvar Global = util.Global\nvar trim = util.trim\n\nmodule.exports = {\n\tname: 'cookieStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar doc = Global.document\n\nfunction read(key) {\n\tif (!key || !_has(key)) { return null }\n\tvar regexpStr = \"(?:^|.*;\\\\s*)\" +\n\t\tescape(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n\t\t\"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"\n\treturn unescape(doc.cookie.replace(new RegExp(regexpStr), \"$1\"))\n}\n\nfunction each(callback) {\n\tvar cookies = doc.cookie.split(/; ?/g)\n\tfor (var i = cookies.length - 1; i >= 0; i--) {\n\t\tif (!trim(cookies[i])) {\n\t\t\tcontinue\n\t\t}\n\t\tvar kvp = cookies[i].split('=')\n\t\tvar key = unescape(kvp[0])\n\t\tvar val = unescape(kvp[1])\n\t\tcallback(val, key)\n\t}\n}\n\nfunction write(key, data) {\n\tif(!key) { return }\n\tdoc.cookie = escape(key) + \"=\" + escape(data) + \"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/\"\n}\n\nfunction remove(key) {\n\tif (!key || !_has(key)) {\n\t\treturn\n\t}\n\tdoc.cookie = escape(key) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\"\n}\n\nfunction clearAll() {\n\teach(function(_, key) {\n\t\tremove(key)\n\t})\n}\n\nfunction _has(key) {\n\treturn (new RegExp(\"(?:^|;\\\\s*)\" + escape(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(doc.cookie)\n}\n",
    "var util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'localStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nfunction localStorage() {\n\treturn Global.localStorage\n}\n\nfunction read(key) {\n\treturn localStorage().getItem(key)\n}\n\nfunction write(key, data) {\n\treturn localStorage().setItem(key, data)\n}\n\nfunction each(fn) {\n\tfor (var i = localStorage().length - 1; i >= 0; i--) {\n\t\tvar key = localStorage().key(i)\n\t\tfn(read(key), key)\n\t}\n}\n\nfunction remove(key) {\n\treturn localStorage().removeItem(key)\n}\n\nfunction clearAll() {\n\treturn localStorage().clear()\n}\n",
    "// memoryStorage is a useful last fallback to ensure that the store\n// is functions (meaning store.get(), store.set(), etc will all function).\n// However, stored values will not persist when the browser navigates to\n// a new page or reloads the current page.\n\nmodule.exports = {\n\tname: 'memoryStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar memoryStorage = {}\n\nfunction read(key) {\n\treturn memoryStorage[key]\n}\n\nfunction write(key, data) {\n\tmemoryStorage[key] = data\n}\n\nfunction each(callback) {\n\tfor (var key in memoryStorage) {\n\t\tif (memoryStorage.hasOwnProperty(key)) {\n\t\t\tcallback(memoryStorage[key], key)\n\t\t}\n\t}\n}\n\nfunction remove(key) {\n\tdelete memoryStorage[key]\n}\n\nfunction clearAll(key) {\n\tmemoryStorage = {}\n}\n",
    "// oldFF-globalStorage provides storage for Firefox\n// versions 6 and 7, where no localStorage, etc\n// is available.\n\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'oldFF-globalStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar globalStorage = Global.globalStorage\n\nfunction read(key) {\n\treturn globalStorage[key]\n}\n\nfunction write(key, data) {\n\tglobalStorage[key] = data\n}\n\nfunction each(fn) {\n\tfor (var i = globalStorage.length - 1; i >= 0; i--) {\n\t\tvar key = globalStorage.key(i)\n\t\tfn(globalStorage[key], key)\n\t}\n}\n\nfunction remove(key) {\n\treturn globalStorage.removeItem(key)\n}\n\nfunction clearAll() {\n\teach(function(key, _) {\n\t\tdelete globalStorage[key]\n\t})\n}\n",
    "// oldIE-userDataStorage provides storage for Internet Explorer\n// versions 6 and 7, where no localStorage, sessionStorage, etc\n// is available.\n\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'oldIE-userDataStorage',\n\twrite: write,\n\tread: read,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar storageName = 'storejs'\nvar doc = Global.document\nvar _withStorageEl = _makeIEStorageElFunction()\nvar disable = (Global.navigator ? Global.navigator.userAgent : '').match(/ (MSIE 8|MSIE 9|MSIE 10)\\./) // MSIE 9.x, MSIE 10.x\n\nfunction write(unfixedKey, data) {\n\tif (disable) { return }\n\tvar fixedKey = fixKey(unfixedKey)\n\t_withStorageEl(function(storageEl) {\n\t\tstorageEl.setAttribute(fixedKey, data)\n\t\tstorageEl.save(storageName)\n\t})\n}\n\nfunction read(unfixedKey) {\n\tif (disable) { return }\n\tvar fixedKey = fixKey(unfixedKey)\n\tvar res = null\n\t_withStorageEl(function(storageEl) {\n\t\tres = storageEl.getAttribute(fixedKey)\n\t})\n\treturn res\n}\n\nfunction each(callback) {\n\t_withStorageEl(function(storageEl) {\n\t\tvar attributes = storageEl.XMLDocument.documentElement.attributes\n\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\tvar attr = attributes[i]\n\t\t\tcallback(storageEl.getAttribute(attr.name), attr.name)\n\t\t}\n\t})\n}\n\nfunction remove(unfixedKey) {\n\tvar fixedKey = fixKey(unfixedKey)\n\t_withStorageEl(function(storageEl) {\n\t\tstorageEl.removeAttribute(fixedKey)\n\t\tstorageEl.save(storageName)\n\t})\n}\n\nfunction clearAll() {\n\t_withStorageEl(function(storageEl) {\n\t\tvar attributes = storageEl.XMLDocument.documentElement.attributes\n\t\tstorageEl.load(storageName)\n\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\tstorageEl.removeAttribute(attributes[i].name)\n\t\t}\n\t\tstorageEl.save(storageName)\n\t})\n}\n\n// Helpers\n//////////\n\n// In IE7, keys cannot start with a digit or contain certain chars.\n// See https://github.com/marcuswestin/store.js/issues/40\n// See https://github.com/marcuswestin/store.js/issues/83\nvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\nfunction fixKey(key) {\n\treturn key.replace(/^\\d/, '___$&').replace(forbiddenCharsRegex, '___')\n}\n\nfunction _makeIEStorageElFunction() {\n\tif (!doc || !doc.documentElement || !doc.documentElement.addBehavior) {\n\t\treturn null\n\t}\n\tvar scriptTag = 'script',\n\t\tstorageOwner,\n\t\tstorageContainer,\n\t\tstorageEl\n\n\t// Since #userData storage applies only to specific paths, we need to\n\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t// as a pretty safe option, since all browsers already make a request to\n\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t// since the iframe access rules appear to allow direct access and\n\t// manipulation of the document element, even for a 404 page.  This\n\t// document can be used instead of the current document (which would\n\t// have been limited to the current path) to perform #userData storage.\n\ttry {\n\t\t/* global ActiveXObject */\n\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\tstorageContainer.open()\n\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\tstorageContainer.close()\n\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\tstorageEl = storageOwner.createElement('div')\n\t} catch(e) {\n\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t// security settings or otherwse), fall back to per-path storage\n\t\tstorageEl = doc.createElement('div')\n\t\tstorageOwner = doc.body\n\t}\n\n\treturn function(storeFunction) {\n\t\tvar args = [].slice.call(arguments, 0)\n\t\targs.unshift(storageEl)\n\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\tstorageOwner.appendChild(storageEl)\n\t\tstorageEl.addBehavior('#default#userData')\n\t\tstorageEl.load(storageName)\n\t\tstoreFunction.apply(this, args)\n\t\tstorageOwner.removeChild(storageEl)\n\t\treturn\n\t}\n}\n",
    "var util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'sessionStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll\n}\n\nfunction sessionStorage() {\n\treturn Global.sessionStorage\n}\n\nfunction read(key) {\n\treturn sessionStorage().getItem(key)\n}\n\nfunction write(key, data) {\n\treturn sessionStorage().setItem(key, data)\n}\n\nfunction each(fn) {\n\tfor (var i = sessionStorage().length - 1; i >= 0; i--) {\n\t\tvar key = sessionStorage().key(i)\n\t\tfn(read(key), key)\n\t}\n}\n\nfunction remove(key) {\n\treturn sessionStorage().removeItem(key)\n}\n\nfunction clearAll() {\n\treturn sessionStorage().clear()\n}\n",
    "module.exports={\n  \"_args\": [\n    [\n      {\n        \"raw\": \"yasgui-utils@^1.6.7\",\n        \"scope\": null,\n        \"escapedName\": \"yasgui-utils\",\n        \"name\": \"yasgui-utils\",\n        \"rawSpec\": \"^1.6.7\",\n        \"spec\": \">=1.6.7 <2.0.0\",\n        \"type\": \"range\"\n      },\n      \"/home/node/app\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.6.7 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.7\",\n  \"_inCache\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_nodeVersion\": \"7.10.0\",\n  \"_npmOperationalInternal\": {\n    \"host\": \"s3://npm-registry-packages\",\n    \"tmp\": \"tmp/yasgui-utils-1.6.7.tgz_1495459781202_0.06725964159704745\"\n  },\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"_npmVersion\": \"4.2.0\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"yasgui-utils@^1.6.7\",\n    \"scope\": null,\n    \"escapedName\": \"yasgui-utils\",\n    \"name\": \"yasgui-utils\",\n    \"rawSpec\": \"^1.6.7\",\n    \"spec\": \">=1.6.7 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.7.tgz\",\n  \"_shasum\": \"2bcfc5a315688de3ae6057883d9ae342b205f267\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.6.7\",\n  \"_where\": \"/home/node/app\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^2.0.4\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"2bcfc5a315688de3ae6057883d9ae342b205f267\",\n    \"tarball\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.7.tgz\"\n  },\n  \"gitHead\": \"6031b1cb732d390b29cd5376dceb9a9d665bbd11\",\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"scripts\": {},\n  \"version\": \"1.6.7\"\n}\n",
    "window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n",
    "var store = require(\"store\");\nvar times = {\n  day: function() {\n    return 1000 * 3600 * 24; //millis to day\n  },\n  month: function() {\n    times.day() * 30;\n  },\n  year: function() {\n    times.month() * 12;\n  }\n};\nfunction isQuotaExceeded(e) {\n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n}\nvar root = (module.exports = {\n  set: function(key, val, exp, onQuotaExceeded) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key && val !== undefined) {\n      if (typeof exp == \"string\") {\n        exp = times[exp]();\n      }\n      //try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n      if (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n      try {\n        store.set(key, {\n          val: val,\n          exp: exp,\n          time: new Date().getTime()\n        });\n      } catch (e) {\n        e.quotaExceeded = isQuotaExceeded(e);\n        if (e.quotaExceeded && onQuotaExceeded) {\n          onQuotaExceeded(e);\n        } else {\n          throw e;\n        }\n      }\n    }\n  },\n  remove: function(key) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key) store.remove(key);\n  },\n  removeAll: function(filter) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (!filter) {\n      store.clearAll();\n    } else if (typeof filter === \"function\") {\n      store.each(function(value, key) {\n        if (filter(key, value)) root.remove(key);\n      });\n    }\n  },\n  get: function(key) {\n    if (!store.enabled) return null; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key) {\n      var info = store.get(key);\n      if (!info) {\n        return null;\n      }\n      if (info.exp && new Date().getTime() - info.time > info.exp) {\n        return null;\n      }\n      return info.val;\n    } else {\n      return null;\n    }\n  }\n});\n",
    "module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};",
    "module.exports={\n  \"name\": \"sparql-generate-editor\",\n  \"description\": \"Editor for SPARQL-Generate queries, forked from YASQE\",\n  \"version\": \"0.9.0\",\n  \"main\": \"src/main.js\",\n  \"license\": \"MIT\",\n  \"author\": \"Maxime Lefrançois\",\n  \"homepage\": \"http://sparql-generate.github.io/sparql-generate-editor\",\n  \"scripts\": {\n    \"dev\": \"gulp serve\",\n    \"build\": \"gulp\",\n    \"patch\": \"gulp patch\",\n    \"minor\": \"gulp minor\",\n    \"major\": \"gulp major\"\n  },\n  \"devDependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"browserify\": \"^13.1.0\",\n    \"browserify-shim\": \"^3.8.12\",\n    \"browserify-transform-tools\": \"^1.6.0\",\n    \"exorcist\": \"^0.4.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-autoprefixer\": \"^3.1.0\",\n    \"gulp-bump\": \"^2.2.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-connect\": \"^4.2.0\",\n    \"gulp-cssimport\": \"^3.1.0\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-filter\": \"^4.0.0\",\n    \"gulp-git\": \"^2.4.1\",\n    \"gulp-jsvalidate\": \"^2.1.0\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-streamify\": \"1.0.2\",\n    \"gulp-tag-version\": \"^1.3.0\",\n    \"gulp-uglify\": \"^1.5.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"require-dir\": \"^0.3.2\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"bugs\": \"https://github.com/sparql-generate/sparql-generate-editor/issues\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL-Generate\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    },\n    {\n      \"name\": \"Maxime Lefrançois\",\n      \"email\": \"maxime.lefrançois@gmail.com\",\n      \"web\": \"http://maxime-lefrancois.info\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/sparql-generate/sparql-generate-editor.git\"\n  },\n  \"dependencies\": {\n    \"codemirror\": \"5.17.0\",\n    \"css\": \"^2.2.1\",\n    \"detect-newline\": \"^2.1.0\",\n    \"jquery\": \"^2.2.4\",\n    \"lazy-debug-legacy\": \"0.0.1\",\n    \"node-sass\": \"^3.8.0\",\n    \"prettier\": \"^1.4.4\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"yasgui-utils\": \"^1.6.7\"\n  },\n  \"optionalShim\": {\n    \"codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    },\n    \"jquery\": {\n      \"require\": \"jquery\",\n      \"global\": \"jQuery\"\n    },\n    \"../../lib/codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    }\n  }\n}\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  utils = require(\"../utils.js\"),\r\n  yutils = require(\"yasgui-utils\"),\r\n  Trie = require(\"../../lib/trie.js\"),\r\n  SGE = require(\"../main.js\");\r\n\r\nmodule.exports = function(SGE, sge) {\r\n  var completionNotifications = {};\r\n  var completers = {};\r\n  var tries = {};\r\n\r\n  sge.on(\"cursorActivity\", function(sge, eventInfo) {\r\n    autoComplete(true);\r\n  });\r\n  sge.on(\"change\", function() {\r\n    var needPossibleAdjustment = [];\r\n    for (var notificationName in completionNotifications) {\r\n      if (completionNotifications[notificationName].is(\":visible\")) {\r\n        needPossibleAdjustment.push(completionNotifications[notificationName]);\r\n      }\r\n    }\r\n    if (needPossibleAdjustment.length > 0) {\r\n      //position completion notifications\r\n      var scrollBar = $(sge.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n      var offset = 0;\r\n      if (scrollBar.is(\":visible\")) {\r\n        offset = scrollBar.outerWidth();\r\n      }\r\n      needPossibleAdjustment.forEach(function(notification) {\r\n        notification.css(\"right\", offset);\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\r\n\t *\r\n\t * @method doc.storeBulkCompletions\r\n\t * @param completions {array}\r\n\t */\r\n  var storeBulkCompletions = function(completer, completions) {\r\n    // store array as trie\r\n    tries[completer.name] = new Trie();\r\n    for (var i = 0; i < completions.length; i++) {\r\n      tries[completer.name].insert(completions[i]);\r\n    }\r\n    // store in localstorage as well\r\n    var storageId = utils.getPersistencyId(sge, completer.persistent);\r\n    if (storageId) yutils.storage.set(storageId, completions, \"month\", sge.options.onQuotaExceeded);\r\n  };\r\n\r\n  var initCompleter = function(name, completionInit) {\r\n    var completer = (completers[name] = new completionInit(sge, name));\r\n    completer.name = name;\r\n    if (completer.bulk) {\r\n      var storeArrayAsBulk = function(suggestions) {\r\n        if (suggestions && suggestions instanceof Array && suggestions.length > 0) {\r\n          storeBulkCompletions(completer, suggestions);\r\n        }\r\n      };\r\n      if (completer.get instanceof Array) {\r\n        // we don't care whether the completions are already stored in\r\n        // localstorage. just use this one\r\n        storeArrayAsBulk(completer.get);\r\n      } else {\r\n        // if completions are defined in localstorage, use those! (calling the\r\n        // function may come with overhead (e.g. async calls))\r\n        var completionsFromStorage = null;\r\n        var persistencyIdentifier = utils.getPersistencyId(sge, completer.persistent);\r\n        if (persistencyIdentifier) completionsFromStorage = yutils.storage.get(persistencyIdentifier);\r\n        if (completionsFromStorage && completionsFromStorage.length > 0) {\r\n          storeArrayAsBulk(completionsFromStorage);\r\n        } else {\r\n          // nothing in storage. check whether we have a function via which we\r\n          // can get our prefixes\r\n          if (completer.get instanceof Function) {\r\n            if (completer.async) {\r\n              completer.get(null, storeArrayAsBulk);\r\n            } else {\r\n              storeArrayAsBulk(completer.get());\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  var autoComplete = function(fromAutoShow) {\r\n    if (sge.somethingSelected()) return;\r\n    var tryHintType = function(completer) {\r\n      if (\r\n        fromAutoShow && // from autoShow, i.e. this gets called each time the editor content changes\r\n        (!completer.autoShow || // autoshow for  this particular type of autocompletion is -not- enabled\r\n          (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      var hintConfig = {\r\n        closeCharacters: /(?=a)b/,\r\n        completeSingle: false\r\n      };\r\n      if (!completer.bulk && completer.async) {\r\n        hintConfig.async = true;\r\n      }\r\n      var wrappedHintCallback = function(sge, callback) {\r\n        return getCompletionHintsObject(completer, callback);\r\n      };\r\n      var result = SGE.showHint(sge, wrappedHintCallback, hintConfig);\r\n      return true;\r\n    };\r\n    for (var completerName in completers) {\r\n      if ($.inArray(completerName, sge.options.autocompleters) == -1) continue; //this completer is disabled\r\n      var completer = completers[completerName];\r\n      if (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\r\n\r\n      if (!completer.isValidCompletionPosition()) {\r\n        //if needed, fire callbacks for when we are -not- in valid completion position\r\n        if (completer.callbacks && completer.callbacks.invalidPosition) {\r\n          completer.callbacks.invalidPosition(sge, completer);\r\n        }\r\n        //not in a valid position, so continue to next completion candidate type\r\n        continue;\r\n      }\r\n      // run valid position handler, if there is one (if it returns false, stop the autocompletion!)\r\n      if (completer.callbacks && completer.callbacks.validPosition) {\r\n        if (completer.callbacks.validPosition(sge, completer) === false) continue;\r\n      }\r\n      var success = tryHintType(completer);\r\n      if (success) break;\r\n    }\r\n  };\r\n\r\n  var getCompletionHintsObject = function(completer, callback) {\r\n    var getSuggestionsFromToken = function(partialToken) {\r\n      var stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\r\n      var suggestions = [];\r\n      if (tries[completer.name]) {\r\n        suggestions = tries[completer.name].autoComplete(stringToAutocomplete);\r\n      } else if (typeof completer.get == \"function\" && completer.async == false) {\r\n        suggestions = completer.get(stringToAutocomplete);\r\n      } else if (typeof completer.get == \"object\") {\r\n        var partialTokenLength = stringToAutocomplete.length;\r\n        for (var i = 0; i < completer.get.length; i++) {\r\n          var completion = completer.get[i];\r\n          if (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\r\n            suggestions.push(completion);\r\n          }\r\n        }\r\n      }\r\n      return getSuggestionsAsHintObject(suggestions, completer, partialToken);\r\n    };\r\n\r\n    var token = sge.getCompleteToken();\r\n    if (completer.preProcessToken) {\r\n      token = completer.preProcessToken(token);\r\n    }\r\n\r\n    if (token) {\r\n      // use custom completionhint function, to avoid reaching a loop when the\r\n      // completionhint is the same as the current token\r\n      // regular behaviour would keep changing the codemirror dom, hence\r\n      // constantly calling this callback\r\n      if (!completer.bulk && completer.async) {\r\n        var wrappedCallback = function(suggestions) {\r\n          callback(getSuggestionsAsHintObject(suggestions, completer, token));\r\n        };\r\n        completer.get(token, wrappedCallback);\r\n      } else {\r\n        return getSuggestionsFromToken(token);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t *  get our array of suggestions (strings) in the codemirror hint format\r\n\t */\r\n  var getSuggestionsAsHintObject = function(suggestions, completer, token) {\r\n    var hintList = [];\r\n    for (var i = 0; i < suggestions.length; i++) {\r\n      var suggestedString = suggestions[i];\r\n      if (completer.postProcessToken) {\r\n        suggestedString = completer.postProcessToken(token, suggestedString);\r\n      }\r\n      hintList.push({\r\n        text: suggestedString,\r\n        displayText: suggestedString,\r\n        hint: selectHint\r\n      });\r\n    }\r\n\r\n    var cur = sge.getCursor();\r\n    var returnObj = {\r\n      completionToken: token.string,\r\n      list: hintList,\r\n      from: {\r\n        line: cur.line,\r\n        ch: token.start\r\n      },\r\n      to: {\r\n        line: cur.line,\r\n        ch: token.end\r\n      }\r\n    };\r\n    //if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\r\n    if (completer.callbacks) {\r\n      for (var callbackName in completer.callbacks) {\r\n        if (completer.callbacks[callbackName]) {\r\n          SGE.on(returnObj, callbackName, completer.callbacks[callbackName]);\r\n        }\r\n      }\r\n    }\r\n    return returnObj;\r\n  };\r\n\r\n  return {\r\n    init: initCompleter,\r\n    completers: completers,\r\n    notifications: {\r\n      getEl: function(completer) {\r\n        return $(completionNotifications[completer.name]);\r\n      },\r\n      show: function(sge, completer) {\r\n        //only draw when the user needs to use a keypress to summon autocompletions\r\n        if (!completer.autoshow) {\r\n          if (!completionNotifications[completer.name])\r\n            completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\r\n          completionNotifications[completer.name]\r\n            .show()\r\n            .text(\"Press CTRL - <spacebar> to autocomplete\")\r\n            .appendTo($(sge.getWrapperElement()));\r\n        }\r\n      },\r\n      hide: function(sge, completer) {\r\n        if (completionNotifications[completer.name]) {\r\n          completionNotifications[completer.name].hide();\r\n        }\r\n      }\r\n    },\r\n    autoComplete: autoComplete,\r\n    getTrie: function(completer) {\r\n      return typeof completer == \"string\" ? tries[completer] : tries[completer.name];\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\r\n */\r\nvar selectHint = function(sge, data, completion) {\r\n  if (completion.text != sge.getTokenAt(sge.getCursor()).string) {\r\n    sge.replaceRange(completion.text, data.from, data.to);\r\n  }\r\n};\r\n\r\n//\r\n//module.exports = {\r\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\r\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n//\tshowCompletionNotification: showCompletionNotification,\r\n//\thideCompletionNotification: hideCompletionNotification,\r\n//\tautoComplete: autoComplete,\r\n//\tautocompleteVariables: autocompleteVariables,\r\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\r\n//\tfetchFromLov: fetchFromLov,\r\n////\tstoreBulkCompletions: storeBulkCompletions,\r\n//\tloadBulkCompletions: loadBulkCompletions,\r\n//};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(sge, name) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(sge);\r\n    },\r\n    get: function(token, callback) {\r\n      return require(\"./utils\").fetchFromLov(sge, this, token, callback);\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preProcessToken(sge, token);\r\n    },\r\n    postProcessToken: function(token, suggestedString) {\r\n      return module.exports.postProcessToken(sge, token, suggestedString);\r\n    },\r\n    async: true,\r\n    bulk: false,\r\n    autoShow: false,\r\n    persistent: name,\r\n    callbacks: {\r\n      validPosition: sge.autocompleters.notifications.show,\r\n      invalidPosition: sge.autocompleters.notifications.hide\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(sge) {\r\n  var token = sge.getCompleteToken();\r\n  if (token.string.indexOf(\"?\") == 0) return false;\r\n  var cur = sge.getCursor();\r\n  var previousToken = sge.getPreviousNonWsToken(cur.line, token);\r\n  if (previousToken.string == \"a\") return true;\r\n  if (previousToken.string == \"rdf:type\") return true;\r\n  if (previousToken.string == \"rdfs:domain\") return true;\r\n  if (previousToken.string == \"rdfs:range\") return true;\r\n  return false;\r\n};\r\nmodule.exports.preProcessToken = function(sge, token) {\r\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(sge, token);\r\n};\r\nmodule.exports.postProcessToken = function(sge, token, suggestedString) {\r\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(sge, token, suggestedString);\r\n};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\r\nvar tokenTypes = {\r\n  \"string-2\": \"prefixed\",\r\n  atom: \"var\"\r\n};\r\n\r\nmodule.exports = function(sge, completerName) {\r\n  //this autocompleter also fires on-change!\r\n  sge.on(\"change\", function() {\r\n    module.exports.appendPrefixIfNeeded(sge, completerName);\r\n  });\r\n\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(sge);\r\n    },\r\n    get: function(token, callback) {\r\n      $.get(module.exports.fetchFrom, function(data) {\r\n        var prefixArray = [];\r\n        for (var prefix in data) {\r\n          if (prefix == \"bif\") continue; // skip this one! see #231\r\n          var completeString = prefix + \": <\" + data[prefix] + \">\";\r\n          prefixArray.push(completeString); // the array we want to store in localstorage\r\n        }\r\n\r\n        prefixArray.sort();\r\n        callback(prefixArray);\r\n      });\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preprocessPrefixTokenForCompletion(sge, token);\r\n    },\r\n    async: true,\r\n    bulk: true,\r\n    autoShow: true,\r\n    persistent: completerName,\r\n    callbacks: {\r\n      pick: function() {\r\n        sge.collapsePrefixes(false);\r\n      }\r\n    }\r\n  };\r\n};\r\nmodule.exports.isValidCompletionPosition = function(sge) {\r\n  var cur = sge.getCursor(), token = sge.getTokenAt(cur);\r\n\r\n  // not at end of line\r\n  if (sge.getLine(cur.line).length > cur.ch) return false;\r\n\r\n  if (token.type != \"ws\") {\r\n    // we want to complete token, e.g. when the prefix starts with an a\r\n    // (treated as a token in itself..)\r\n    // but we to avoid including the PREFIX tag. So when we have just\r\n    // typed a space after the prefix tag, don't get the complete token\r\n    token = sge.getCompleteToken();\r\n  }\r\n\r\n  // we shouldnt be at the uri part the prefix declaration\r\n  // also check whether current token isnt 'a' (that makes codemirror\r\n  // thing a namespace is a possiblecurrent\r\n  if (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1) return false;\r\n\r\n  // First token of line needs to be PREFIX,\r\n  // there should be no trailing text (otherwise, text is wrongly inserted\r\n  // in between)\r\n  var previousToken = sge.getPreviousNonWsToken(cur.line, token);\r\n  if (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\r\n  return true;\r\n};\r\nmodule.exports.preprocessPrefixTokenForCompletion = function(sge, token) {\r\n  var previousToken = sge.getPreviousNonWsToken(sge.getCursor().line, token);\r\n  if (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\r\n    //combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\r\n    //we want the token to be \"bla: <\", en not \"<\"\r\n    token = {\r\n      start: previousToken.start,\r\n      end: token.end,\r\n      string: previousToken.string + \" \" + token.string,\r\n      state: token.state\r\n    };\r\n  }\r\n  return token;\r\n};\r\n/**\r\n * Check whether typed prefix is declared. If not, automatically add declaration\r\n * using list from prefix.cc\r\n *\r\n * @param sge\r\n */\r\nmodule.exports.appendPrefixIfNeeded = function(sge, completerName) {\r\n  if (!sge.autocompleters.getTrie(completerName)) return; // no prefixed defined. just stop\r\n  if (!sge.options.autocompleters || sge.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\r\n  var cur = sge.getCursor();\r\n\r\n  var token = sge.getTokenAt(cur);\r\n  if (tokenTypes[token.type] == \"prefixed\") {\r\n    var colonIndex = token.string.indexOf(\":\");\r\n    if (colonIndex !== -1) {\r\n      // check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\r\n      //\t\t\tvar firstTokenString = sge.getNextNonWsToken(cur.line).string.toUpperCase();\r\n      var lastNonWsTokenString = sge.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\r\n      var previousToken = sge.getTokenAt({\r\n        line: cur.line,\r\n        ch: token.start\r\n      }); // needs to be null (beginning of line), or whitespace\r\n      if (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\r\n        // check whether it isnt defined already (saves us from looping\r\n        // through the array)\r\n        var currentPrefix = token.string.substring(0, colonIndex + 1);\r\n        var queryPrefixes = sge.getPrefixesFromQuery();\r\n        if (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\r\n          // ok, so it isnt added yet!\r\n          var completions = sge.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\r\n          if (completions.length > 0) {\r\n            sge.addPrefixes(completions[0]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports.fetchFrom = (window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\") +\r\n  \"prefix.cc/popular/all.file.json\";\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(sge, name) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(sge);\r\n    },\r\n    get: function(token, callback) {\r\n      return require(\"./utils\").fetchFromLov(sge, this, token, callback);\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preProcessToken(sge, token);\r\n    },\r\n    postProcessToken: function(token, suggestedString) {\r\n      return module.exports.postProcessToken(sge, token, suggestedString);\r\n    },\r\n    async: true,\r\n    bulk: false,\r\n    autoShow: false,\r\n    persistent: name,\r\n    callbacks: {\r\n      validPosition: sge.autocompleters.notifications.show,\r\n      invalidPosition: sge.autocompleters.notifications.hide\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(sge) {\r\n  var token = sge.getCompleteToken();\r\n  if (token.string.length == 0) return false; //we want -something- to autocomplete\r\n  if (token.string.indexOf(\"?\") == 0) return false; // we are typing a var\r\n  if ($.inArray(\"a\", token.state.possibleCurrent) >= 0) return true; // predicate pos\r\n  var cur = sge.getCursor();\r\n  var previousToken = sge.getPreviousNonWsToken(cur.line, token);\r\n  if (previousToken.string == \"rdfs:subPropertyOf\") return true;\r\n\r\n  // hmm, we would like -better- checks here, e.g. checking whether we are\r\n  // in a subject, and whether next item is a rdfs:subpropertyof.\r\n  // difficult though... the grammar we use is unreliable when the query\r\n  // is invalid (i.e. during typing), and often the predicate is not typed\r\n  // yet, when we are busy writing the subject...\r\n  return false;\r\n};\r\nmodule.exports.preProcessToken = function(sge, token) {\r\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(sge, token);\r\n};\r\nmodule.exports.postProcessToken = function(sge, token, suggestedString) {\r\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(sge, token, suggestedString);\r\n};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), yutils = require(\"yasgui-utils\");\r\n/**\r\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\r\n */\r\n\r\n/**\r\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\r\n * Stores additional info such as the used namespace and prefix in the token object\r\n */\r\nvar preprocessResourceTokenForCompletion = function(sge, token) {\r\n  var queryPrefixes = sge.getPrefixesFromQuery();\r\n  if (!token.string.indexOf(\"<\") == 0) {\r\n    token.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\r\n\r\n    if (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\r\n      token.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\r\n    }\r\n  }\r\n\r\n  token.autocompletionString = token.string.trim();\r\n  if (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\r\n    // hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\r\n    for (var prefix in queryPrefixes) {\r\n      if (token.tokenPrefix === prefix + \":\") {\r\n        token.autocompletionString = queryPrefixes[prefix];\r\n        token.autocompletionString += token.string.substring(prefix.length + 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (token.autocompletionString.indexOf(\"<\") == 0)\r\n    token.autocompletionString = token.autocompletionString.substring(1);\r\n  if (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1)\r\n    token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\r\n  return token;\r\n};\r\n\r\nvar postprocessResourceTokenForCompletion = function(sge, token, suggestedString) {\r\n  if (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\r\n    // we need to get the suggested string back to prefixed form\r\n    suggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\r\n  } else {\r\n    // it is a regular uri. add '<' and '>' to string\r\n    suggestedString = \"<\" + suggestedString + \">\";\r\n  }\r\n  return suggestedString;\r\n};\r\n\r\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\r\nvar reqProtocol = window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\";\r\nvar fetchFromLov = function(sge, completer, token, callback) {\r\n  if (!token || !token.string || token.string.trim().length == 0) {\r\n    sge.autocompleters.notifications.getEl(completer).empty().append(\"Nothing to autocomplete yet!\");\r\n    return false;\r\n  }\r\n  var maxResults = 50;\r\n\r\n  var args = {\r\n    q: token.autocompletionString,\r\n    page: 1\r\n  };\r\n  if (completer.name == \"classes\") {\r\n    args.type = \"class\";\r\n  } else {\r\n    args.type = \"property\";\r\n  }\r\n  var results = [];\r\n  var url = \"\";\r\n  var updateUrl = function() {\r\n    url = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\r\n  };\r\n  updateUrl();\r\n  var increasePage = function() {\r\n    args.page++;\r\n    updateUrl();\r\n  };\r\n  var doRequests = function() {\r\n    $.get(url, function(data) {\r\n      for (var i = 0; i < data.results.length; i++) {\r\n        if ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\r\n          results.push(data.results[i].uri[0]);\r\n        } else {\r\n          results.push(data.results[i].uri);\r\n        }\r\n      }\r\n      if (results.length < data.total_results && results.length < maxResults) {\r\n        increasePage();\r\n        doRequests();\r\n      } else {\r\n        //if notification bar is there, show feedback, or close\r\n        if (results.length > 0) {\r\n          sge.autocompleters.notifications.hide(sge, completer);\r\n        } else {\r\n          sge.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\r\n        }\r\n        callback(results);\r\n        // requests done! Don't call this function again\r\n      }\r\n    }).fail(function(jqXHR, textStatus, errorThrown) {\r\n      sge.autocompleters.notifications.getEl(completer).empty().append(\"Failed fetching suggestions..\");\r\n    });\r\n  };\r\n  //if notification bar is there, show a loader\r\n  sge.autocompleters.notifications\r\n    .getEl(completer)\r\n    .empty()\r\n    .append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\r\n    .append($(yutils.svg.getElement(require(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));\r\n  doRequests();\r\n};\r\n\r\nmodule.exports = {\r\n  fetchFromLov: fetchFromLov,\r\n  preprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n  postprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion\r\n};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(sge) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      var token = sge.getTokenAt(sge.getCursor());\r\n      if (token.type != \"ws\") {\r\n        token = sge.getCompleteToken(token);\r\n        if (token && token.string.indexOf(\"?\") == 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    get: function(token) {\r\n      if (token.trim().length == 0) return []; //nothing to autocomplete\r\n      var distinctVars = {};\r\n      //do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\r\n      $(sge.getWrapperElement()).find(\".cm-atom\").each(function() {\r\n        var variable = this.innerHTML;\r\n        if (variable.indexOf(\"?\") == 0) {\r\n          //ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\r\n          var nextEl = $(this).next();\r\n          var nextElClass = nextEl.attr(\"class\");\r\n          if (nextElClass && nextEl.attr(\"class\").indexOf(\"cm-atom\") >= 0) {\r\n            variable += nextEl.text();\r\n          }\r\n\r\n          //skip single questionmarks\r\n          if (variable.length <= 1) return;\r\n\r\n          //it should match our token ofcourse\r\n          if (variable.indexOf(token) !== 0) return;\r\n\r\n          //skip exact matches\r\n          if (variable == token) return;\r\n\r\n          //store in map so we have a unique list\r\n          distinctVars[variable] = true;\r\n        }\r\n      });\r\n      var variables = [];\r\n      for (var variable in distinctVars) {\r\n        variables.push(variable);\r\n      }\r\n      variables.sort();\r\n      return variables;\r\n    },\r\n    async: false,\r\n    bulk: false,\r\n    autoShow: true\r\n  };\r\n};\r\n",
    "var sparql = require(\"./sparql.js\"), $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nvar quote = function(string) {\r\n  return \"'\" + string + \"'\";\r\n};\r\nmodule.exports = {\r\n  createCurlString: function(sge, config) {\r\n    var ajaxConfig = sparql.getAjaxConfig(sge, config);\r\n    var url = ajaxConfig.url;\r\n    if (ajaxConfig.url.indexOf(\"http\") !== 0) {\r\n      //this is either a relative or absolute url, which is not supported by CURL.\r\n      //Add domain, schema, etc etc\r\n      var url = window.location.protocol + \"//\" + window.location.host;\r\n      if (ajaxConfig.url.indexOf(\"/\") === 0) {\r\n        //its an absolute path\r\n        url += ajaxConfig.url;\r\n      } else {\r\n        //relative, so append current location to url first\r\n        url += window.location.pathname + ajaxConfig.url;\r\n      }\r\n    }\r\n    var cmds = [\"curl\", url, \"-X\", sge.options.sparql.requestMethod];\r\n    if (sge.options.sparql.requestMethod == \"POST\") {\r\n      cmds.push(\"--data \" + quote($.param(ajaxConfig.data)));\r\n    }\r\n    for (var header in ajaxConfig.headers) {\r\n      cmds.push(\"-H \" + quote(header + \": \" + ajaxConfig.headers[header]));\r\n    }\r\n    return cmds.join(\" \");\r\n  }\r\n};\r\n",
    "/**\r\n * The default options of SGE (check the CodeMirror documentation for even\r\n * more options, such as disabling line numbers, or changing keyboard shortcut\r\n * keys). Either change the default options by setting SGE.defaults, or by\r\n * passing your own options as second argument to the SGE constructor\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), SGE = require(\"./main.js\");\r\nSGE.defaults = $.extend(true, {}, SGE.defaults, {\r\n  mode: \"sparql11\",\r\n  /**\r\n\t * Query string\r\n\t */\r\n  value: \"PREFIX iter: <http://w3id.org/sparql-generate/iter/>\\nPREFIX fun: <http://w3id.org/sparql-generate/fn/>\\nPREFIX ex: <http://example.org/>\\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\\n\\nSOURCE <venue.json> AS ?source\\nITERATOR iter:JSONPath(?source, '$.*' ) AS ?venue\\nWHERE {} \\nLIMIT 10\\nCONSTRUCT { \\n  <http://loc.example.com/city/{ fun:JSONPath(?venue, '$.location.city' ) }> a ex:City ;\\n     geo:lat  ?{ fun:JSONPath(?venue, '$.venue.latitude' ) } ;\\n     geo:long ?{ fun:JSONPath(?venue, '$.venue.longitude' ) } ;\\n     ex:countryCode 'The country code is { fun:JSONPath(?venue, '$.location.country' ) }'@en .\\n}\\n\",\r\n  highlightSelectionMatches: {\r\n    showToken: /\\w/\r\n  },\r\n  tabMode: \"indent\",\r\n  lineNumbers: true,\r\n  lineWrapping: true,\r\n  backdrop: false,\r\n  foldGutter: {\r\n    rangeFinder: new SGE.fold.combine(SGE.fold.brace, SGE.fold.prefix)\r\n  },\r\n  collapsePrefixesOnLoad: false,\r\n  gutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n  matchBrackets: true,\r\n  fixedGutter: true,\r\n  syntaxErrorCheck: true,\r\n  onQuotaExceeded: function(e) {\r\n    //fail silently\r\n    console.warn(\"Could not store in localstorage. Skipping..\", e);\r\n  },\r\n  /**\r\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\r\n\t *\r\n\t * @property extraKeys\r\n\t * @type object\r\n\t */\r\n  extraKeys: {\r\n    //\t\t\t\t\t\"Ctrl-Space\" : function(sge) {\r\n    //\t\t\t\t\t\tSGE.autoComplete(sge);\r\n    //\t\t\t\t\t},\r\n    \"Ctrl-Space\": SGE.autoComplete,\r\n\r\n    \"Cmd-Space\": SGE.autoComplete,\r\n    \"Ctrl-D\": SGE.deleteLine,\r\n    \"Ctrl-K\": SGE.deleteLine,\r\n    \"Shift-Ctrl-K\": SGE.deleteLine,\r\n    \"Cmd-D\": SGE.deleteLine,\r\n    \"Cmd-K\": SGE.deleteLine,\r\n    \"Ctrl-/\": SGE.commentLines,\r\n    \"Cmd-/\": SGE.commentLines,\r\n    \"Ctrl-Alt-Down\": SGE.copyLineDown,\r\n    \"Ctrl-Alt-Up\": SGE.copyLineUp,\r\n    \"Cmd-Alt-Down\": SGE.copyLineDown,\r\n    \"Cmd-Alt-Up\": SGE.copyLineUp,\r\n    \"Shift-Ctrl-F\": SGE.doAutoFormat,\r\n    \"Shift-Cmd-F\": SGE.doAutoFormat,\r\n    \"Ctrl-]\": SGE.indentMore,\r\n    \"Cmd-]\": SGE.indentMore,\r\n    \"Ctrl-[\": SGE.indentLess,\r\n    \"Cmd-[\": SGE.indentLess,\r\n    \"Ctrl-S\": SGE.storeQuery,\r\n    \"Cmd-S\": SGE.storeQuery,\r\n    \"Ctrl-Enter\": SGE.executeQuery,\r\n    \"Cmd-Enter\": SGE.executeQuery,\r\n    F11: function(sge) {\r\n      sge.setOption(\"fullScreen\", !sge.getOption(\"fullScreen\"));\r\n    },\r\n    Esc: function(sge) {\r\n      if (sge.getOption(\"fullScreen\")) sge.setOption(\"fullScreen\", false);\r\n    }\r\n  },\r\n  cursorHeight: 0.9,\r\n\r\n  /**\r\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\r\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\r\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\r\n\t */\r\n  createShareLink: SGE.createShareLink,\r\n\r\n  createShortLink: null,\r\n\r\n  /**\r\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\r\n\t */\r\n  consumeShareLink: SGE.consumeShareLink,\r\n\r\n  /**\r\n\t * Change persistency settings for the SGE query value. Setting the values\r\n\t * to null, will disable persistancy: nothing is stored between browser\r\n\t * sessions Setting the values to a string (or a function which returns a\r\n\t * string), will store the query in localstorage using the specified string.\r\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple SGE items on one\r\n\t * page\r\n\t *\r\n\t * @type function|string\r\n\t */\r\n  persistent: function(sge) {\r\n    return \"yasqe_\" + $(sge.getWrapperElement()).closest(\"[id]\").attr(\"id\") + \"_queryVal\";\r\n  },\r\n\r\n  /**\r\n\t * Settings for querying sparql endpoints\r\n\t */\r\n  sparql: {\r\n    queryName: function(sge) {\r\n      return sge.getQueryMode();\r\n    },\r\n    showQueryButton: false,\r\n\r\n    /**f\r\n\t\t * Endpoint to query\r\n\t\t *\r\n\t\t * @property sparql.endpoint\r\n\t\t * @type String|function\r\n\t\t */\r\n    endpoint: \"http://dbpedia.org/sparql\",\r\n    /**\r\n\t\t * Request method via which to access SPARQL endpoint\r\n\t\t *\r\n\t\t * @property sparql.requestMethod\r\n\t\t * @type String|function\r\n\t\t */\r\n    requestMethod: \"POST\",\r\n\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\r\n\r\n    /**\r\n\t\t * Named graphs to query.\r\n\t\t */\r\n    namedGraphs: [],\r\n    /**\r\n\t\t * Default graphs to query.\r\n\t\t */\r\n    defaultGraphs: [],\r\n\r\n    /**\r\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\r\n\t\t */\r\n    args: [],\r\n\r\n    /**\r\n\t\t * Additional request headers\r\n\t\t */\r\n    headers: {},\r\n\r\n    getQueryForAjax: null,\r\n    /**\r\n\t\t * Set of ajax callbacks\r\n\t\t */\r\n    callbacks: {\r\n      beforeSend: null,\r\n      complete: null,\r\n      error: null,\r\n      success: null\r\n    },\r\n    handlers: {} //keep here for backwards compatability\r\n  }\r\n});\r\n",
    "//this is the entry-point for browserify.\r\n//the current browserify version does not support require-ing js files which are used as entry-point\r\n//this way, we can still require our main.js file\r\nmodule.exports = require(\"./main.js\");\r\n",
    "\"use strict\";\r\nmodule.exports = {\r\n  query: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"><path d=\"M64.622 2.41H14.995c-6.627 0-12 5.374-12 12V64.31c0 6.627 5.373 12 12 12h49.627c6.627 0 12-5.373 12-12V14.41c0-6.627-5.373-12-12-12zM24.125 63.907V15.093L61 39.168 24.125 63.906z\"/></svg>',\r\n  queryInvalid: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 73.627 73.897\"><path d=\"M61.627 0H12C5.373 0 0 5.373 0 12v49.897c0 6.627 5.373 12 12 12h49.627c6.627 0 12-5.373 12-12V12c0-6.628-5.373-12-12-12zM21.13 61.495V12.682l36.875 24.075L21.13 61.495z\"/><path d=\"M66.13 65.904H49.77c-1.647 0-2.89-.58-3.5-1.636-.608-1.056-.49-2.422.334-3.848l8.18-14.167c.822-1.427 1.947-2.212 3.165-2.212s2.342.786 3.165 2.213l8.18 14.167c.824 1.426.942 2.792.333 3.848-.61 1.055-1.852 1.636-3.5 1.636zm-6.51-4.986c0-.85-.69-1.54-1.54-1.54-.85 0-1.54.69-1.54 1.54 0 .85.69 1.54 1.54 1.54.85 0 1.54-.69 1.54-1.54zm.04-9.266c0-.873-.708-1.58-1.58-1.58-.874 0-1.582.707-1.582 1.58l.374 5.61h.005c.054.62.568 1.108 1.202 1.108.586 0 1.075-.415 1.188-.968.01-.045.01-.093.014-.14h.01l.368-5.61z\" fill=\"#a80\"/></svg>',\r\n  download: '<svg xmlns=\"http://www.w3.org/2000/svg\" baseProfile=\"tiny\" viewBox=\"0 0 100 100\"><path fill-rule=\"evenodd\" d=\"M88 84v-2c0-2.96-.86-4-4-4H16c-2.96 0-4 .98-4 4v2c0 3.102 1.04 4 4 4h68c3.02 0 4-.96 4-4zM58 12H42c-5 0-6 .94-6 6v22H16l34 34 34-34H64V18c0-5.06-1.06-6-6-6z\"/></svg>',\r\n  share: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M36.764 50c0 .308-.07.598-.088.905l32.247 16.12c2.76-2.34 6.293-3.798 10.195-3.798C87.89 63.227 95 70.337 95 79.11 95 87.89 87.89 95 79.118 95c-8.78 0-15.882-7.11-15.882-15.89 0-.317.07-.6.088-.906l-32.247-16.12c-2.77 2.33-6.293 3.79-10.195 3.79C12.11 65.873 5 58.77 5 50c0-8.78 7.11-15.89 15.882-15.89 3.902 0 7.427 1.467 10.195 3.796l32.247-16.12c-.018-.307-.088-.597-.088-.913C63.236 12.11 70.338 5 79.118 5 87.89 5 95 12.11 95 20.873c0 8.78-7.11 15.89-15.882 15.89-3.91 0-7.436-1.467-10.195-3.805L36.676 49.086c.017.308.088.598.088.914z\"/></svg>',\r\n  warning: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 66.399998 66.399998\"><g fill=\"red\"><path d=\"M33.2 0C14.9 0 0 14.9 0 33.2c0 18.3 14.9 33.2 33.2 33.2 18.3 0 33.2-14.9 33.2-33.2C66.4 14.9 51.5 0 33.2 0zm0 59.4C18.7 59.4 7 47.6 7 33.2 7 18.7 18.8 7 33.2 7c14.4 0 26.2 11.8 26.2 26.2 0 14.4-11.8 26.2-26.2 26.2z\"/><path d=\"M33.1 45.6c-1.4 0-2.5.5-3.5 1.5-.9 1-1.4 2.2-1.4 3.6 0 1.6.5 2.8 1.5 3.8 1 .9 2.1 1.3 3.4 1.3 1.3 0 2.4-.5 3.4-1.4 1-.9 1.5-2.2 1.5-3.7 0-1.4-.5-2.6-1.4-3.6-.9-1-2.1-1.5-3.5-1.5zM33.3 12.4c-1.5 0-2.8.5-3.7 1.6-.9 1-1.4 2.4-1.4 4.2 0 1.1.1 2.9.2 5.6l.8 13.1c.2 1.8.4 3.2.9 4.1.5 1.2 1.5 1.8 2.9 1.8 1.3 0 2.3-.7 2.9-1.9.5-1 .7-2.3.9-4l1.1-13.4c.1-1.3.2-2.5.2-3.8 0-2.2-.3-3.9-.8-5.1-.5-1-1.6-2.2-4-2.2z\"/></g></svg>',\r\n  fullscreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"5 -10 100 100\"><path d=\"M5-10v38.89L21.667 12.22 38.334 28.89l5.555-5.556L27.22 6.667 43.89-10H5zM105-10v38.89L88.333 12.22 71.667 28.89l-5.556-5.556L82.778 6.667 66.11-10H105zM5 90V51.11l16.667 16.667L38.334 51.11l5.555 5.557L27.22 73.333 43.89 90H5zM105 90V51.11L88.333 67.778 71.667 51.11l-5.556 5.557 16.667 16.666L66.11 90H105z\" fill=\"#010101\"/></svg>',\r\n  smallscreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"5 -10 100 100\"><path d=\"M43.89 28.89V-10L27.22 6.667 10.555-10 5-4.445l16.667 16.667L5 28.89h38.89zM66.11 28.89V-10L82.78 6.667 99.444-10 105-4.445 88.334 12.222 105 28.89H66.11zM43.89 51.11V90L27.22 73.334 10.555 90 5 84.444l16.667-16.666L5 51.11h38.89zM66.11 51.11V90L82.78 73.334 99.444 90 105 84.444 88.334 67.778 105 51.11H66.11z\" fill=\"#010101\"/></svg>'\r\n};\r\n",
    "\"use strict\";\r\n//make sure any console statements\r\nwindow.console = window.console || {\r\n  log: function() {}\r\n};\r\n\r\n/**\r\n * Load libraries\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\r\n  utils = require(\"./utils.js\"),\r\n  yutils = require(\"yasgui-utils\"),\r\n  imgs = require(\"./imgs.js\");\r\n\r\nrequire(\"../lib/deparam.js\");\r\nrequire(\"codemirror/addon/fold/foldcode.js\");\r\nrequire(\"codemirror/addon/fold/foldgutter.js\");\r\nrequire(\"codemirror/addon/fold/xml-fold.js\");\r\nrequire(\"codemirror/addon/fold/brace-fold.js\");\r\nrequire(\"./prefixFold.js\");\r\nrequire(\"codemirror/addon/hint/show-hint.js\");\r\nrequire(\"codemirror/addon/search/searchcursor.js\");\r\nrequire(\"codemirror/addon/edit/matchbrackets.js\");\r\nrequire(\"codemirror/addon/runmode/runmode.js\");\r\nrequire(\"codemirror/addon/display/fullscreen.js\");\r\nrequire(\"../lib/grammar/tokenizer.js\");\r\n\r\n/**\r\n * Main SGE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the SGE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\r\n *\r\n * @constructor\r\n * @param {DOM-Element} parent element to append editor to.\r\n * @param {object} settings\r\n * @class SGE\r\n * @return {doc} SGE document\r\n */\r\nvar root = (module.exports = function(parent, config) {\r\n  var rootEl = $(\"<div>\", {\r\n    class: \"sge\"\r\n  }).appendTo($(parent));\r\n  config = extendConfig(config);\r\n  var sge = extendCmInstance(CodeMirror(rootEl[0], config));\r\n  postProcessCmElement(sge);\r\n  return sge;\r\n});\r\n\r\n/**\r\n * Extend config object, which we will pass on to the CM constructor later on.\r\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\r\n * people who add their own onblur events to the config Additionally, need this\r\n * to include the CM defaults ourselves. CodeMirror has a method for including\r\n * defaults, but we can't rely on that one: it assumes flat config object, where\r\n * we have nested objects (e.g. the persistency option)\r\n *\r\n * @private\r\n */\r\nvar extendConfig = function(config) {\r\n  var extendedConfig = $.extend(true, {}, root.defaults, config);\r\n\r\n  // I know, codemirror deals with  default options as well.\r\n  //However, it does not do this recursively (i.e. the persistency option)\r\n\r\n  return extendedConfig;\r\n};\r\n/**\r\n * Add extra functions to the CM document (i.e. the codemirror instantiated\r\n * object)\r\n *\r\n * @private\r\n */\r\nvar extendCmInstance = function(sge) {\r\n  //instantiate autocompleters\r\n  sge.autocompleters = require(\"./autocompleters/autocompleterBase.js\")(root, sge);\r\n  if (sge.options.autocompleters) {\r\n    sge.options.autocompleters.forEach(function(name) {\r\n      if (root.Autocompleters[name]) sge.autocompleters.init(name, root.Autocompleters[name]);\r\n    });\r\n  }\r\n  sge.lastQueryDuration = null;\r\n  sge.getCompleteToken = function(token, cur) {\r\n    return require(\"./tokenUtils.js\").getCompleteToken(sge, token, cur);\r\n  };\r\n  sge.getPreviousNonWsToken = function(line, token) {\r\n    return require(\"./tokenUtils.js\").getPreviousNonWsToken(sge, line, token);\r\n  };\r\n  sge.getNextNonWsToken = function(lineNumber, charNumber) {\r\n    return require(\"./tokenUtils.js\").getNextNonWsToken(sge, lineNumber, charNumber);\r\n  };\r\n  sge.collapsePrefixes = function(collapse) {\r\n    if (collapse === undefined) collapse = true;\r\n    sge.foldCode(\r\n      require(\"./prefixFold.js\").findFirstPrefixLine(sge),\r\n      root.fold.prefix,\r\n      collapse ? \"fold\" : \"unfold\"\r\n    );\r\n  };\r\n  var backdrop = null;\r\n  var animateSpeed = null;\r\n  sge.setBackdrop = function(show) {\r\n    if (sge.options.backdrop || sge.options.backdrop === 0 || sge.options.backdrop === \"0\") {\r\n      if (animateSpeed === null) {\r\n        animateSpeed = +sge.options.backdrop;\r\n        if (animateSpeed === 1) {\r\n          //ah, sge.options.backdrop was 'true'. Set this to default animate speed 400\r\n          animateSpeed = 400;\r\n        }\r\n      }\r\n\r\n      if (!backdrop) {\r\n        backdrop = $(\"<div>\", {\r\n          class: \"backdrop\"\r\n        })\r\n          .click(function() {\r\n            $(this).hide();\r\n          })\r\n          .insertAfter($(sge.getWrapperElement()));\r\n      }\r\n      if (show) {\r\n        backdrop.show(animateSpeed);\r\n      } else {\r\n        backdrop.hide(animateSpeed);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Execute query. Pass a callback function, or a configuration object (see\r\n   * default settings below for possible values) I.e., you can change the\r\n   * query configuration by either changing the default settings, changing the\r\n   * settings of this document, or by passing query settings to this function\r\n   *\r\n   * @method doc.query\r\n   * @param function|object\r\n   */\r\n  sge.query = function(callbackOrConfig) {\r\n    root.executeQuery(sge, callbackOrConfig);\r\n  };\r\n\r\n  sge.getUrlArguments = function(config) {\r\n    return root.getUrlArguments(sge, config);\r\n  };\r\n\r\n  /**\r\n   * Fetch defined prefixes from query string\r\n   *\r\n   * @method doc.getPrefixesFromQuery\r\n   * @return object\r\n   */\r\n  sge.getPrefixesFromQuery = function() {\r\n    return require(\"./prefixUtils.js\").getPrefixesFromQuery(sge);\r\n  };\r\n\r\n  sge.addPrefixes = function(prefixes) {\r\n    return require(\"./prefixUtils.js\").addPrefixes(sge, prefixes);\r\n  };\r\n  sge.removePrefixes = function(prefixes) {\r\n    return require(\"./prefixUtils.js\").removePrefixes(sge, prefixes);\r\n  };\r\n\r\n  sge.getValueWithoutComments = function() {\r\n    var cleanedQuery = \"\";\r\n    root.runMode(sge.getValue(), \"sparql11\", function(stringVal, className) {\r\n      if (className != \"comment\") {\r\n        cleanedQuery += stringVal;\r\n      }\r\n    });\r\n    return cleanedQuery;\r\n  };\r\n  /**\r\n   * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\r\n   *\r\n   * @method doc.getQueryType\r\n   * @return string\r\n   *\r\n   */\r\n  sge.getQueryType = function() {\r\n    return sge.queryType;\r\n  };\r\n  /**\r\n   * Fetch the query mode: 'query' or 'update'\r\n   *\r\n   * @method doc.getQueryMode\r\n   * @return string\r\n   *\r\n   */\r\n  sge.getQueryMode = function() {\r\n    var type = sge.getQueryType();\r\n    if (\r\n      type == \"INSERT\" ||\r\n      type == \"DELETE\" ||\r\n      type == \"LOAD\" ||\r\n      type == \"CLEAR\" ||\r\n      type == \"CREATE\" ||\r\n      type == \"DROP\" ||\r\n      type == \"COPY\" ||\r\n      type == \"MOVE\" ||\r\n      type == \"ADD\"\r\n    ) {\r\n      return \"update\";\r\n    } else {\r\n      return \"query\";\r\n    }\r\n  };\r\n\r\n  sge.setCheckSyntaxErrors = function(isEnabled) {\r\n    sge.options.syntaxErrorCheck = isEnabled;\r\n    checkSyntax(sge);\r\n  };\r\n\r\n  sge.enableCompleter = function(name) {\r\n    addCompleterToSettings(sge.options, name);\r\n    if (root.Autocompleters[name]) sge.autocompleters.init(name, root.Autocompleters[name]);\r\n  };\r\n  sge.disableCompleter = function(name) {\r\n    removeCompleterFromSettings(sge.options, name);\r\n  };\r\n  return sge;\r\n};\r\n\r\nvar addCompleterToSettings = function(settings, name) {\r\n  if (!settings.autocompleters) settings.autocompleters = [];\r\n  settings.autocompleters.push(name);\r\n};\r\nvar removeCompleterFromSettings = function(settings, name) {\r\n  if (typeof settings.autocompleters == \"object\") {\r\n    var index = $.inArray(name, settings.autocompleters);\r\n    if (index >= 0) {\r\n      settings.autocompleters.splice(index, 1);\r\n      removeCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\r\n    }\r\n  }\r\n};\r\nvar postProcessCmElement = function(sge) {\r\n  /**\r\n   * Set doc value\r\n   */\r\n  var storageId = utils.getPersistencyId(sge, sge.options.persistent);\r\n  if (storageId) {\r\n    var valueFromStorage = yutils.storage.get(storageId);\r\n    if (valueFromStorage) sge.setValue(valueFromStorage);\r\n  }\r\n\r\n  root.drawButtons(sge);\r\n\r\n  /**\r\n   * Add event handlers\r\n   */\r\n  sge.on(\"blur\", function(sge, eventInfo) {\r\n    root.storeQuery(sge);\r\n  });\r\n  sge.on(\"change\", function(sge, eventInfo) {\r\n    checkSyntax(sge);\r\n    root.updateQueryButton(sge);\r\n    root.positionButtons(sge);\r\n  });\r\n  sge.on(\"changes\", function() {\r\n    //e.g. on paste\r\n    checkSyntax(sge);\r\n    root.updateQueryButton(sge);\r\n    root.positionButtons(sge);\r\n  });\r\n\r\n  sge.on(\"cursorActivity\", function(sge, eventInfo) {\r\n    updateButtonsTransparency(sge);\r\n  });\r\n  sge.prevQueryValid = false;\r\n  checkSyntax(sge); // on first load, check as well (our stored or default query might be incorrect)\r\n  root.positionButtons(sge);\r\n\r\n  $(sge.getWrapperElement())\r\n    .on(\"mouseenter\", \".cm-atom\", function() {\r\n      var matchText = $(this).text();\r\n      $(sge.getWrapperElement())\r\n        .find(\".cm-atom\")\r\n        .filter(function() {\r\n          return $(this).text() === matchText;\r\n        })\r\n        .addClass(\"matchingVar\");\r\n    })\r\n    .on(\"mouseleave\", \".cm-atom\", function() {\r\n      $(sge.getWrapperElement()).find(\".matchingVar\").removeClass(\"matchingVar\");\r\n    });\r\n  /**\r\n   * check url args and modify sge settings if needed\r\n   */\r\n  if (sge.options.consumeShareLink) {\r\n    sge.options.consumeShareLink(sge, getUrlParams());\r\n    //and: add a hash listener!\r\n    window.addEventListener(\"hashchange\", function() {\r\n      sge.options.consumeShareLink(sge, getUrlParams());\r\n    });\r\n  }\r\n  if (sge.options.collapsePrefixesOnLoad) sge.collapsePrefixes(true);\r\n};\r\n\r\n/**\r\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\r\n */\r\nvar getUrlParams = function() {\r\n  //first try hash\r\n  var urlParams = null;\r\n  if (window.location.hash.length > 1) {\r\n    //firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\r\n    //Don't want this. So simply get the hash string ourselves\r\n    urlParams = $.deparam(location.href.split(\"#\")[1]);\r\n  }\r\n  if ((!urlParams || !(\"query\" in urlParams)) && window.location.search.length > 1) {\r\n    //ok, then just try regular url params\r\n    urlParams = $.deparam(window.location.search.substring(1));\r\n  }\r\n  return urlParams;\r\n};\r\n\r\n/**\r\n * Update transparency of buttons. Increase transparency when cursor is below buttons\r\n */\r\n\r\nvar updateButtonsTransparency = function(sge) {\r\n  sge.cursor = $(\".CodeMirror-cursor\");\r\n  if (sge.buttons && sge.buttons.is(\":visible\") && sge.cursor.length > 0) {\r\n    if (utils.elementsOverlap(sge.cursor, sge.buttons)) {\r\n      sge.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\r\n    } else {\r\n      sge.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\r\n    }\r\n  }\r\n};\r\n\r\nvar clearError = null;\r\nvar checkSyntax = function(sge, deepcheck) {\r\n  sge.queryValid = true;\r\n\r\n  sge.clearGutter(\"gutterErrorBar\");\r\n\r\n  var state = null;\r\n  for (var l = 0; l < sge.lineCount(); ++l) {\r\n    var precise = false;\r\n    if (!sge.prevQueryValid) {\r\n      // we don't want cached information in this case, otherwise the\r\n      // previous error sign might still show up,\r\n      // even though the syntax error might be gone already\r\n      precise = true;\r\n    }\r\n\r\n    var token = sge.getTokenAt(\r\n      {\r\n        line: l,\r\n        ch: sge.getLine(l).length\r\n      },\r\n      precise\r\n    );\r\n    var state = token.state;\r\n    sge.queryType = state.queryType;\r\n    if(state.OK && l == sge.lineCount() - 1) {\r\n      // console.log(\"is complete: \" +  state.complete);\r\n      if(!state.complete) {\r\n        if(state.inLiteral) {\r\n          state.errorMsg = \"needs to close literal with \" + (state.inLiteral.cat.includes(\"2\")? '\"\"\"' : \"'''\");\r\n        }\r\n        state.OK = false;\r\n      }\r\n    }\r\n    if (state.OK == false) {\r\n      if (!sge.options.syntaxErrorCheck) {\r\n        //the library we use already marks everything as being an error. Overwrite this class attribute.\r\n        $(sge.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\r\n        //we don't want to gutter error, so return\r\n        return;\r\n      }\r\n\r\n      var warningEl = yutils.svg.getElement(imgs.warning);\r\n      if (state.errorMsg) {\r\n        require(\"./tooltip\")(sge, warningEl, function() {\r\n          return $(\"<div/>\").text(token.state.errorMsg).html();\r\n        });\r\n      } else if (state.possibleCurrent && state.possibleCurrent.length > 0) {\r\n        //        warningEl.style.zIndex = \"99999999\";\r\n        require(\"./tooltip\")(sge, warningEl, function() {\r\n          var expectedEncoded = [];\r\n          state.possibleCurrent.forEach(function(expected) {\r\n            expectedEncoded.push(\r\n              \"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\"\r\n            );\r\n          });\r\n          return \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\r\n        });\r\n      }\r\n      warningEl.style.marginTop = \"2px\";\r\n      warningEl.style.marginLeft = \"2px\";\r\n      warningEl.className = \"parseErrorIcon\";\r\n      sge.setGutterMarker(l, \"gutterErrorBar\", warningEl);\r\n\r\n      sge.queryValid = false;\r\n      break;\r\n    }\r\n  }\r\n  sge.prevQueryValid = sge.queryValid;\r\n  if (deepcheck) {\r\n    if (state != null && state.stack != undefined) {\r\n      var stack = state.stack, len = state.stack.length;\r\n      // Because incremental parser doesn't receive end-of-input\r\n      // it can't clear stack, so we have to check that whatever\r\n      // is left on the stack is nillable\r\n      if (len > 1) sge.queryValid = false;\r\n      else if (len == 1) {\r\n        if (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\r\n          sge.queryValid = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n/**\r\n * Static Utils\r\n */\r\n// first take all CodeMirror references and store them in the SGE object\r\n$.extend(root, CodeMirror);\r\n\r\n//add registrar for autocompleters\r\nroot.Autocompleters = {};\r\nroot.registerAutocompleter = function(name, constructor) {\r\n  root.Autocompleters[name] = constructor;\r\n  addCompleterToSettings(root.defaults, name);\r\n};\r\n\r\nroot.autoComplete = function(sge) {\r\n  //this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\r\n  sge.autocompleters.autoComplete(false);\r\n};\r\n//include the autocompleters we provide out-of-the-box\r\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\r\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\r\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\r\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\r\n\r\nroot.positionButtons = function(sge) {\r\n  var scrollBar = $(sge.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n  var offset = 0;\r\n  if (scrollBar.is(\":visible\")) {\r\n    offset = scrollBar.outerWidth();\r\n  }\r\n  if (sge.buttons.is(\":visible\")) sge.buttons.css(\"right\", offset + 4);\r\n};\r\n\r\n/**\r\n * Create a share link\r\n *\r\n * @method SGE.createShareLink\r\n * @param {doc} SGE document\r\n * @default {query: doc.getValue()}\r\n * @return object\r\n */\r\nroot.createShareLink = function(sge) {\r\n  //extend existing link, so first fetch current arguments\r\n  var urlParams = {};\r\n  if (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\r\n  urlParams[\"query\"] = sge.getValue();\r\n  return urlParams;\r\n};\r\nroot.getAsCurl = function(sge, ajaxConfig) {\r\n  var curl = require(\"./curl.js\");\r\n  return curl.createCurlString(sge, ajaxConfig);\r\n};\r\n/**\r\n * Consume the share link, by parsing the document URL for possible sge arguments, and setting the appropriate values in the SGE doc\r\n *\r\n * @method SGE.consumeShareLink\r\n * @param {doc} SGE document\r\n */\r\nroot.consumeShareLink = function(sge, urlParams) {\r\n  if (urlParams && urlParams.query) {\r\n    sge.setValue(urlParams.query);\r\n  }\r\n};\r\nroot.drawButtons = function(sge) {\r\n  sge.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(sge.getWrapperElement()));\r\n\r\n  /**\r\n   * draw share link button\r\n   */\r\n  if (sge.options.createShareLink) {\r\n    var svgShare = $(yutils.svg.getElement(imgs.share));\r\n    svgShare\r\n      .click(function(event) {\r\n        event.stopPropagation();\r\n        var popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(sge.buttons);\r\n        $(\"html\").click(function() {\r\n          if (popup) popup.remove();\r\n        });\r\n\r\n        popup.click(function(event) {\r\n          event.stopPropagation();\r\n        });\r\n        var $input = $(\"<input>\").val(\r\n          location.protocol +\r\n            \"//\" +\r\n            location.host +\r\n            location.pathname +\r\n            location.search +\r\n            \"#\" +\r\n            $.param(sge.options.createShareLink(sge))\r\n        );\r\n\r\n        $input.focus(function() {\r\n          var $this = $(this);\r\n          $this.select();\r\n\r\n          // Work around Chrome's little problem\r\n          $this.mouseup(function() {\r\n            // Prevent further mouseup intervention\r\n            $this.unbind(\"mouseup\");\r\n            return false;\r\n          });\r\n        });\r\n\r\n        popup.empty().append($(\"<div>\", { class: \"inputWrapper\" }).append($input));\r\n        if (sge.options.createShortLink) {\r\n          popup.addClass(\"enableShort\");\r\n          $(\"<button>Shorten</button>\")\r\n            .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\r\n            .click(function() {\r\n              $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\r\n              sge.options.createShortLink($input.val(), function(errString, shortLink) {\r\n                if (errString) {\r\n                  $input.remove();\r\n                  popup.find(\".inputWrapper\").append($(\"<span>\", { class: \"shortlinkErr\" }).text(errString));\r\n                } else {\r\n                  $input.val(shortLink).focus();\r\n                }\r\n              });\r\n            })\r\n            .appendTo(popup);\r\n        }\r\n        $(\"<button>CURL</button>\")\r\n          .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\r\n          .click(function() {\r\n            $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\r\n            $input.val(root.getAsCurl(sge)).focus();\r\n          })\r\n          .appendTo(popup);\r\n        var positions = svgShare.position();\r\n        popup\r\n          .css(\"top\", positions.top + svgShare.outerHeight() + parseInt(popup.css(\"padding-top\")) + \"px\")\r\n          .css(\"left\", positions.left + svgShare.outerWidth() - popup.outerWidth() + \"px\");\r\n        $input.focus();\r\n      })\r\n      .addClass(\"yasqe_share\")\r\n      .attr(\"title\", \"Share your query\")\r\n      .appendTo(sge.buttons);\r\n  }\r\n\r\n  /**\r\n   * draw fullscreen button\r\n   */\r\n\r\n  var toggleFullscreen = $(\"<div>\", {\r\n    class: \"fullscreenToggleBtns\"\r\n  })\r\n    .append(\r\n      $(yutils.svg.getElement(imgs.fullscreen))\r\n        .addClass(\"yasqe_fullscreenBtn\")\r\n        .attr(\"title\", \"Set editor full screen\")\r\n        .click(function() {\r\n          sge.setOption(\"fullScreen\", true);\r\n        })\r\n    )\r\n    .append(\r\n      $(yutils.svg.getElement(imgs.smallscreen))\r\n        .addClass(\"yasqe_smallscreenBtn\")\r\n        .attr(\"title\", \"Set editor to normal size\")\r\n        .click(function() {\r\n          sge.setOption(\"fullScreen\", false);\r\n        })\r\n    );\r\n  sge.buttons.append(toggleFullscreen);\r\n\r\n  if (sge.options.sparql.showQueryButton) {\r\n    $(\"<div>\", {\r\n      class: \"yasqe_queryButton\"\r\n    })\r\n      .click(function() {\r\n        if ($(this).hasClass(\"query_busy\")) {\r\n          if (sge.xhr) sge.xhr.abort();\r\n          root.updateQueryButton(sge);\r\n        } else {\r\n          sge.query();\r\n        }\r\n      })\r\n      .appendTo(sge.buttons);\r\n    root.updateQueryButton(sge);\r\n  }\r\n};\r\n\r\nvar queryButtonIds = {\r\n  busy: \"loader\",\r\n  valid: \"query\",\r\n  error: \"queryInvalid\"\r\n};\r\n\r\n/**\r\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\r\n *\r\n * @param {doc} SGE document\r\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\r\n */\r\nroot.updateQueryButton = function(sge, status) {\r\n  var queryButton = $(sge.getWrapperElement()).find(\".yasqe_queryButton\");\r\n  if (queryButton.length == 0) return; //no query button drawn\r\n\r\n  //detect status\r\n  if (!status) {\r\n    status = \"valid\";\r\n    if (sge.queryValid === false) status = \"error\";\r\n  }\r\n\r\n  if (status != sge.queryStatus) {\r\n    queryButton.empty().removeClass(function(index, classNames) {\r\n      return classNames\r\n        .split(\" \")\r\n        .filter(function(c) {\r\n          //remove classname from previous status\r\n          return c.indexOf(\"query_\") == 0;\r\n        })\r\n        .join(\" \");\r\n    });\r\n\r\n    if (status == \"busy\") {\r\n      queryButton.append(\r\n        $(\"<div>\", {\r\n          class: \"loader\"\r\n        })\r\n      );\r\n      sge.queryStatus = status;\r\n    } else if (status == \"valid\" || status == \"error\") {\r\n      queryButton.addClass(\"query_\" + status);\r\n      yutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\r\n      sge.queryStatus = status;\r\n    }\r\n  }\r\n};\r\n/**\r\n * Initialize SGE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\r\n *\r\n * @method SGE.fromTextArea\r\n * @param textArea {DOM element}\r\n * @param config {object}\r\n * @returns {doc} SGE document\r\n */\r\nroot.fromTextArea = function(textAreaEl, config) {\r\n  config = extendConfig(config);\r\n  //add sge div as parent (needed for styles to be manageable and scoped).\r\n  //In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\r\n  var rootEl = $(\"<div>\", {\r\n    class: \"sge\"\r\n  })\r\n    .insertBefore($(textAreaEl))\r\n    .append($(textAreaEl));\r\n  var sge = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\r\n  postProcessCmElement(sge);\r\n  return sge;\r\n};\r\n\r\nroot.storeQuery = function(sge) {\r\n  var storageId = utils.getPersistencyId(sge, sge.options.persistent);\r\n  if (storageId) {\r\n    yutils.storage.set(storageId, sge.getValue(), \"month\", sge.options.onQuotaExceeded);\r\n  }\r\n};\r\nroot.commentLines = function(sge) {\r\n  var startLine = sge.getCursor(true).line;\r\n  var endLine = sge.getCursor(false).line;\r\n  var min = Math.min(startLine, endLine);\r\n  var max = Math.max(startLine, endLine);\r\n\r\n  // if all lines start with #, remove this char. Otherwise add this char\r\n  var linesAreCommented = true;\r\n  for (var i = min; i <= max; i++) {\r\n    var line = sge.getLine(i);\r\n    if (line.length == 0 || line.substring(0, 1) != \"#\") {\r\n      linesAreCommented = false;\r\n      break;\r\n    }\r\n  }\r\n  for (var i = min; i <= max; i++) {\r\n    if (linesAreCommented) {\r\n      // lines are commented, so remove comments\r\n      sge.replaceRange(\r\n        \"\",\r\n        {\r\n          line: i,\r\n          ch: 0\r\n        },\r\n        {\r\n          line: i,\r\n          ch: 1\r\n        }\r\n      );\r\n    } else {\r\n      // Not all lines are commented, so add comments\r\n      sge.replaceRange(\"#\", {\r\n        line: i,\r\n        ch: 0\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nroot.copyLineUp = function(sge) {\r\n  var cursor = sge.getCursor();\r\n  var lineCount = sge.lineCount();\r\n  // First create new empty line at end of text\r\n  sge.replaceRange(\"\\n\", {\r\n    line: lineCount - 1,\r\n    ch: sge.getLine(lineCount - 1).length\r\n  });\r\n  // Copy all lines to their next line\r\n  for (var i = lineCount; i > cursor.line; i--) {\r\n    var line = sge.getLine(i - 1);\r\n    sge.replaceRange(\r\n      line,\r\n      {\r\n        line: i,\r\n        ch: 0\r\n      },\r\n      {\r\n        line: i,\r\n        ch: sge.getLine(i).length\r\n      }\r\n    );\r\n  }\r\n};\r\nroot.copyLineDown = function(sge) {\r\n  root.copyLineUp(sge);\r\n  // Make sure cursor goes one down (we are copying downwards)\r\n  var cursor = sge.getCursor();\r\n  cursor.line++;\r\n  sge.setCursor(cursor);\r\n};\r\nroot.doAutoFormat = function(sge) {\r\n  if (!sge.somethingSelected()) sge.execCommand(\"selectAll\");\r\n  var to = {\r\n    line: sge.getCursor(false).line,\r\n    ch: sge.getSelection().length\r\n  };\r\n  autoFormatRange(sge, sge.getCursor(true), to);\r\n};\r\n\r\nvar autoFormatRange = function(sge, from, to) {\r\n  var absStart = sge.indexFromPos(from);\r\n  var absEnd = sge.indexFromPos(to);\r\n  // Insert additional line breaks where necessary according to the\r\n  // mode's syntax\r\n  var res = autoFormatLineBreaks(sge.getValue(), absStart, absEnd);\r\n\r\n  // Replace and auto-indent the range\r\n  sge.operation(function() {\r\n    sge.replaceRange(res, from, to);\r\n    var startLine = sge.posFromIndex(absStart).line;\r\n    var endLine = sge.posFromIndex(absStart + res.length).line;\r\n    for (var i = startLine; i <= endLine; i++) {\r\n      sge.indentLine(i, \"smart\");\r\n    }\r\n  });\r\n};\r\n\r\nvar autoFormatLineBreaks = function(text, start, end) {\r\n  text = text.substring(start, end);\r\n  var breakAfterArray = [\r\n    [\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\r\n    [\"keyword\", \"ws\", \"uri\"] // i.e. base\r\n  ];\r\n  var breakAfterCharacters = [\"{\", \".\", \";\"];\r\n  var breakBeforeCharacters = [\"}\"];\r\n  var getBreakType = function(stringVal, type) {\r\n    for (var i = 0; i < breakAfterArray.length; i++) {\r\n      if (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf().toString()) {\r\n        return 1;\r\n      }\r\n    }\r\n    for (var i = 0; i < breakAfterCharacters.length; i++) {\r\n      if (stringVal == breakAfterCharacters[i]) {\r\n        return 1;\r\n      }\r\n    }\r\n    for (var i = 0; i < breakBeforeCharacters.length; i++) {\r\n      // don't want to issue 'breakbefore' AND 'breakafter', so check\r\n      // current line\r\n      if ($.trim(currentLine) != \"\" && stringVal == breakBeforeCharacters[i]) {\r\n        return -1;\r\n      }\r\n    }\r\n    return 0;\r\n  };\r\n  var formattedQuery = \"\";\r\n  var currentLine = \"\";\r\n  var stackTrace = [];\r\n  CodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\r\n    stackTrace.push(type);\r\n    var breakType = getBreakType(stringVal, type);\r\n    if (breakType != 0) {\r\n      if (breakType == 1) {\r\n        formattedQuery += stringVal + \"\\n\";\r\n        currentLine = \"\";\r\n      } else {\r\n        // (-1)\r\n        formattedQuery += \"\\n\" + stringVal;\r\n        currentLine = stringVal;\r\n      }\r\n      stackTrace = [];\r\n    } else {\r\n      currentLine += stringVal;\r\n      formattedQuery += stringVal;\r\n    }\r\n    if (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\") stackTrace = [];\r\n  });\r\n  return $.trim(formattedQuery.replace(/\\n\\s*\\n/g, \"\\n\"));\r\n};\r\n\r\nrequire(\"./sparql.js\"), require(\"./defaults.js\");\r\nroot.$ = $;\r\nroot.version = {\r\n  CodeMirror: CodeMirror.version,\r\n  SGE: require(\"../package.json\").version,\r\n  jquery: $.fn.jquery,\r\n  \"yasgui-utils\": yutils.version\r\n};\r\n",
    "var CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), tokenUtils = require(\"./tokenUtils.js\");\r\n\r\n(\"use strict\");\r\nvar lookFor = \"PREFIX\";\r\nmodule.exports = {\r\n  findFirstPrefixLine: function(cm) {\r\n    var lastLine = cm.lastLine();\r\n    for (var i = 0; i <= lastLine; ++i) {\r\n      if (findFirstPrefix(cm, i) >= 0) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction findFirstPrefix(cm, line, ch, lineText) {\r\n  if (!ch) ch = 0;\r\n  if (!lineText) lineText = cm.getLine(line);\r\n  lineText = lineText.toUpperCase();\r\n  for (var at = ch, pass = 0; ; ) {\r\n    var found = lineText.indexOf(lookFor, at);\r\n    if (found == -1) {\r\n      //no prefix on this line\r\n      if (pass == 1) break;\r\n      pass = 1;\r\n      at = lineText.length;\r\n      continue;\r\n    }\r\n    if (pass == 1 && found < ch) break;\r\n    var tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n    if (!/^(comment|string)/.test(tokenType)) return found + 1;\r\n    at = found - 1;\r\n    //Could not find a prefix, no use looping any further. Probably invalid query\r\n    if (at === pass) break;\r\n  }\r\n}\r\n\r\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\r\n  var line = start.line, lineText = cm.getLine(line);\r\n\r\n  var startCh, tokenType;\r\n\r\n  function hasPreviousPrefix() {\r\n    var hasPreviousPrefix = false;\r\n    for (var i = line - 1; i >= 0; i--) {\r\n      if (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\r\n        hasPreviousPrefix = true;\r\n        break;\r\n      }\r\n    }\r\n    return hasPreviousPrefix;\r\n  }\r\n\r\n  function findOpening(openCh) {\r\n    for (var at = start.ch, pass = 0; ; ) {\r\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\r\n      if (found == -1) {\r\n        if (pass == 1) break;\r\n        pass = 1;\r\n        at = lineText.length;\r\n        continue;\r\n      }\r\n      if (pass == 1 && found < start.ch) break;\r\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\r\n      at = found - 1;\r\n    }\r\n  }\r\n  var getLastPrefixPos = function(line, ch) {\r\n    var prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\r\n    if (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\r\n    var prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\r\n    if (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\r\n    var prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\r\n    if (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\r\n    return prefixUri.end;\r\n  };\r\n\r\n  //only use opening prefix declaration\r\n  if (hasPreviousPrefix()) return;\r\n  var prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\r\n\r\n  if (prefixStart == null) return;\r\n  var stopAt = \"{\"; //if this char is there, we won't have a chance of finding more prefixes\r\n  var stopAtNextLine = false;\r\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\r\n  var prefixEndChar = getLastPrefixPos(line, prefixStart);\r\n  var prefixEndLine = line;\r\n\r\n  outer:\r\n  for (var i = line; i <= lastLine; ++i) {\r\n    if (stopAtNextLine) break;\r\n    var text = cm.getLine(i), pos = i == line ? prefixStart + 1 : 0;\r\n\r\n    for (;;) {\r\n      if (!stopAtNextLine && text.indexOf(stopAt) >= 0) stopAtNextLine = true;\r\n\r\n      var nextPrefixDeclaration = text.toUpperCase().indexOf(lookFor, pos);\r\n\r\n      if (nextPrefixDeclaration >= 0) {\r\n        if ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\r\n          prefixEndChar = endCh;\r\n          prefixEndLine = i;\r\n          pos = prefixEndChar;\r\n        }\r\n        pos++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    from: CodeMirror.Pos(line, prefixStart + lookFor.length),\r\n    to: CodeMirror.Pos(prefixEndLine, prefixEndChar)\r\n  };\r\n});\r\n",
    "\"use strict\";\r\n/**\r\n * Append prefix declaration to list of prefixes in query window.\r\n *\r\n * @param sge\r\n * @param prefix\r\n */\r\nvar addPrefixes = function(sge, prefixes) {\r\n  var existingPrefixes = sge.getPrefixesFromQuery();\r\n  //for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\r\n  if (typeof prefixes == \"string\") {\r\n    addPrefixAsString(sge, prefixes);\r\n  } else {\r\n    for (var pref in prefixes) {\r\n      if (!(pref in existingPrefixes)) addPrefixAsString(sge, pref + \": <\" + prefixes[pref] + \">\");\r\n    }\r\n  }\r\n  sge.collapsePrefixes(false);\r\n};\r\n\r\nvar addPrefixAsString = function(sge, prefixString) {\r\n  var lastPrefix = null;\r\n  var lastPrefixLine = 0;\r\n  var numLines = sge.lineCount();\r\n  for (var i = 0; i < numLines; i++) {\r\n    var firstToken = sge.getNextNonWsToken(i);\r\n    if (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\r\n      lastPrefix = firstToken;\r\n      lastPrefixLine = i;\r\n    }\r\n  }\r\n\r\n  if (lastPrefix == null) {\r\n    sge.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\r\n      line: 0,\r\n      ch: 0\r\n    });\r\n  } else {\r\n    var previousIndent = getIndentFromLine(sge, lastPrefixLine);\r\n    sge.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\r\n      line: lastPrefixLine\r\n    });\r\n  }\r\n  sge.collapsePrefixes(false);\r\n};\r\nvar removePrefixes = function(sge, prefixes) {\r\n  var escapeRegex = function(string) {\r\n    //taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\r\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  };\r\n  for (var pref in prefixes) {\r\n    sge.setValue(\r\n      sge\r\n        .getValue()\r\n        .replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), \"\")\r\n    );\r\n  }\r\n  sge.collapsePrefixes(false);\r\n};\r\n\r\n/**\r\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\r\n *\r\n * @param cm\r\n * @returns {Array}\r\n */\r\nvar getPrefixesFromQuery = function(sge) {\r\n  //Use precise here. We want to be sure we use the most up to date state. If we're\r\n  //not, we might get outdated prefixes from the current query (creating loops such\r\n  //as https://github.com/OpenTriply/YASGUI/issues/84)\r\n  return sge.getTokenAt({ line: sge.lastLine(), ch: sge.getLine(sge.lastLine()).length }, true).state.prefixes;\r\n};\r\n\r\n/**\r\n * Get the used indentation for a certain line\r\n *\r\n * @param sge\r\n * @param line\r\n * @param charNumber\r\n * @returns\r\n */\r\nvar getIndentFromLine = function(sge, line, charNumber) {\r\n  if (charNumber == undefined) charNumber = 1;\r\n  var token = sge.getTokenAt({\r\n    line: line,\r\n    ch: charNumber\r\n  });\r\n  if (token == null || token == undefined || token.type != \"ws\") {\r\n    return \"\";\r\n  } else {\r\n    return token.string + getIndentFromLine(sge, line, token.end + 1);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addPrefixes: addPrefixes,\r\n  getPrefixesFromQuery: getPrefixesFromQuery,\r\n  removePrefixes: removePrefixes\r\n};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  utils = require(\"./utils.js\"),\r\n  SGE = require(\"./main.js\");\r\n\r\nSGE.getAjaxConfig = function(sge, callbackOrConfig) {\r\n  var callback = typeof callbackOrConfig == \"function\" ? callbackOrConfig : null;\r\n  var config = typeof callbackOrConfig == \"object\" ? callbackOrConfig : {};\r\n\r\n  if (sge.options.sparql) config = $.extend({}, sge.options.sparql, config);\r\n\r\n  //for backwards compatability, make sure we copy sparql handlers to sparql callbacks\r\n  if (config.handlers) $.extend(true, config.callbacks, config.handlers);\r\n\r\n  if (!config.endpoint || config.endpoint.length == 0) return; // nothing to query!\r\n  var queryMode = sge.getQueryMode();\r\n  /**\r\n\t * initialize ajax config\r\n\t */\r\n  var ajaxConfig = {\r\n    url: typeof config.endpoint == \"function\" ? config.endpoint(sge) : config.endpoint,\r\n    type: queryMode == \"update\"\r\n      ? \"POST\"\r\n      : typeof config.requestMethod == \"function\" ? config.requestMethod(sge) : config.requestMethod,\r\n    headers: {\r\n      Accept: getAcceptHeader(sge, config)\r\n    }\r\n  };\r\n  if (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\r\n  /**\r\n\t * add complete, beforesend, etc callbacks (if specified)\r\n\t */\r\n  var handlerDefined = false;\r\n  if (config.callbacks) {\r\n    for (var handler in config.callbacks) {\r\n      if (config.callbacks[handler]) {\r\n        handlerDefined = true;\r\n        ajaxConfig[handler] = config.callbacks[handler];\r\n      }\r\n    }\r\n  }\r\n  if (ajaxConfig.type === \"GET\") {\r\n    //we need to do encoding ourselve, as jquery does not properly encode the url string\r\n    //https://github.com/OpenTriply/YASGUI/issues/75\r\n    var first = true;\r\n    $.each(sge.getUrlArguments(config), function(key, val) {\r\n      ajaxConfig.url += (first ? \"?\" : \"&\") + val.name + \"=\" + encodeURIComponent(val.value);\r\n      first = false;\r\n    });\r\n  } else {\r\n    ajaxConfig.data = sge.getUrlArguments(config);\r\n  }\r\n  if (!handlerDefined && !callback) return; // ok, we can query, but have no callbacks. just stop now\r\n\r\n  // if only callback is passed as arg, add that on as 'onComplete' callback\r\n  if (callback) ajaxConfig.complete = callback;\r\n\r\n  /**\r\n\t * merge additional request headers\r\n\t */\r\n  if (config.headers && !$.isEmptyObject(config.headers)) $.extend(ajaxConfig.headers, config.headers);\r\n\r\n  var queryStart = new Date();\r\n  var updateYasqe = function() {\r\n    sge.lastQueryDuration = new Date() - queryStart;\r\n    SGE.updateQueryButton(sge);\r\n    sge.setBackdrop(false);\r\n  };\r\n  //Make sure the query button is updated again on complete\r\n  var completeCallbacks = [\r\n    function() {\r\n      require(\"./main.js\").signal(sge, \"queryFinish\", arguments);\r\n    },\r\n    updateYasqe\r\n  ];\r\n\r\n  if (ajaxConfig.complete) {\r\n    completeCallbacks.push(ajaxConfig.complete);\r\n  }\r\n  ajaxConfig.complete = completeCallbacks;\r\n  return ajaxConfig;\r\n};\r\n\r\nSGE.executeQuery = function(sge, callbackOrConfig) {\r\n  SGE.signal(sge, \"query\", sge, callbackOrConfig);\r\n  SGE.updateQueryButton(sge, \"busy\");\r\n  sge.setBackdrop(true);\r\n  sge.xhr = $.ajax(SGE.getAjaxConfig(sge, callbackOrConfig));\r\n};\r\n\r\nSGE.getUrlArguments = function(sge, config) {\r\n  var queryMode = sge.getQueryMode();\r\n  var data = [\r\n    {\r\n      name: utils.getString(sge, sge.options.sparql.queryName),\r\n      value: config.getQueryForAjax ? config.getQueryForAjax(sge) : sge.getValue()\r\n    }\r\n  ];\r\n\r\n  /**\r\n\t * add named graphs to ajax config\r\n\t */\r\n  if (config.namedGraphs && config.namedGraphs.length > 0) {\r\n    var argName = queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \";\r\n    for (var i = 0; i < config.namedGraphs.length; i++)\r\n      data.push({\r\n        name: argName,\r\n        value: config.namedGraphs[i]\r\n      });\r\n  }\r\n  /**\r\n\t * add default graphs to ajax config\r\n\t */\r\n  if (config.defaultGraphs && config.defaultGraphs.length > 0) {\r\n    var argName = queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \";\r\n    for (var i = 0; i < config.defaultGraphs.length; i++)\r\n      data.push({\r\n        name: argName,\r\n        value: config.defaultGraphs[i]\r\n      });\r\n  }\r\n\r\n  /**\r\n\t * add additional request args\r\n\t */\r\n  if (config.args && config.args.length > 0) $.merge(data, config.args);\r\n\r\n  return data;\r\n};\r\nvar getAcceptHeader = function(sge, config) {\r\n  var acceptHeader = null;\r\n  if (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\r\n    //this is the old config. For backwards compatability, keep supporting it\r\n    if (typeof config.acceptHeader == \"function\") {\r\n      acceptHeader = config.acceptHeader(sge);\r\n    } else {\r\n      acceptHeader = config.acceptHeader;\r\n    }\r\n  } else {\r\n    if (sge.getQueryMode() == \"update\") {\r\n      acceptHeader = typeof config.acceptHeader == \"function\"\r\n        ? config.acceptHeaderUpdate(sge)\r\n        : config.acceptHeaderUpdate;\r\n    } else {\r\n      var qType = sge.getQueryType();\r\n      if (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\r\n        acceptHeader = typeof config.acceptHeaderGraph == \"function\"\r\n          ? config.acceptHeaderGraph(sge)\r\n          : config.acceptHeaderGraph;\r\n      } else {\r\n        acceptHeader = typeof config.acceptHeaderSelect == \"function\"\r\n          ? config.acceptHeaderSelect(sge)\r\n          : config.acceptHeaderSelect;\r\n      }\r\n    }\r\n  }\r\n  return acceptHeader;\r\n};\r\n\r\nmodule.exports = {\r\n  getAjaxConfig: SGE.getAjaxConfig\r\n};\r\n",
    "\"use strict\";\r\n/**\r\n * When typing a query, this query is sometimes syntactically invalid, causing\r\n * the current tokens to be incorrect This causes problem for autocompletion.\r\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\r\n * these\r\n * \r\n * @param sge {doc}\r\n * @param token {object}\r\n * @param cursor {object}\r\n * @return token {object}\r\n * @method SGE.getCompleteToken\r\n */\r\nvar getCompleteToken = function(sge, token, cur) {\r\n  if (!cur) {\r\n    cur = sge.getCursor();\r\n  }\r\n  if (!token) {\r\n    token = sge.getTokenAt(cur);\r\n  }\r\n  var prevToken = sge.getTokenAt({\r\n    line: cur.line,\r\n    ch: token.start\r\n  });\r\n  // not start of line, and not whitespace\r\n  if (prevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\") {\r\n    token.start = prevToken.start;\r\n    token.string = prevToken.string + token.string;\r\n    return getCompleteToken(sge, token, {\r\n      line: cur.line,\r\n      ch: prevToken.start\r\n    }); // recursively, might have multiple tokens which it should include\r\n  } else if (token.type != null && token.type == \"ws\") {\r\n    //always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\r\n    token.start = token.start + 1;\r\n    token.string = token.string.substring(1);\r\n    return token;\r\n  } else {\r\n    return token;\r\n  }\r\n};\r\nvar getPreviousNonWsToken = function(sge, line, token) {\r\n  var previousToken = sge.getTokenAt({\r\n    line: line,\r\n    ch: token.start\r\n  });\r\n  if (previousToken != null && previousToken.type == \"ws\") {\r\n    previousToken = getPreviousNonWsToken(sge, line, previousToken);\r\n  }\r\n  return previousToken;\r\n};\r\nvar getNextNonWsToken = function(sge, lineNumber, charNumber) {\r\n  if (charNumber == undefined) charNumber = 1;\r\n  var token = sge.getTokenAt({\r\n    line: lineNumber,\r\n    ch: charNumber\r\n  });\r\n  if (token == null || token == undefined || token.end < charNumber) {\r\n    return null;\r\n  }\r\n  if (token.type == \"ws\") {\r\n    return getNextNonWsToken(sge, lineNumber, token.end + 1);\r\n  }\r\n  return token;\r\n};\r\n\r\nmodule.exports = {\r\n  getPreviousNonWsToken: getPreviousNonWsToken,\r\n  getCompleteToken: getCompleteToken,\r\n  getNextNonWsToken: getNextNonWsToken\r\n};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\");\r\n\r\n/**\r\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\r\n * Requirements: \r\n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\r\n * \t\tuse html as content\r\n */\r\nmodule.exports = function(sge, parent, html) {\r\n  var parent = $(parent);\r\n  var tooltip;\r\n  parent.hover(\r\n    function() {\r\n      if (typeof html == \"function\") html = html();\r\n      tooltip = $(\"<div>\").addClass(\"yasqe_tooltip\").html(html).appendTo(parent);\r\n      repositionTooltip();\r\n    },\r\n    function() {\r\n      $(\".yasqe_tooltip\").remove();\r\n    }\r\n  );\r\n\r\n  /**\r\n\t * only need to take into account top and bottom offset for this usecase\r\n\t */\r\n  var repositionTooltip = function() {\r\n    if ($(sge.getWrapperElement()).offset().top >= tooltip.offset().top) {\r\n      //shit, move the tooltip down. The tooltip now hovers over the top edge of the sge instance\r\n      tooltip.css(\"bottom\", \"auto\");\r\n      tooltip.css(\"top\", \"26px\");\r\n    }\r\n  };\r\n};\r\n",
    "\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n\r\nvar keyExists = function(objectToTest, key) {\r\n  var exists = false;\r\n  try {\r\n    if (objectToTest[key] !== undefined) exists = true;\r\n  } catch (e) {}\r\n  return exists;\r\n};\r\n\r\nvar getPersistencyId = function(sge, persistentIdCreator) {\r\n  var persistencyId = null;\r\n\r\n  if (persistentIdCreator) {\r\n    if (typeof persistentIdCreator == \"string\") {\r\n      persistencyId = persistentIdCreator;\r\n    } else {\r\n      persistencyId = persistentIdCreator(sge);\r\n    }\r\n  }\r\n  return persistencyId;\r\n};\r\n\r\nvar elementsOverlap = (function() {\r\n  function getPositions(elem) {\r\n    var pos, width, height;\r\n    pos = $(elem).offset();\r\n    width = $(elem).width();\r\n    height = $(elem).height();\r\n    return [[pos.left, pos.left + width], [pos.top, pos.top + height]];\r\n  }\r\n\r\n  function comparePositions(p1, p2) {\r\n    var r1, r2;\r\n    r1 = p1[0] < p2[0] ? p1 : p2;\r\n    r2 = p1[0] < p2[0] ? p2 : p1;\r\n    return r1[1] > r2[0] || r1[0] === r2[0];\r\n  }\r\n\r\n  return function(a, b) {\r\n    var pos1 = getPositions(a), pos2 = getPositions(b);\r\n    return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\r\n  };\r\n})();\r\n\r\nvar getString = function(sge, item) {\r\n  if (typeof item == \"function\") {\r\n    return item(sge);\r\n  } else {\r\n    return item;\r\n  }\r\n};\r\nmodule.exports = {\r\n  keyExists: keyExists,\r\n  getPersistencyId: getPersistencyId,\r\n  elementsOverlap: elementsOverlap,\r\n  getString: getString\r\n};\r\n"
  ]
}