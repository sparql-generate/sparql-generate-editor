{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/deparam.js","yasqe.min.js","lib/grammar/_tokenizer-table.js","lib/grammar/tokenizer.js","lib/trie.js","node_modules/codemirror/addon/display/fullscreen.js","node_modules/codemirror/addon/edit/matchbrackets.js","node_modules/codemirror/addon/fold/brace-fold.js","node_modules/codemirror/addon/fold/foldcode.js","node_modules/codemirror/addon/fold/foldgutter.js","node_modules/codemirror/addon/fold/xml-fold.js","node_modules/codemirror/addon/hint/show-hint.js","node_modules/codemirror/addon/runmode/runmode.js","node_modules/codemirror/addon/search/searchcursor.js","node_modules/store/dist/store.legacy.js","node_modules/store/plugins/json2.js","node_modules/store/plugins/lib/json2.js","node_modules/store/src/store-engine.js","node_modules/store/src/util.js","node_modules/store/storages/all.js","node_modules/store/storages/cookieStorage.js","node_modules/store/storages/localStorage.js","node_modules/store/storages/memoryStorage.js","node_modules/store/storages/oldFF-globalStorage.js","node_modules/store/storages/oldIE-userDataStorage.js","node_modules/store/storages/sessionStorage.js","node_modules/yasgui-utils/package.json","node_modules/yasgui-utils/src/main.js","node_modules/yasgui-utils/src/storage.js","node_modules/yasgui-utils/src/svg.js","package.json","src/autocompleters/autocompleterBase.js","src/autocompleters/classes.js","src/autocompleters/prefixes.js","src/autocompleters/properties.js","src/autocompleters/utils.js","src/autocompleters/variables.js","src/curl.js","src/defaults.js","src/entry.js","src/imgs.js","src/main.js","src/prefixFold.js","src/prefixUtils.js","src/sparql.js","src/tokenUtils.js","src/tooltip.js","src/utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","YASQE","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","$","jQuery","deparam","params","coerce","obj","coerce_types","true","false","null","each","replace","split","j","v","val","param","key","decodeURIComponent","cur","keys","keys_last","test","shift","concat","isNaN","undefined","isArray","push","jquery","2","table","*[&&,valueLogical]","&&","AS",")",",","}","||",";","STRING_LITERAL1_SUB","STRING_LITERAL1_END","STRING_LITERAL2_SUB","STRING_LITERAL2_END","STRING_LITERAL_LONG1_SUB","STRING_LITERAL_LONG1_END","STRING_LITERAL_LONG2_SUB","STRING_LITERAL_LONG2_END","IRI_REF_SUB","IRI_REF_END","*[,,expression]","*[,,objectPath]",".","]","{","OPTIONAL","MINUS","GRAPH","SERVICE","FILTER","BIND","VALUES","*[,,object]","GENERATE","CONSTRUCT","WHEREVER","WHERE","ORDER","HAVING","GROUP","ITERATOR","ITERATE","SOURCE","LOOK UP","LIMIT","OFFSET","*[/,pathEltOrInverse]","/","|","(","[","VAR1","VAR2","NIL","START_XEXPR","IRI_REF","IRI_REF_START","TRUE","FALSE","BLANK_NODE_LABEL","ANON","PNAME_LN","PNAME_NS","INTEGER","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","STRING_LITERAL1","STRING_LITERAL1_START","STRING_LITERAL2","STRING_LITERAL2_START","STRING_LITERAL_LONG1","STRING_LITERAL_LONG1_START","STRING_LITERAL_LONG2","STRING_LITERAL_LONG2_START","*[;,?[or([verbPath,verbSimple]),objectList]]","*[;,?[verb,objectList]]","*[UNION,groupGraphPattern]","UNION","*[graphPatternNotTriples,?.,?triplesBlock]","*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]","*[|,pathOneInPropertySet]","*[|,pathSequence]","*[||,conditionalAndExpression]","*dataBlockValue","UNDEF","*datasetClause","FROM","*graphNode","*graphNodePath","*groupCondition","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","SAMETERM","ISIRI","ISURI","ISBLANK","ISLITERAL","ISNUMERIC","SUBSTR","REPLACE","REGEX","EXISTS","NOT","*havingCondition","*iteratorOrSourceClause","*or([[ (,*dataBlockValue,)],NIL])","*or([[*,unaryExpression],[/,unaryExpression]])","*","=","!=","<",">","<=",">=","IN","+","-","*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","*or([baseDecl,prefixDecl])","BASE","PREFIX","*or([var,[ (,expression,AS,var,)]])","*orderCondition","ASC","DESC","*var","+graphNode","+graphNodePath","+groupCondition","+havingCondition","+or([var,[ (,expression,AS,var,)]])","+orderCondition","?.","?DISTINCT","DISTINCT","!","COUNT","SUM","MIN","MAX","AVG","SAMPLE","GROUP_CONCAT","?SILENT","SILENT","?[,,expression]","?[.,?constructTriples]","?[.,?triplesBlock]","?[;,SEPARATOR,=,string]","?[ACCEPT,varOrIri]","ACCEPT","?[AS,var]","?[or([verbPath,verbSimple]),objectList]","^","?[pathOneInPropertySet,*[|,pathOneInPropertySet]]","?[verb,objectList]","?argList","?constructTriples","?groupClause","?havingClause","?limitClause","?limitOffsetClauses","?offsetClause","?or([DISTINCT,REDUCED])","REDUCED","?or([LANGTAG,[^^,iriRef]])","LANGTAG","^^","?or([LANGTAG,[^^,xiri]])","?or([WHEREVER,WHERE])","?or([[*,unaryExpression],[/,unaryExpression]])","?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","?orderClause","?pathMod","?","?triplesBlock","?whereClause","[ (,*dataBlockValue,)]","[ (,*var,)]","[ (,expression,)]","[ (,expression,AS,var,)]","[!=,numericExpression]","[&&,valueLogical]","[*,unaryExpression]","[+,multiplicativeExpression]","[,,expression]","[,,integer,}]","[,,objectPath]","[,,object]","[,,or([},[integer,}]])]","[-,multiplicativeExpression]","[.,?constructTriples]","[.,?triplesBlock]","[/,pathEltOrInverse]","[/,unaryExpression]","[;,?[or([verbPath,verbSimple]),objectList]]","[;,?[verb,objectList]]","[;,SEPARATOR,=,string]","[<,numericExpression]","[<=,numericExpression]","[=,numericExpression]","[>,numericExpression]","[>=,numericExpression]","[ACCEPT,varOrIri]","[AS,var]","[IN,expressionList]","[IRI_REF_START,xiri_Sub]","[IRI_REF_SUB,xiri_Sub]","[NOT,IN,expressionList]","[STRING_LITERAL1_START,xString_Literal1_Sub]","[STRING_LITERAL1_SUB,xString_Literal1_Sub]","[STRING_LITERAL2_START,xString_Literal2_Sub]","[STRING_LITERAL2_SUB,xString_Literal2_Sub]","[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]","[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]","[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]","[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]","[UNION,groupGraphPattern]","[^^,iriRef]","[^^,xiri]","[graphPatternNotTriples,?.,?triplesBlock]","[integer,or([[,,or([},[integer,}]])],}])]","[integer,}]","[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]","[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]","[or([verbPath,verbSimple]),objectList]","[pathOneInPropertySet,*[|,pathOneInPropertySet]]","[verb,objectList]","[|,pathOneInPropertySet]","[|,pathSequence]","[||,conditionalAndExpression]","additiveExpression","aggregate","argList","baseDecl","bind","blankNode","blankNodePropertyList","blankNodePropertyListPath","booleanLiteral","brackettedExpression","builtInCall","collection","collectionPath","conditionalAndExpression","conditionalOrExpression","constraint","constructTriples","dataBlock","dataBlockValue","datasetClause","defaultGraphClause","existsFunc","expression","expressionList","filter","functionCall","generate","generateQuery1","generateQuery2","generateTemplate","generateTemplateSub","generateUnit","graphGraphPattern","graphNode","graphNodePath","graphPatternNotTriples","groupClause","groupCondition","groupGraphPattern","groupGraphPatternSub","groupOrUnionGraphPattern","havingClause","havingCondition","inlineData","inlineDataFull","inlineDataOneVar","integer","iriRef","iteratorClause","iteratorOrSourceClause","limitClause","limitOffsetClauses","minusGraphPattern","multiplicativeExpression","namedGraphClause","NAMED","notExistsFunc","numericExpression","numericLiteral","numericLiteralNegative","numericLiteralPositive","numericLiteralUnsigned","object","objectList","objectListPath","objectPath","offsetClause","optionalGraphPattern","or([*,expression])","or([+or([var,[ (,expression,AS,var,)]]),*])","or([ASC,DESC])","or([DISTINCT,REDUCED])","or([ITERATOR,ITERATE])","or([LANGTAG,[^^,iriRef]])","or([LANGTAG,[^^,xiri]])","or([NIL,[ (,*var,)]])","or([SOURCE,LOOK UP])","or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])","or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])","or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])","or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])","or([WHEREVER,WHERE])","or([[ (,*dataBlockValue,)],NIL])","or([[ (,expression,)],NIL])","or([[*,unaryExpression],[/,unaryExpression]])","or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","or([[,,or([},[integer,}]])],}])","or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])","or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])","or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])","or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])","or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])","or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])","or([baseDecl,prefixDecl])","or([defaultGraphClause,namedGraphClause])","or([generateQuery1,generateQuery2])","or([inlineDataOneVar,inlineDataFull])","or([iriRef,[IRI_REF_START,xiri_Sub]])","or([iteratorClause,sourceClause,bind])","or([numericLiteralPositive,numericLiteralNegative])","or([sourceSelector,generateTemplate])","or([subGenerateQuery1,subGenerateQuery2])","or([subSelect,groupGraphPatternSub])","SELECT","or([var,[ (,expression,AS,var,)]])","or([var,xExpr])","or([verbPath,verbSimple])","or([xiri,a])","or([},[integer,}]])","orderClause","orderCondition","path","pathAlternative","pathElt","pathEltOrInverse","pathMod","pathNegatedPropertySet","pathOneInPropertySet","pathPrimary","pathSequence","prefixDecl","prefixedName","primaryExpression","prologue","propertyList","propertyListNotEmpty","propertyListPath","propertyListPathNotEmpty","rdfLiteral","regexExpression","relationalExpression","selectClause","serviceGraphPattern","solutionModifier","sourceClause","sourceSelector","sparql11","storeProperty","strReplaceExpression","string","subGenerateQuery1","subGenerateQuery2","subSelect","substringExpression","switchToParsingXIRI","switchToParsingXL1","switchToParsingXL2","switchToParsingXS1","switchToParsingXS2","triplesBlock","triplesNode","triplesNodePath","triplesSameSubject","triplesSameSubjectPath","unaryExpression","valueLogical","valuesClause","var","varOrIri","varOrTerm","varOrXExpr","verb","verbPath","verbSimple","whereClause","xExpr","xNode","xRDFLiteral","xString","xString_Literal1","xString_Literal1_Sub","xString_Literal2","xString_Literal2_Sub","xString_Literal_Long1","xString_Literal_Long1_Sub","xString_Literal_Long2","xString_Literal_Long2_Sub","xTerm","xiri","xiriOrFunction","xiri_Sub","keywords","punct","startSymbol","acceptEmpty","3","CodeMirror","defineMode","config","parserConfig","getPossibles","symbol","possibles","possiblesOb","ll1_table","property","toString","tokenBase","stream","state","nextToken","consume","consumed","termls","terminals","lexicalState","match","regex","result","cat","name","style","text","start","switchTo","grammar","toUpperCase","recordFailurePos","tokenOb","col","column","errorStartPos","errorEndPos","setQueryType","queryType","setSideConditions","topSymbol","inPrefixDecl","allowVars","allowBnodes","checkSideConditions","changeLexicalState","checkinLiteral","inLiteral","JSON","parse","stringify","console","error","attemptConsume","pos","possibleCurrent","possibleNext","OK","complete","includes","finished","token","stack","pop","nextSymbols","startsWith","currentPnameNs","slice","prefixes","allNillable","sp","item","lastProperty","colonIndex","indexOf","prefNs","errorMsg","lastPredicateOffset","indent","textAfter","closeBracket","substr","dn","indentTop","indentTable","indentUnit","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","VARNAME","PN_PREFIX","HEX","PERCENT","PN_LOCAL_ESC","PLX","PN_LOCAL","EXPONENT","ECHAR","hex4","unicode","OPEN_EXPR","CLOSE_EXPR","STRING_LITERAL_LONG1_QUOTES","STRING_LITERAL_LONG1_CONTENT","STRING_LITERAL_LONG2_QUOTES","STRING_LITERAL_LONG2_CONTENT","WS","COMMENT","WS_OR_COMMENT_STAR","default","RegExp","xs1","xs2","trunc_l1","trunc_l2","xl1","xl2","*[,, object]","*[(,),object]","*[(,),objectPath]","startState","base","tokenize","electricChars","defineMIME","./_tokenizer-table.js","codemirror","4","Trie","words","children","prototype","insert","str","k","child","T","remove","update","strOld","strNew","countWord","ret","countPrefix","find","getAllWords","hasOwnProperty","autoComplete","5","mod","setFullscreen","cm","wrap","getWrapperElement","fullScreenRestore","scrollTop","pageYOffset","scrollLeft","pageXOffset","width","height","className","document","documentElement","overflow","refresh","setNormal","info","scrollTo","defineOption","old","Init","6","findMatchingBracket","where","strict","line","getLineHandle","ch","matching","charAt","dir","getTokenTypeAt","Pos","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","re","bracketRegex","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","end","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","marks","ranges","listSelections","empty","head","markText","ie_lt8","focused","focus","clear","operation","setTimeout","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","off","on","defineExtension","7","registerHelper","findOpening","openCh","at","pass","lineText","lastIndexOf","tokenType","startToken","endToken","startCh","endCh","count","outer","nextOpen","nextClose","hasImport","getTokenAt","type","semi","prev","startLine","has","next","clipPos","hasInclude","8","doFold","options","force","getRange","allowFolded","range","finder","minSize","findMarksAt","__isFold","cleared","getOption","myWidget","makeWidget","myRange","e_preventDefault","replacedWith","clearOnEnter","signal","widget","createTextNode","createElement","appendChild","editorOptions","foldOptions","defaultOptions","newFoldFunction","rangeFinder","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","unfoldAll","funcs","Array","arguments","helpers","getHelpers","auto","minFoldSize","scanUp","9","State","parseOptions","opts","gutter","indicatorOpen","indicatorFolded","isFolded","findMarks","marker","spec","elt","cloneNode","updateFoldInfo","foldGutter","foldOption","func","eachLine","mark","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","folded","onChange","clearTimeout","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","./foldcode","10","cmp","b","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","lastIndex","exec","index","toNextTag","toPrevTag","findMatchingClose","tag","findMatchingOpen","endLine","nameStartChar","nameChar","openTag","startPos","endPos","findMatchingTag","here","open","close","findEnclosingTag","scanForClosingTag","11","Completion","debounce","tick","startLen","getSelection","activityFunc","cursorActivity","isNewCompletion","nw","moved","cmpPos","editor","hintOptions","out","prop","hint","resolve","getText","completion","buildKeyMap","handle","addBinding","bound","baseMap","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","custom","customKeys","extra","extraKeys","getHintElement","hintsElement","el","nodeName","parentNode","Widget","data","picked","hints","selectedHint","completions","list","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","render","displayText","hintId","cursorCoords","alignWithWord","left","top","bottom","below","winW","innerWidth","body","offsetWidth","winH","innerHeight","offsetHeight","container","box","getBoundingClientRect","overlapY","scrolls","scrollHeight","clientHeight","startScroll","getScrollInfo","curTop","cursor","overlapX","right","node","firstChild","nextSibling","paddingRight","display","nativeBarWidth","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onFocus","onScroll","curScroll","newTop","point","target","srcElement","completeOnSingleClick","applicableHelpers","somethingSelected","supportsSelection","fetchHints","callback","async","then","resolveAutoHints","resolved","run","app","getHelper","fromList","anyword","showHint","getHints","newOpts","selections","anchor","completionActive","requestAnimationFrame","fn","cancelAnimationFrame","active","replaceRange","closeCharacters","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","childNodes","offsetTop","floor","term","word","autocomplete","12","runMode","modespec","mode","getMode","defaults","ie","ie_lt9","tabSize","innerHTML","content","idx","size","lines","splitLines","StringStream","blankLine","eol","current","13","SearchCursor","doc","query","caseFold","atOccurrence","source","ignoreCase","matches","reverse","cutOff","newMatch","matchLen","origQuery","toLowerCase","orig","adjustPos","origTarget","last","ln","cut","pos1","len1","findNext","findPrevious","savePosAndFail","maxLine","lineCount","newText","origin","defineDocExtension","getSearchCursor","setSelections","14","engine","storages","plugins","createStore","../plugins/json2","../src/store-engine","../storages/all","15","json2Plugin","./lib/json2","16","this_value","valueOf","quote","rx_escapable","c","meta","charCodeAt","holder","partial","mind","gap","value","toJSON","rep","isFinite","String","Object","apply","join","rx_one","rx_two","rx_three","rx_four","rx_dangerous","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Boolean","Number","\b","\t","\n","\f","\r","\"","\\","replacer","space","","reviver","walk","eval","SyntaxError","17","_warn","_console","warn","log","namespace","isList","namespacePrefix","namespaceRegexp","legalNamespaces","_privateStoreProps","_namespacePrefix","_namespaceRegexp","_testStorage","storage","testStr","write","ok","read","_assignPluginFnProp","pluginFnProp","propName","oldFn","super_fn","arg","args","newFnArgs","_serialize","_deserialize","strVal","defaultVal","_addStorage","enabled","_addPlugin","plugin","seenPlugin","pluck","isFunction","pluginProperties","isObject","addStorage","store","create","storeAPI","raw","util","version","get","optionalDefaultValue","set","namespacedKey","clearAll","hasNamespace","addPlugin","./util","18","make_assign","assign","props1","props2","etc","make_create","F","assignProps1","assignProps2","assignArgsList","make_trim","trim","arr","map","res","Global","19","./cookieStorage","./localStorage","./memoryStorage","./oldFF-globalStorage","./oldIE-userDataStorage","./sessionStorage","20","_has","regexpStr","escape","unescape","cookie","cookies","kvp","_","../src/util","21","localStorage","getItem","setItem","removeItem","22","memoryStorage","23","globalStorage","24","unfixedKey","fixedKey","fixKey","_withStorageEl","storageEl","setAttribute","save","storageName","getAttribute","attributes","XMLDocument","attr","removeAttribute","load","forbiddenCharsRegex","_makeIEStorageElFunction","addBehavior","storageOwner","storageContainer","scriptTag","ActiveXObject","w","frames","storeFunction","unshift","25","sessionStorage","26","_args","scope","escapedName","rawSpec","_from","_id","_inCache","_location","_nodeVersion","_npmOperationalInternal","host","tmp","_npmUser","email","_npmVersion","_phantomChildren","_requested","_requiredBy","_resolved","_shasum","_shrinkwrap","_spec","_where","author","bugs","url","dependencies","description","devDependencies","directories","dist","shasum","tarball","gitHead","homepage","licenses","main","maintainers","optionalDependencies","readme","repository","scripts","27","svg","yasgui-utils","nestedExists","../package.json","./storage.js","./svg.js","28","isQuotaExceeded","quotaExceeded","number","times","day","month","year","root","exp","onQuotaExceeded","XMLSerializer","serializeToString","time","getTime","removeAll","29","draw","parent","svgString","getElement","append","parser","DOMParser","dom","parseFromString","svgContainer","30","license","dev","build","patch","minor","major","bootstrap-sass","browserify","browserify-shim","browserify-transform-tools","exorcist","gulp","gulp-autoprefixer","gulp-bump","gulp-concat","gulp-connect","gulp-cssimport","gulp-cssnano","gulp-embedlr","gulp-filter","gulp-git","gulp-jsvalidate","gulp-livereload","gulp-notify","gulp-rename","gulp-sass","gulp-sourcemaps","gulp-streamify","gulp-tag-version","gulp-uglify","node-sass","require-dir","run-sequence","vinyl-buffer","vinyl-source-stream","vinyl-transform","watchify","web","prettier","optionalShim","../../lib/codemirror","31","utils","yutils","yasqe","completionNotifications","completers","tries","eventInfo","needPossibleAdjustment","notificationName","is","scrollBar","offset","outerWidth","forEach","notification","css","storeBulkCompletions","completer","storageId","getPersistencyId","persistent","initCompleter","completionInit","bulk","storeArrayAsBulk","suggestions","completionsFromStorage","persistencyIdentifier","Function","fromAutoShow","tryHintType","autoShow","hintConfig","wrappedHintCallback","getCompletionHintsObject","completerName","inArray","autocompleters","isValidCompletionPosition","callbacks","validPosition","success","invalidPosition","getSuggestionsFromToken","partialToken","stringToAutocomplete","autocompletionString","partialTokenLength","getSuggestionsAsHintObject","getCompleteToken","preProcessToken","wrappedCallback","hintList","suggestedString","postProcessToken","selectHint","returnObj","completionToken","callbackName","init","notifications","getEl","show","autoshow","appendTo","hide","getTrie","../../lib/trie.js","../main.js","../utils.js","32","fetchFromLov","previousToken","getPreviousNonWsToken","preprocessResourceTokenForCompletion","postprocessResourceTokenForCompletion","./utils","./utils.js","33","tokenTypes","string-2","atom","appendPrefixIfNeeded","fetchFrom","prefixArray","prefix","completeString","sort","preprocessPrefixTokenForCompletion","collapsePrefixes","lastNonWsTokenString","currentPrefix","substring","queryPrefixes","getPrefixesFromQuery","addPrefixes","location","protocol","34","35","tokenPrefix","tokenPrefixUri","reqProtocol","maxResults","q","page","results","updateUrl","increasePage","doRequests","uri","total_results","fail","jqXHR","textStatus","errorThrown","loader","addClass","../imgs.js","36","distinctVars","variable","nextEl","nextElClass","variables","37","sparql","createCurlString","ajaxConfig","getAjaxConfig","pathname","cmds","requestMethod","header","headers","./sparql.js","38","extend","highlightSelectionMatches","showToken","tabMode","lineNumbers","lineWrapping","backdrop","combine","brace","collapsePrefixesOnLoad","gutters","fixedGutter","syntaxErrorCheck","Ctrl-Space","Cmd-Space","Ctrl-D","deleteLine","Ctrl-K","Shift-Ctrl-K","Cmd-D","Cmd-K","Ctrl-/","commentLines","Cmd-/","Ctrl-Alt-Down","copyLineDown","Ctrl-Alt-Up","copyLineUp","Cmd-Alt-Down","Cmd-Alt-Up","Shift-Ctrl-F","doAutoFormat","Shift-Cmd-F","Ctrl-]","indentMore","Cmd-]","Ctrl-[","indentLess","Cmd-[","Ctrl-S","storeQuery","Cmd-S","Ctrl-Enter","executeQuery","Cmd-Enter","F11","setOption","cursorHeight","createShareLink","createShortLink","consumeShareLink","closest","queryName","getQueryMode","showQueryButton","endpoint","acceptHeaderGraph","acceptHeaderSelect","acceptHeaderUpdate","namedGraphs","defaultGraphs","getQueryForAjax","beforeSend","handlers","./main.js","39","40","queryInvalid","download","share","warning","fullscreen","smallscreen","41","imgs","rootEl","class","extendConfig","extendCmInstance","postProcessCmElement","extendedConfig","Autocompleters","lastQueryDuration","getNextNonWsToken","lineNumber","charNumber","collapse","findFirstPrefixLine","animateSpeed","setBackdrop","click","insertAfter","callbackOrConfig","getUrlArguments","removePrefixes","getValueWithoutComments","cleanedQuery","getValue","stringVal","getQueryType","setCheckSyntaxErrors","isEnabled","checkSyntax","enableCompleter","addCompleterToSettings","disableCompleter","removeCompleterFromSettings","settings","splice","valueFromStorage","setValue","drawButtons","updateQueryButton","positionButtons","updateButtonsTransparency","prevQueryValid","matchText","removeClass","getUrlParams","addEventListener","urlParams","hash","href","search","buttons","elementsOverlap","deepcheck","queryValid","precise","warningEl","html","expectedEncoded","expected","marginTop","marginLeft","len","registerAutocompleter","constructor","getAsCurl","curl","svgShare","event","stopPropagation","popup","$input","$this","select","mouseup","unbind","errString","shortLink","positions","position","outerHeight","parseInt","toggleFullscreen","hasClass","xhr","abort","queryButtonIds","busy","valid","status","queryButton","queryStatus","classNames","fromTextArea","textAreaEl","insertBefore","linesAreCommented","setCursor","execCommand","autoFormatRange","absStart","indexFromPos","absEnd","autoFormatLineBreaks","posFromIndex","indentLine","breakAfterArray","breakAfterCharacters","breakBeforeCharacters","getBreakType","stackTrace","currentLine","formattedQuery","breakType","../lib/deparam.js","../lib/grammar/tokenizer.js","./autocompleters/autocompleterBase.js","./autocompleters/classes.js","./autocompleters/prefixes.js","./autocompleters/properties.js","./autocompleters/variables.js","./curl.js","./defaults.js","./imgs.js","./prefixFold.js","./prefixUtils.js","./tokenUtils.js","./tooltip","codemirror/addon/display/fullscreen.js","codemirror/addon/edit/matchbrackets.js","codemirror/addon/fold/brace-fold.js","codemirror/addon/fold/foldcode.js","codemirror/addon/fold/foldgutter.js","codemirror/addon/fold/xml-fold.js","codemirror/addon/hint/show-hint.js","codemirror/addon/runmode/runmode.js","codemirror/addon/search/searchcursor.js","42","findFirstPrefix","lookFor","tokenUtils","hasPreviousPrefix","getLastPrefixPos","prefixKeywordToken","prefixShortname","prefixUri","prefixStart","stopAt","stopAtNextLine","prefixEndChar","prefixEndLine","nextPrefixDeclaration","43","existingPrefixes","addPrefixAsString","pref","prefixString","lastPrefix","lastPrefixLine","numLines","firstToken","previousIndent","getIndentFromLine","escapeRegex","44","queryMode","Accept","getAcceptHeader","xhrFields","handlerDefined","handler","encodeURIComponent","isEmptyObject","queryStart","updateYasqe","completeCallbacks","ajax","getString","argName","merge","acceptHeader","qType","45","prevToken","46","tooltip","hover","repositionTooltip","47","keyExists","objectToTest","exists","persistentIdCreator","persistencyId","getPositions","elem","comparePositions","p1","p2","r1","r2","pos2"],"mappings":"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OACAC,OACAC,QACAC,QACAC,OACAC,eACAC,WACAC,iBACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAC,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,+BACAC,gDACAvE,KAAA,8CAAA,gDACAa,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAxB,QACA0E,2BACAxE,KAAA,yBAAA,2BACAa,OACAC,OACAhB,OACA0B,YACAC,aACAC,YACAC,SACAC,SACAC,UACAC,SACAf,OACAgB,YACAC,WACAC,UACAC,aACAb,QACAc,SACAC,UACApB,YACAC,SACAC,SACAC,WACAC,UACAE,WACAmD,8BACAC,OAAA,4BAAA,8BACAhC,QACAC,QACAC,OACAJ,OACAC,OACAI,eACAC,WACAC,iBACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAC,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,8BACAzD,OACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAxB,QACA6E,8CACA5D,KAAA,4CAAA,8CACAC,UAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,SAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,MAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAxB,QACA8E,kEACApD,UAAA,gEAAA,kEACAC,WAAA,gEAAA,kEACAC,UAAA,gEAAA,kEACAC,OAAA,gEAAA,kEACAC,OAAA,gEAAA,kEACAC,QAAA,gEAAA,kEACAC,OAAA,gEAAA,kEACAf,KAAA,gEAAA,kEACAgB,UAAA,gEAAA,kEACAC,SAAA,gEAAA,kEACAC,QAAA,gEAAA,kEACAC,WAAA,gEAAA,kEACAb,MAAA,gEAAA,kEACAc,OAAA,gEAAA,kEACAC,QAAA,gEAAA,kEACAtC,QACA+E,6BACAtC,KAAA,2BAAA,6BACA3C,QACAkF,qBACAvC,KAAA,mBAAA,qBACA3C,OACA4C,OACAC,OACAC,QACAC,QACAC,OACAC,eACAC,WACAC,iBACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAC,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,+BACAS,kCACAhF,MAAA,gCAAA,kCACAJ,MACAC,OACAC,OACAC,OACAE,OACAC,uBACAC,uBACAC,uBACAC,uBACAC,4BACAC,4BACAC,4BACAC,4BACAC,eACAC,gBACAsE,mBACAC,OAAA,iBAAA,mBACAnC,SAAA,iBAAA,mBACAE,MAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAG,UAAA,iBAAA,mBACAC,UAAA,iBAAA,mBACAU,iBAAA,iBAAA,mBACAE,iBAAA,iBAAA,mBACAE,sBAAA,iBAAA,mBACAE,sBAAA,iBAAA,mBACAf,SAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAhE,OACAF,QACAsF,kBACAC,MAAA,gBAAA,kBACAvD,SACAC,UACAC,SACAK,SACAC,UACAV,YACAC,SACAZ,OACAgB,YACAC,WACAC,UACAC,aACAb,QACAI,aACAhE,MACA2H,cACA5C,KAAA,YAAA,cACAC,KAAA,YAAA,cACAC,MAAA,YAAA,cACAC,MAAA,YAAA,cACAC,KAAA,YAAA,cACAC,aAAA,YAAA,cACAC,SAAA,YAAA,cACAC,eAAA,YAAA,cACAC,MAAA,YAAA,cACAC,OAAA,YAAA,cACAC,kBAAA,YAAA,cACAC,MAAA,YAAA,cACAC,UAAA,YAAA,cACAC,UAAA,YAAA,cACAC,SAAA,YAAA,cACAC,SAAA,YAAA,cACAC,QAAA,YAAA,cACAC,kBAAA,YAAA,cACAC,kBAAA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iBAAA,mBACAC,QAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,KAAA,iBAAA,mBACA9F,SAAA,iBAAA,mBACAM,UAAA,iBAAA,mBACAC,UAAA,iBAAA,oBACAqH,MACA7J,KAAA,KACA6B,QACAC,QACAC,OACAJ,OACAC,OACAI,eACAC,WACAC,iBACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAC,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,8BACAvD,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAxB,QACA6K,aACAC,UAAA,YACAC,OACApB,OACAC,OACAhH,QACAC,QACAH,OACA+C,OACAC,QACAC,eACAC,YACAC,SACAC,OACAC,OACAC,SACAC,QACAC,OACAC,QACAC,SACAC,SACAC,UACAC,UACAC,SACAC,SACAC,kBACAC,YACAC,aACAC,WACAC,aACAC,YACAC,QACAC,SACAC,OACAC,SACAC,WACAC,WACAC,YACAC,MACAC,OACAC,QACAC,WACAC,OACAC,QACAC,UACAC,UACAC,UACAC,YACAC,MACAC,WACAC,SACAC,YACAC,SACAC,SACAC,WACAC,aACAC,aACAvF,QACAC,SACA6H,SACAC,OACAC,OACAC,OACAC,OACAC,UACAC,gBACA5C,UACAC,WACAC,SACAC,UACAC,OACA9F,WACAC,iBACAO,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAV,YACAC,YACAU,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,8BACA2E,QACAoC,WACAC,QAAA,UACA5I,QACAC,QACAG,WACAC,iBACAF,eACAO,YACAC,aACAkI,mBACA1L,KAAA,kBACAD,QACA4L,0BACA3K,KAAA,yBACAf,OACA0B,YACAC,aACAC,YACAC,SACAC,SACAC,UACAC,SACAf,OACAgB,YACAC,WACAC,UACAC,aACAb,QACAc,SACAC,WACAqJ,sBACA5K,KAAA,qBACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAxB,QACA4L,2BACA1L,KAAA,0BACAJ,QACA+L,sBACAC,QAAA,qBACAjM,OACAkM,aACAlM,IAAA,YACAC,QACAkM,2CACApJ,MAAA,0CACAC,MAAA,0CACAE,aAAA,0CACAkJ,KAAA,0CACA/O,GAAA,0CACA6N,KAAA,0CACArI,KAAA,0CACAM,SAAA,0CACAC,eAAA,0CACAK,UAAA,0CACAC,UAAA,0CACArD,OACAa,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAxB,QACAkM,qDACAhP,GAAA,oDACA+O,KAAA,oDACAjJ,SAAA,oDACAC,eAAA,oDACAK,UAAA,oDACAC,UAAA,oDACAzD,QACAqM,sBACAjP,GAAA,qBACA0F,MAAA,qBACAC,MAAA,qBACAC,KAAA,qBACAC,aAAA,qBACAC,SAAA,qBACAC,eAAA,qBACAC,MAAA,qBACAC,OAAA,qBACAC,kBAAA,qBACAC,MAAA,qBACAC,UAAA,qBACAC,UAAA,qBACAC,SAAA,qBACAC,SAAA,qBACAC,QAAA,qBACAC,kBAAA,qBACAC,kBAAA,qBACAC,iBAAA,qBACAC,kBAAA,qBACAC,kBAAA,qBACAC,iBAAA,qBACAC,iBAAA,qBACAC,uBAAA,qBACAC,iBAAA,qBACAC,uBAAA,qBACAC,sBAAA,qBACAC,4BAAA,qBACAC,sBAAA,qBACAC,4BAAA,qBACAtE,OACAa,OACAC,OACAhB,OACA0B,YACAC,aACAC,YACAC,SACAC,SACAC,UACAC,SACAf,OACAgB,YACAC,WACAC,UACAC,aACAb,QACAc,SACAC,UACApB,YACAC,SACAC,SACAC,WACAC,UACAE,WACA4K,YACAtJ,KAAA,WACAJ,KAAA,WACA7C,MACAC,OACAC,OACAC,OACAC,QACAL,QACAwJ,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAZ,OACAa,OACAC,OACAjG,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAmF,OACA3G,OACAtC,OACAC,uBACAC,uBACAC,uBACAC,uBACAC,4BACAC,4BACAC,4BACAC,4BACAC,eACAC,gBACAyL,qBACAzJ,MAAA,oBACAC,MAAA,oBACAC,KAAA,oBACAJ,KAAA,oBACAC,KAAA,oBACAI,aAAA,oBACAC,SAAA,oBACAC,eAAA,oBACAC,MAAA,oBACAC,OAAA,oBACAC,kBAAA,oBACAC,MAAA,oBACAC,UAAA,oBACAC,UAAA,oBACAC,SAAA,oBACAC,SAAA,oBACAC,QAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAC,iBAAA,oBACAC,uBAAA,oBACAC,iBAAA,oBACAC,uBAAA,oBACAC,sBAAA,oBACAC,4BAAA,oBACAC,sBAAA,oBACAC,4BAAA,oBACAxE,OACA0B,YACAC,aACAC,YACAC,SACAC,SACAC,UACAC,SACAf,OACAgB,YACAC,WACAC,UACAC,aACAb,QACAc,SACAC,WACAgK,gBACAtK,OAAA,eACAL,aACAZ,OACAS,UACAa,SACAC,UACAR,SACAC,UACApE,KACAqC,QACAuM,iBACAxK,QAAA,gBACAJ,aACAZ,OACAS,UACAa,SACAC,UACAR,SACAnE,KACAqC,QACAwM,gBACAnK,OAAA,eACAV,aACAZ,OACAS,UACA7D,KACAqC,QACAyM,uBACApK,OAAA,sBACAC,QAAA,sBACAX,aACAZ,OACAS,UACA7D,KACAqC,QACA0M,iBACApK,QAAA,gBACAX,aACAZ,OACAS,UACA7D,KACAqC,QACA2M,2BACA7B,UAAA,0BACA8B,SAAA,0BACAzD,OACAzG,OACAE,QACAC,SACAgK,8BACAC,SAAA,6BACAC,MAAA,6BACA5H,SACAnC,WACAE,QACAC,SACAG,YACAC,YACAU,mBACAE,mBACAE,wBACAE,wBACAf,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAhE,OACAF,QACAkN,4BACAF,SAAA,2BACAC,MAAA,2BACAlN,MACAC,OACAC,OACAC,OACAC,QACAL,QACAwJ,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAZ,OACAa,OACAC,OACAjG,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAmF,OACA3G,OACAtF,KACA0F,QACAC,QACAC,OACAC,eACAC,WACAC,iBACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,WACAC,WACAC,UACAO,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,8BACA9B,OACAC,OACAsJ,OACAlB,OACAhK,OACAb,OACAC,uBACAC,uBACAC,uBACAC,uBACAC,4BACAC,4BACAC,4BACAC,4BACAC,eACAC,eACAI,OACAU,YACAC,aACAC,YACAC,SACAC,SACAC,UACAC,SACAf,OACAgB,YACAC,WACAC,UACAC,aACAb,QACAc,SACAC,UACApB,YACAC,SACAC,SACAC,WACAC,UACAE,WACAyL,yBACArL,UAAA,wBACAC,OAAA,wBACAZ,QACAiM,kDACA/D,KAAA,iDACA3G,KAAA,iDACAmH,OACAC,OACAjG,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAnE,MACAC,OACAC,OACAC,OACAC,QACAL,QACAwJ,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAZ,OACA5I,OACAC,uBACAC,uBACAC,uBACAC,uBACAC,4BACAC,4BACAC,4BACAC,4BACAC,eACAC,gBACAuM,6LACA/D,KAAA,4LACAC,MAAA,4LACAC,KAAA,4LACAC,KAAA,4LACAC,MAAA,4LACAC,MAAA,4LACAC,IAAA,4LACAZ,KAAA,4LACAjJ,MACAC,OACAC,OACAC,OACAC,QACAL,QACAM,OACAC,uBACAC,uBACAC,uBACAC,uBACAC,4BACAC,4BACAC,4BACAC,4BACAC,eACAC,gBACAwM,gBACAtL,OAAA,eACAH,aACAZ,OACAS,UACAa,SACAC,UACA3E,KACAqC,QACAqN,YACAlE,KAAA,WACAmE,KAAA,WACA3D,KAAA,WACA1I,KAAA,WACAwB,OACAD,OACA1C,OACA4C,OACAC,OACAC,QACAC,QACAC,OACAC,eACAC,WACAC,iBACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAC,mBACAC,yBACAC,mBACAC,yBACAC,wBACAC,8BACAC,wBACAC,+BACA+I,iBACA3K,MAAA,gBACAC,MAAA,gBACAC,KAAA,gBACAJ,KAAA,gBACAC,KAAA,gBACAI,aAAA,gBACAC,SAAA,gBACAC,eAAA,gBACAC,MAAA,gBACAC,OAAA,gBACAC,kBAAA,gBACAC,MAAA,gBACAC,UAAA,gBACAC,UAAA,gBACAC,SAAA,gBACAC,SAAA,gBACAC,QAAA,gBACAC,kBAAA,gBACAC,kBAAA,gBACAC,iBAAA,gBACAC,kBAAA,gBACAC,kBAAA,gBACAC,iBAAA,gBACAC,iBAAA,gBACAC,uBAAA,gBACAC,iBAAA,gBACAC,uBAAA,gBACAC,sBAAA,gBACAC,4BAAA,gBACAC,sBAAA,gBACAC,4BAAA,gBACAvD,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAxB,QACAwN,gBACA5L,UAAA,eACAC,OAAA,eACAZ,KAAA,eACAa,SACAC,UACAC,SACAK,SACAC,UACAX,aACAZ,OACApD,MACA8P,0BACA/K,KAAA,IAAA,kBAAA,MACAgL,eACAhL,KAAA,IAAA,OAAA,MACAiL,qBACAjL,KAAA,IAAA,aAAA,MACAkL,4BACAlL,KAAA,IAAA,aAAA,KAAA,MAAA,MACAmL,0BACAxE,MAAA,KAAA,sBACAyE,qBACAlO,MAAA,KAAA,iBACAmO,uBACA5E,KAAA,IAAA,oBACA6E,gCACArE,KAAA,IAAA,6BACAsE,kBACAlO,KAAA,IAAA,eACAmO,iBACAnO,KAAA,IAAA,UAAA,MACAoO,kBACApO,KAAA,IAAA,eACAqO,cACArO,KAAA,IAAA,WACAsO,2BACAtO,KAAA,IAAA,wBACAuO,gCACA1E,KAAA,IAAA,6BACA2E,yBACAxN,KAAA,IAAA,sBACAyN,qBACAzN,KAAA,IAAA,kBACA0N,wBACAjM,KAAA,IAAA,qBACAkM,uBACAlM,KAAA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","file":"yasqe.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n/*\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\n  http://benalman.com/projects/jquery-bbq-plugin/\n*/\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n$.deparam = function(params, coerce) {\n  var obj = {}, coerce_types = { true: !0, false: !1, null: null };\n\n  // Iterate over all name=value pairs.\n  $.each(params.replace(/\\+/g, \" \").split(\"&\"), function(j, v) {\n    var param = v.split(\"=\"),\n      key = decodeURIComponent(param[0]),\n      val,\n      cur = obj,\n      i = 0,\n      // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n      // into its component parts.\n      keys = key.split(\"][\"),\n      keys_last = keys.length - 1;\n\n    // If the first keys part contains [ and the last ends with ], then []\n    // are correctly balanced.\n    if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\n      // Remove the trailing ] from the last keys part.\n      keys[keys_last] = keys[keys_last].replace(/\\]$/, \"\");\n\n      // Split first keys part into two parts on the [ and add them back onto\n      // the beginning of the keys array.\n      keys = keys.shift().split(\"[\").concat(keys);\n\n      keys_last = keys.length - 1;\n    } else {\n      // Basic 'foo' style key.\n      keys_last = 0;\n    }\n\n    // Are we dealing with a name=value pair, or just a name?\n    if (param.length === 2) {\n      val = decodeURIComponent(param[1]);\n\n      // Coerce values.\n      if (coerce) {\n        val = val && !isNaN(val)\n          ? +val // number\n          : val === \"undefined\"\n              ? undefined // undefined\n              : coerce_types[val] !== undefined\n                  ? coerce_types[val] // true, false, null\n                  : val; // string\n      }\n\n      if (keys_last) {\n        // Complex key, build deep object structure based on a few rules:\n        // * The 'cur' pointer starts at the object top-level.\n        // * [] = array push (n is set to array length), [n] = array if n is\n        //   numeric, otherwise object.\n        // * If at the last keys part, set the value.\n        // * For each keys part, if the current level is undefined create an\n        //   object or array based on the type of the next keys part.\n        // * Move the 'cur' pointer to the next level.\n        // * Rinse & repeat.\n        for (; i <= keys_last; i++) {\n          key = keys[i] === \"\" ? cur.length : keys[i];\n          cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;\n        }\n      } else {\n        // Simple key, even simpler rules, since only scalars and shallow\n        // arrays are allowed.\n\n        if ($.isArray(obj[key])) {\n          // val is already an array, so push on the next value.\n          obj[key].push(val);\n        } else if (obj[key] !== undefined) {\n          // val isn't an array, but since a second value has been specified,\n          // convert val into an array.\n          obj[key] = [obj[key], val];\n        } else {\n          // val is a scalar.\n          obj[key] = val;\n        }\n      }\n    } else if (key) {\n      // No value was defined, so set something meaningful.\n      obj[key] = coerce ? undefined : \"\";\n    }\n  });\n\n  return obj;\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.YASQE = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n/*\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\n  http://benalman.com/projects/jquery-bbq-plugin/\n*/\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n$.deparam = function(params, coerce) {\n  var obj = {}, coerce_types = { true: !0, false: !1, null: null };\n\n  // Iterate over all name=value pairs.\n  $.each(params.replace(/\\+/g, \" \").split(\"&\"), function(j, v) {\n    var param = v.split(\"=\"),\n      key = decodeURIComponent(param[0]),\n      val,\n      cur = obj,\n      i = 0,\n      // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n      // into its component parts.\n      keys = key.split(\"][\"),\n      keys_last = keys.length - 1;\n\n    // If the first keys part contains [ and the last ends with ], then []\n    // are correctly balanced.\n    if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\n      // Remove the trailing ] from the last keys part.\n      keys[keys_last] = keys[keys_last].replace(/\\]$/, \"\");\n\n      // Split first keys part into two parts on the [ and add them back onto\n      // the beginning of the keys array.\n      keys = keys.shift().split(\"[\").concat(keys);\n\n      keys_last = keys.length - 1;\n    } else {\n      // Basic 'foo' style key.\n      keys_last = 0;\n    }\n\n    // Are we dealing with a name=value pair, or just a name?\n    if (param.length === 2) {\n      val = decodeURIComponent(param[1]);\n\n      // Coerce values.\n      if (coerce) {\n        val = val && !isNaN(val)\n          ? +val // number\n          : val === \"undefined\"\n              ? undefined // undefined\n              : coerce_types[val] !== undefined\n                  ? coerce_types[val] // true, false, null\n                  : val; // string\n      }\n\n      if (keys_last) {\n        // Complex key, build deep object structure based on a few rules:\n        // * The 'cur' pointer starts at the object top-level.\n        // * [] = array push (n is set to array length), [n] = array if n is\n        //   numeric, otherwise object.\n        // * If at the last keys part, set the value.\n        // * For each keys part, if the current level is undefined create an\n        //   object or array based on the type of the next keys part.\n        // * Move the 'cur' pointer to the next level.\n        // * Rinse & repeat.\n        for (; i <= keys_last; i++) {\n          key = keys[i] === \"\" ? cur.length : keys[i];\n          cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;\n        }\n      } else {\n        // Simple key, even simpler rules, since only scalars and shallow\n        // arrays are allowed.\n\n        if ($.isArray(obj[key])) {\n          // val is already an array, so push on the next value.\n          obj[key].push(val);\n        } else if (obj[key] !== undefined) {\n          // val isn't an array, but since a second value has been specified,\n          // convert val into an array.\n          obj[key] = [obj[key], val];\n        } else {\n          // val is a scalar.\n          obj[key] = val;\n        }\n      }\n    } else if (key) {\n      // No value was defined, so set something meaningful.\n      obj[key] = coerce ? undefined : \"\";\n    }\n  });\n\n  return obj;\n};\n\n},{\"jquery\":undefined}],2:[function(require,module,exports){\nmodule.exports = {table:\n{\n  \"*[&&,valueLogical]\" : {\n     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*[,,expression]\" : {\n     \",\": [\"[,,expression]\",\"*[,,expression]\"], \n     \")\": []}, \n  \"*[,,objectPath]\" : {\n     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[,,object]\" : {\n     \",\": [\"[,,object]\",\"*[,,object]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"*[/,pathEltOrInverse]\" : {\n     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \n     \"|\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": []}, \n  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[;,?[verb,objectList]]\" : {\n     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"*[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": []}, \n  \"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\" : {\n     \"GENERATE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"CONSTRUCT\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHEREVER\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHERE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ORDER\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"HAVING\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"GROUP\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"{\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATOR\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"SOURCE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LOOK UP\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"BIND\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LIMIT\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"OFFSET\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"}\": []}, \n  \"*[|,pathOneInPropertySet]\" : {\n     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \n     \")\": []}, \n  \"*[|,pathSequence]\" : {\n     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": []}, \n  \"*[||,conditionalAndExpression]\" : {\n     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*dataBlockValue\" : {\n     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"}\": [], \n     \")\": []}, \n  \"*datasetClause\" : {\n     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"CONSTRUCT\": [], \n     \"$\": []}, \n  \"*graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"START_XEXPR\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF_START\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\",\"*graphNode\"], \n     \")\": []}, \n  \"*graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"START_XEXPR\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \")\": []}, \n  \"*groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*iteratorOrSourceClause\" : {\n     \"ITERATOR\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"ITERATE\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"SOURCE\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"LOOK UP\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"BIND\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"$\": []}, \n  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"}\": []}, \n  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"FROM\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"*or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"{\": []}, \n  \"*orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*var\" : {\n     \"VAR1\": [\"var\",\"*var\"], \n     \"VAR2\": [\"var\",\"*var\"], \n     \")\": []}, \n  \"+graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"START_XEXPR\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF_START\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\",\"*graphNode\"]}, \n  \"+graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"START_XEXPR\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\",\"*graphNodePath\"]}, \n  \"+groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \n  \"+havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \n  \"+or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \n  \"+orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \n  \"?.\" : {\n     \".\": [\".\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?DISTINCT\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"!\": [], \n     \"+\": [], \n     \"-\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"(\": [], \n     \"STR\": [], \n     \"LANG\": [], \n     \"LANGMATCHES\": [], \n     \"DATATYPE\": [], \n     \"BOUND\": [], \n     \"IRI\": [], \n     \"URI\": [], \n     \"BNODE\": [], \n     \"RAND\": [], \n     \"ABS\": [], \n     \"CEIL\": [], \n     \"FLOOR\": [], \n     \"ROUND\": [], \n     \"CONCAT\": [], \n     \"STRLEN\": [], \n     \"UCASE\": [], \n     \"LCASE\": [], \n     \"ENCODE_FOR_URI\": [], \n     \"CONTAINS\": [], \n     \"STRSTARTS\": [], \n     \"STRENDS\": [], \n     \"STRBEFORE\": [], \n     \"STRAFTER\": [], \n     \"YEAR\": [], \n     \"MONTH\": [], \n     \"DAY\": [], \n     \"HOURS\": [], \n     \"MINUTES\": [], \n     \"SECONDS\": [], \n     \"TIMEZONE\": [], \n     \"TZ\": [], \n     \"NOW\": [], \n     \"UUID\": [], \n     \"STRUUID\": [], \n     \"MD5\": [], \n     \"SHA1\": [], \n     \"SHA256\": [], \n     \"SHA384\": [], \n     \"SHA512\": [], \n     \"COALESCE\": [], \n     \"IF\": [], \n     \"STRLANG\": [], \n     \"STRDT\": [], \n     \"SAMETERM\": [], \n     \"ISIRI\": [], \n     \"ISURI\": [], \n     \"ISBLANK\": [], \n     \"ISLITERAL\": [], \n     \"ISNUMERIC\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"COUNT\": [], \n     \"SUM\": [], \n     \"MIN\": [], \n     \"MAX\": [], \n     \"AVG\": [], \n     \"SAMPLE\": [], \n     \"GROUP_CONCAT\": [], \n     \"SUBSTR\": [], \n     \"REPLACE\": [], \n     \"REGEX\": [], \n     \"EXISTS\": [], \n     \"NOT\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"*\": []}, \n  \"?SILENT\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"START_XEXPR\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?[,,expression]\" : {\n     \",\": [\"[,,expression]\"], \n     \")\": []}, \n  \"?[.,?constructTriples]\" : {\n     \".\": [\"[.,?constructTriples]\"], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"?[.,?triplesBlock]\" : {\n     \".\": [\"[.,?triplesBlock]\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[;,SEPARATOR,=,string]\" : {\n     \";\": [\"[;,SEPARATOR,=,string]\"], \n     \")\": []}, \n  \"?[ACCEPT,varOrIri]\" : {\n     \"ACCEPT\": [\"[ACCEPT,varOrIri]\"], \n     \"AS\": []}, \n  \"?[AS,var]\" : {\n     \"AS\": [\"[AS,var]\"], \n     \")\": []}, \n  \"?[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"START_XEXPR\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"IRI_REF_START\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"IRI_REF_START\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \")\": []}, \n  \"?[verb,objectList]\" : {\n     \"a\": [\"[verb,objectList]\"], \n     \"VAR1\": [\"[verb,objectList]\"], \n     \"VAR2\": [\"[verb,objectList]\"], \n     \"NIL\": [\"[verb,objectList]\"], \n     \"START_XEXPR\": [\"[verb,objectList]\"], \n     \"IRI_REF\": [\"[verb,objectList]\"], \n     \"IRI_REF_START\": [\"[verb,objectList]\"], \n     \"TRUE\": [\"[verb,objectList]\"], \n     \"FALSE\": [\"[verb,objectList]\"], \n     \"BLANK_NODE_LABEL\": [\"[verb,objectList]\"], \n     \"ANON\": [\"[verb,objectList]\"], \n     \"PNAME_LN\": [\"[verb,objectList]\"], \n     \"PNAME_NS\": [\"[verb,objectList]\"], \n     \"INTEGER\": [\"[verb,objectList]\"], \n     \"DECIMAL\": [\"[verb,objectList]\"], \n     \"DOUBLE\": [\"[verb,objectList]\"], \n     \"INTEGER_POSITIVE\": [\"[verb,objectList]\"], \n     \"DECIMAL_POSITIVE\": [\"[verb,objectList]\"], \n     \"DOUBLE_POSITIVE\": [\"[verb,objectList]\"], \n     \"INTEGER_NEGATIVE\": [\"[verb,objectList]\"], \n     \"DECIMAL_NEGATIVE\": [\"[verb,objectList]\"], \n     \"DOUBLE_NEGATIVE\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL1\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL1_START\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL2\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL2_START\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG1\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG2\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"[verb,objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"?argList\" : {\n     \"NIL\": [\"argList\"], \n     \"(\": [\"argList\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"*\": [], \n     \"/\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"?constructTriples\" : {\n     \"VAR1\": [\"constructTriples\"], \n     \"VAR2\": [\"constructTriples\"], \n     \"NIL\": [\"constructTriples\"], \n     \"(\": [\"constructTriples\"], \n     \"[\": [\"constructTriples\"], \n     \"START_XEXPR\": [\"constructTriples\"], \n     \"IRI_REF\": [\"constructTriples\"], \n     \"IRI_REF_START\": [\"constructTriples\"], \n     \"TRUE\": [\"constructTriples\"], \n     \"FALSE\": [\"constructTriples\"], \n     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \n     \"ANON\": [\"constructTriples\"], \n     \"PNAME_LN\": [\"constructTriples\"], \n     \"PNAME_NS\": [\"constructTriples\"], \n     \"INTEGER\": [\"constructTriples\"], \n     \"DECIMAL\": [\"constructTriples\"], \n     \"DOUBLE\": [\"constructTriples\"], \n     \"INTEGER_POSITIVE\": [\"constructTriples\"], \n     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \n     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \n     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \n     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \n     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \n     \"STRING_LITERAL1\": [\"constructTriples\"], \n     \"STRING_LITERAL1_START\": [\"constructTriples\"], \n     \"STRING_LITERAL2\": [\"constructTriples\"], \n     \"STRING_LITERAL2_START\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG1_START\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG2_START\": [\"constructTriples\"], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"?groupClause\" : {\n     \"GROUP\": [\"groupClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?havingClause\" : {\n     \"HAVING\": [\"havingClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?limitClause\" : {\n     \"LIMIT\": [\"limitClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitOffsetClauses\"], \n     \"OFFSET\": [\"limitOffsetClauses\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?offsetClause\" : {\n     \"OFFSET\": [\"offsetClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \n     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \n     \"*\": [], \n     \"(\": [], \n     \"VAR1\": [], \n     \"VAR2\": []}, \n  \"?or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"UNDEF\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"}\": [], \n     \")\": []}, \n  \"?or([LANGTAG,[^^,xiri]])\" : {\n     \"LANGTAG\": [\"or([LANGTAG,[^^,xiri]])\"], \n     \"^^\": [\"or([LANGTAG,[^^,xiri]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"*\": [], \n     \"/\": [], \n     \"a\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"(\": [], \n     \"[\": [], \n     \"^\": [], \n     \"!\": [], \n     \".\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": [], \n     \"]\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"?or([WHEREVER,WHERE])\" : {\n     \"WHEREVER\": [\"or([WHEREVER,WHERE])\"], \n     \"WHERE\": [\"or([WHEREVER,WHERE])\"], \n     \"{\": []}, \n  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"?orderClause\" : {\n     \"ORDER\": [\"orderClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?pathMod\" : {\n     \"*\": [\"pathMod\"], \n     \"?\": [\"pathMod\"], \n     \"+\": [\"pathMod\"], \n     \"{\": [\"pathMod\"], \n     \"|\": [], \n     \"/\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": []}, \n  \"?triplesBlock\" : {\n     \"VAR1\": [\"triplesBlock\"], \n     \"VAR2\": [\"triplesBlock\"], \n     \"NIL\": [\"triplesBlock\"], \n     \"(\": [\"triplesBlock\"], \n     \"[\": [\"triplesBlock\"], \n     \"START_XEXPR\": [\"triplesBlock\"], \n     \"IRI_REF\": [\"triplesBlock\"], \n     \"IRI_REF_START\": [\"triplesBlock\"], \n     \"TRUE\": [\"triplesBlock\"], \n     \"FALSE\": [\"triplesBlock\"], \n     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \n     \"ANON\": [\"triplesBlock\"], \n     \"PNAME_LN\": [\"triplesBlock\"], \n     \"PNAME_NS\": [\"triplesBlock\"], \n     \"INTEGER\": [\"triplesBlock\"], \n     \"DECIMAL\": [\"triplesBlock\"], \n     \"DOUBLE\": [\"triplesBlock\"], \n     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \n     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \n     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \n     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \n     \"STRING_LITERAL1\": [\"triplesBlock\"], \n     \"STRING_LITERAL1_START\": [\"triplesBlock\"], \n     \"STRING_LITERAL2\": [\"triplesBlock\"], \n     \"STRING_LITERAL2_START\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG1_START\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG2_START\": [\"triplesBlock\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?whereClause\" : {\n     \"WHEREVER\": [\"whereClause\"], \n     \"WHERE\": [\"whereClause\"], \n     \"{\": [\"whereClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"$\": []}, \n  \"[ (,*dataBlockValue,)]\" : {\n     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \n  \"[ (,*var,)]\" : {\n     \"(\": [\"(\",\"*var\",\")\"]}, \n  \"[ (,expression,)]\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"[ (,expression,AS,var,)]\" : {\n     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"[!=,numericExpression]\" : {\n     \"!=\": [\"!=\",\"numericExpression\"]}, \n  \"[&&,valueLogical]\" : {\n     \"&&\": [\"&&\",\"valueLogical\"]}, \n  \"[*,unaryExpression]\" : {\n     \"*\": [\"*\",\"unaryExpression\"]}, \n  \"[+,multiplicativeExpression]\" : {\n     \"+\": [\"+\",\"multiplicativeExpression\"]}, \n  \"[,,expression]\" : {\n     \",\": [\",\",\"expression\"]}, \n  \"[,,integer,}]\" : {\n     \",\": [\",\",\"integer\",\"}\"]}, \n  \"[,,objectPath]\" : {\n     \",\": [\",\",\"objectPath\"]}, \n  \"[,,object]\" : {\n     \",\": [\",\",\"object\"]}, \n  \"[,,or([},[integer,}]])]\" : {\n     \",\": [\",\",\"or([},[integer,}]])\"]}, \n  \"[-,multiplicativeExpression]\" : {\n     \"-\": [\"-\",\"multiplicativeExpression\"]}, \n  \"[.,?constructTriples]\" : {\n     \".\": [\".\",\"?constructTriples\"]}, \n  \"[.,?triplesBlock]\" : {\n     \".\": [\".\",\"?triplesBlock\"]}, \n  \"[/,pathEltOrInverse]\" : {\n     \"/\": [\"/\",\"pathEltOrInverse\"]}, \n  \"[/,unaryExpression]\" : {\n     \"/\": [\"/\",\"unaryExpression\"]}, \n  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \n  \"[;,?[verb,objectList]]\" : {\n     \";\": [\";\",\"?[verb,objectList]\"]}, \n  \"[;,SEPARATOR,=,string]\" : {\n     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \n  \"[<,numericExpression]\" : {\n     \"<\": [\"<\",\"numericExpression\"]}, \n  \"[<=,numericExpression]\" : {\n     \"<=\": [\"<=\",\"numericExpression\"]}, \n  \"[=,numericExpression]\" : {\n     \"=\": [\"=\",\"numericExpression\"]}, \n  \"[>,numericExpression]\" : {\n     \">\": [\">\",\"numericExpression\"]}, \n  \"[>=,numericExpression]\" : {\n     \">=\": [\">=\",\"numericExpression\"]}, \n  \"[ACCEPT,varOrIri]\" : {\n     \"ACCEPT\": [\"ACCEPT\",\"varOrIri\"]}, \n  \"[AS,var]\" : {\n     \"AS\": [\"AS\",\"var\"]}, \n  \"[IN,expressionList]\" : {\n     \"IN\": [\"IN\",\"expressionList\"]}, \n  \"[IRI_REF_START,xiri_Sub]\" : {\n     \"IRI_REF_START\": [\"IRI_REF_START\",\"xiri_Sub\"]}, \n  \"[IRI_REF_SUB,xiri_Sub]\" : {\n     \"IRI_REF_SUB\": [\"IRI_REF_SUB\",\"xiri_Sub\"]}, \n  \"[NOT,IN,expressionList]\" : {\n     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \n  \"[STRING_LITERAL1_START,xString_Literal1_Sub]\" : {\n     \"STRING_LITERAL1_START\": [\"STRING_LITERAL1_START\",\"xString_Literal1_Sub\"]}, \n  \"[STRING_LITERAL1_SUB,xString_Literal1_Sub]\" : {\n     \"STRING_LITERAL1_SUB\": [\"STRING_LITERAL1_SUB\",\"xString_Literal1_Sub\"]}, \n  \"[STRING_LITERAL2_START,xString_Literal2_Sub]\" : {\n     \"STRING_LITERAL2_START\": [\"STRING_LITERAL2_START\",\"xString_Literal2_Sub\"]}, \n  \"[STRING_LITERAL2_SUB,xString_Literal2_Sub]\" : {\n     \"STRING_LITERAL2_SUB\": [\"STRING_LITERAL2_SUB\",\"xString_Literal2_Sub\"]}, \n  \"[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]\" : {\n     \"STRING_LITERAL_LONG1_START\": [\"STRING_LITERAL_LONG1_START\",\"xString_Literal_Long1_Sub\"]}, \n  \"[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]\" : {\n     \"STRING_LITERAL_LONG1_SUB\": [\"STRING_LITERAL_LONG1_SUB\",\"xString_Literal_Long1_Sub\"]}, \n  \"[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]\" : {\n     \"STRING_LITERAL_LONG2_START\": [\"STRING_LITERAL_LONG2_START\",\"xString_Literal_Long2_Sub\"]}, \n  \"[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]\" : {\n     \"STRING_LITERAL_LONG2_SUB\": [\"STRING_LITERAL_LONG2_SUB\",\"xString_Literal_Long2_Sub\"]}, \n  \"[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \n  \"[^^,iriRef]\" : {\n     \"^^\": [\"^^\",\"iriRef\"]}, \n  \"[^^,xiri]\" : {\n     \"^^\": [\"^^\",\"xiri\"]}, \n  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \n  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\n     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \n  \"[integer,}]\" : {\n     \"INTEGER\": [\"integer\",\"}\"]}, \n  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\n     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\" : {\n     \"GENERATE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"CONSTRUCT\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"WHEREVER\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"WHERE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"ORDER\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"HAVING\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"GROUP\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"{\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"ITERATOR\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"ITERATE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"SOURCE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"LOOK UP\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"BIND\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"LIMIT\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"OFFSET\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"]}, \n  \"[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"START_XEXPR\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"IRI_REF_START\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \n  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"IRI_REF_START\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \n  \"[verb,objectList]\" : {\n     \"a\": [\"verb\",\"objectList\"], \n     \"VAR1\": [\"verb\",\"objectList\"], \n     \"VAR2\": [\"verb\",\"objectList\"], \n     \"NIL\": [\"verb\",\"objectList\"], \n     \"START_XEXPR\": [\"verb\",\"objectList\"], \n     \"IRI_REF\": [\"verb\",\"objectList\"], \n     \"IRI_REF_START\": [\"verb\",\"objectList\"], \n     \"TRUE\": [\"verb\",\"objectList\"], \n     \"FALSE\": [\"verb\",\"objectList\"], \n     \"BLANK_NODE_LABEL\": [\"verb\",\"objectList\"], \n     \"ANON\": [\"verb\",\"objectList\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\"], \n     \"INTEGER\": [\"verb\",\"objectList\"], \n     \"DECIMAL\": [\"verb\",\"objectList\"], \n     \"DOUBLE\": [\"verb\",\"objectList\"], \n     \"INTEGER_POSITIVE\": [\"verb\",\"objectList\"], \n     \"DECIMAL_POSITIVE\": [\"verb\",\"objectList\"], \n     \"DOUBLE_POSITIVE\": [\"verb\",\"objectList\"], \n     \"INTEGER_NEGATIVE\": [\"verb\",\"objectList\"], \n     \"DECIMAL_NEGATIVE\": [\"verb\",\"objectList\"], \n     \"DOUBLE_NEGATIVE\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL1\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL1_START\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL2\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL2_START\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG1\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG1_START\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG2\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG2_START\": [\"verb\",\"objectList\"]}, \n  \"[|,pathOneInPropertySet]\" : {\n     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \n  \"[|,pathSequence]\" : {\n     \"|\": [\"|\",\"pathSequence\"]}, \n  \"[||,conditionalAndExpression]\" : {\n     \"||\": [\"||\",\"conditionalAndExpression\"]}, \n  \"additiveExpression\" : {\n     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI_REF_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL1_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL2_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \n  \"aggregate\" : {\n     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \n     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \n  \"argList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"baseDecl\" : {\n     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \n  \"bind\" : {\n     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"blankNode\" : {\n     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \n     \"ANON\": [\"ANON\"]}, \n  \"blankNodePropertyList\" : {\n     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \n  \"blankNodePropertyListPath\" : {\n     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \n  \"booleanLiteral\" : {\n     \"TRUE\": [\"TRUE\"], \n     \"FALSE\": [\"FALSE\"]}, \n  \"brackettedExpression\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"builtInCall\" : {\n     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \n     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \n     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \n     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \n     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \n     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \n     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \n     \"RAND\": [\"RAND\",\"NIL\"], \n     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \n     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \n     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \n     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \n     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \n     \"SUBSTR\": [\"substringExpression\"], \n     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \n     \"REPLACE\": [\"strReplaceExpression\"], \n     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \n     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \n     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \n     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \n     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \n     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \n     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \n     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \n     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \n     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \n     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \n     \"NOW\": [\"NOW\",\"NIL\"], \n     \"UUID\": [\"UUID\",\"NIL\"], \n     \"STRUUID\": [\"STRUUID\",\"NIL\"], \n     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \n     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \n     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \n     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \n     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \n     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \n     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \n     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \n     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \n     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \n     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \n     \"REGEX\": [\"regexExpression\"], \n     \"EXISTS\": [\"existsFunc\"], \n     \"NOT\": [\"notExistsFunc\"]}, \n  \"collection\" : {\n     \"(\": [\"(\",\"+graphNode\",\")\"]}, \n  \"collectionPath\" : {\n     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \n  \"conditionalAndExpression\" : {\n     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI_REF_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL1_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL2_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \n  \"conditionalOrExpression\" : {\n     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI_REF_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL1_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL2_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \n  \"constraint\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"]}, \n  \"constructTriples\" : {\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"START_XEXPR\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"IRI_REF_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL1_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL2_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \n  \"dataBlock\" : {\n     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \n  \"dataBlockValue\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"UNDEF\": [\"UNDEF\"]}, \n  \"datasetClause\" : {\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n  \"defaultGraphClause\" : {\n     \"IRI_REF\": [\"sourceSelector\"], \n     \"PNAME_LN\": [\"sourceSelector\"], \n     \"PNAME_NS\": [\"sourceSelector\"]}, \n  \"existsFunc\" : {\n     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \n  \"expression\" : {\n     \"!\": [\"conditionalOrExpression\"], \n     \"+\": [\"conditionalOrExpression\"], \n     \"-\": [\"conditionalOrExpression\"], \n     \"VAR1\": [\"conditionalOrExpression\"], \n     \"VAR2\": [\"conditionalOrExpression\"], \n     \"(\": [\"conditionalOrExpression\"], \n     \"STR\": [\"conditionalOrExpression\"], \n     \"LANG\": [\"conditionalOrExpression\"], \n     \"LANGMATCHES\": [\"conditionalOrExpression\"], \n     \"DATATYPE\": [\"conditionalOrExpression\"], \n     \"BOUND\": [\"conditionalOrExpression\"], \n     \"IRI\": [\"conditionalOrExpression\"], \n     \"URI\": [\"conditionalOrExpression\"], \n     \"BNODE\": [\"conditionalOrExpression\"], \n     \"RAND\": [\"conditionalOrExpression\"], \n     \"ABS\": [\"conditionalOrExpression\"], \n     \"CEIL\": [\"conditionalOrExpression\"], \n     \"FLOOR\": [\"conditionalOrExpression\"], \n     \"ROUND\": [\"conditionalOrExpression\"], \n     \"CONCAT\": [\"conditionalOrExpression\"], \n     \"STRLEN\": [\"conditionalOrExpression\"], \n     \"UCASE\": [\"conditionalOrExpression\"], \n     \"LCASE\": [\"conditionalOrExpression\"], \n     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \n     \"CONTAINS\": [\"conditionalOrExpression\"], \n     \"STRSTARTS\": [\"conditionalOrExpression\"], \n     \"STRENDS\": [\"conditionalOrExpression\"], \n     \"STRBEFORE\": [\"conditionalOrExpression\"], \n     \"STRAFTER\": [\"conditionalOrExpression\"], \n     \"YEAR\": [\"conditionalOrExpression\"], \n     \"MONTH\": [\"conditionalOrExpression\"], \n     \"DAY\": [\"conditionalOrExpression\"], \n     \"HOURS\": [\"conditionalOrExpression\"], \n     \"MINUTES\": [\"conditionalOrExpression\"], \n     \"SECONDS\": [\"conditionalOrExpression\"], \n     \"TIMEZONE\": [\"conditionalOrExpression\"], \n     \"TZ\": [\"conditionalOrExpression\"], \n     \"NOW\": [\"conditionalOrExpression\"], \n     \"UUID\": [\"conditionalOrExpression\"], \n     \"STRUUID\": [\"conditionalOrExpression\"], \n     \"MD5\": [\"conditionalOrExpression\"], \n     \"SHA1\": [\"conditionalOrExpression\"], \n     \"SHA256\": [\"conditionalOrExpression\"], \n     \"SHA384\": [\"conditionalOrExpression\"], \n     \"SHA512\": [\"conditionalOrExpression\"], \n     \"COALESCE\": [\"conditionalOrExpression\"], \n     \"IF\": [\"conditionalOrExpression\"], \n     \"STRLANG\": [\"conditionalOrExpression\"], \n     \"STRDT\": [\"conditionalOrExpression\"], \n     \"SAMETERM\": [\"conditionalOrExpression\"], \n     \"ISIRI\": [\"conditionalOrExpression\"], \n     \"ISURI\": [\"conditionalOrExpression\"], \n     \"ISBLANK\": [\"conditionalOrExpression\"], \n     \"ISLITERAL\": [\"conditionalOrExpression\"], \n     \"ISNUMERIC\": [\"conditionalOrExpression\"], \n     \"TRUE\": [\"conditionalOrExpression\"], \n     \"FALSE\": [\"conditionalOrExpression\"], \n     \"COUNT\": [\"conditionalOrExpression\"], \n     \"SUM\": [\"conditionalOrExpression\"], \n     \"MIN\": [\"conditionalOrExpression\"], \n     \"MAX\": [\"conditionalOrExpression\"], \n     \"AVG\": [\"conditionalOrExpression\"], \n     \"SAMPLE\": [\"conditionalOrExpression\"], \n     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \n     \"SUBSTR\": [\"conditionalOrExpression\"], \n     \"REPLACE\": [\"conditionalOrExpression\"], \n     \"REGEX\": [\"conditionalOrExpression\"], \n     \"EXISTS\": [\"conditionalOrExpression\"], \n     \"NOT\": [\"conditionalOrExpression\"], \n     \"IRI_REF\": [\"conditionalOrExpression\"], \n     \"IRI_REF_START\": [\"conditionalOrExpression\"], \n     \"INTEGER\": [\"conditionalOrExpression\"], \n     \"DECIMAL\": [\"conditionalOrExpression\"], \n     \"DOUBLE\": [\"conditionalOrExpression\"], \n     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"PNAME_LN\": [\"conditionalOrExpression\"], \n     \"PNAME_NS\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL1_START\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL2_START\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"conditionalOrExpression\"]}, \n  \"expressionList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"filter\" : {\n     \"FILTER\": [\"FILTER\",\"constraint\"]}, \n  \"functionCall\" : {\n     \"IRI_REF\": [\"iriRef\",\"argList\"], \n     \"PNAME_LN\": [\"iriRef\",\"argList\"], \n     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \n  \"generate\" : {\n     \"GENERATE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"CONSTRUCT\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"WHEREVER\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"WHERE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"FROM\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"ORDER\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"HAVING\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"GROUP\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"{\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"ITERATOR\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"ITERATE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"SOURCE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"LOOK UP\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"BIND\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"LIMIT\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"OFFSET\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"BASE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"PREFIX\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"]}, \n  \"generateQuery1\" : {\n     \"GENERATE\": [\"GENERATE\",\"generateTemplate\",\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\"]}, \n  \"generateQuery2\" : {\n     \"CONSTRUCT\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"ORDER\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"HAVING\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"GROUP\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"LIMIT\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"OFFSET\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"WHEREVER\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"WHERE\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"{\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"ITERATOR\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"ITERATE\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"SOURCE\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"LOOK UP\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"BIND\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"FROM\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"]}, \n  \"generateTemplate\" : {\n     \"{\": [\"{\",\"generateTemplateSub\",\"}\"]}, \n  \"generateTemplateSub\" : {\n     \"GENERATE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"CONSTRUCT\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHEREVER\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHERE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ORDER\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"HAVING\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"GROUP\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"{\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATOR\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"SOURCE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LOOK UP\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"BIND\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LIMIT\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"OFFSET\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"VAR1\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"VAR2\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"NIL\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"(\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"[\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"START_XEXPR\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"IRI_REF\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"IRI_REF_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"TRUE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"FALSE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"BLANK_NODE_LABEL\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ANON\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"PNAME_LN\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"PNAME_NS\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"INTEGER\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DECIMAL\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DOUBLE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"INTEGER_POSITIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DECIMAL_POSITIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DOUBLE_POSITIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"INTEGER_NEGATIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DECIMAL_NEGATIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DOUBLE_NEGATIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL1\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL1_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL2\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL2_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG1\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG2\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"}\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"]}, \n  \"generateUnit\" : {\n     \"GENERATE\": [\"generate\"], \n     \"CONSTRUCT\": [\"generate\"], \n     \"WHEREVER\": [\"generate\"], \n     \"WHERE\": [\"generate\"], \n     \"FROM\": [\"generate\"], \n     \"BASE\": [\"generate\"], \n     \"PREFIX\": [\"generate\"], \n     \"ORDER\": [\"generate\"], \n     \"HAVING\": [\"generate\"], \n     \"GROUP\": [\"generate\"], \n     \"{\": [\"generate\"], \n     \"ITERATOR\": [\"generate\"], \n     \"ITERATE\": [\"generate\"], \n     \"SOURCE\": [\"generate\"], \n     \"LOOK UP\": [\"generate\"], \n     \"BIND\": [\"generate\"], \n     \"LIMIT\": [\"generate\"], \n     \"OFFSET\": [\"generate\"]}, \n  \"graphGraphPattern\" : {\n     \"GRAPH\": [\"GRAPH\",\"varOrIri\",\"groupGraphPattern\"]}, \n  \"graphNode\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"START_XEXPR\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"IRI_REF_START\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\"], \n     \"(\": [\"triplesNode\"], \n     \"[\": [\"triplesNode\"]}, \n  \"graphNodePath\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"START_XEXPR\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"IRI_REF_START\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\"], \n     \"(\": [\"triplesNodePath\"], \n     \"[\": [\"triplesNodePath\"]}, \n  \"graphPatternNotTriples\" : {\n     \"{\": [\"groupOrUnionGraphPattern\"], \n     \"OPTIONAL\": [\"optionalGraphPattern\"], \n     \"MINUS\": [\"minusGraphPattern\"], \n     \"GRAPH\": [\"graphGraphPattern\"], \n     \"SERVICE\": [\"serviceGraphPattern\"], \n     \"FILTER\": [\"filter\"], \n     \"BIND\": [\"bind\"], \n     \"VALUES\": [\"inlineData\"]}, \n  \"groupClause\" : {\n     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \n  \"groupCondition\" : {\n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"], \n     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"groupGraphPattern\" : {\n     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \n  \"groupGraphPatternSub\" : {\n     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"START_XEXPR\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"IRI_REF_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL1_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL2_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \n  \"groupOrUnionGraphPattern\" : {\n     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \n  \"havingClause\" : {\n     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \n  \"havingCondition\" : {\n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"]}, \n  \"inlineData\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \n  \"inlineDataFull\" : {\n     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \n     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \n  \"inlineDataOneVar\" : {\n     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \n     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \n  \"integer\" : {\n     \"INTEGER\": [\"INTEGER\"]}, \n  \"iriRef\" : {\n     \"IRI_REF\": [\"IRI_REF\"], \n     \"PNAME_LN\": [\"prefixedName\"], \n     \"PNAME_NS\": [\"prefixedName\"]}, \n  \"iteratorClause\" : {\n     \"ITERATOR\": [\"or([ITERATOR,ITERATE])\",\"functionCall\",\"AS\",\"var\"], \n     \"ITERATE\": [\"or([ITERATOR,ITERATE])\",\"functionCall\",\"AS\",\"var\"]}, \n  \"iteratorOrSourceClause\" : {\n     \"ITERATOR\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"ITERATE\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"SOURCE\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"LOOK UP\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"BIND\": [\"or([iteratorClause,sourceClause,bind])\"]}, \n  \"limitClause\" : {\n     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \n  \"limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \n     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \n  \"minusGraphPattern\" : {\n     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \n  \"multiplicativeExpression\" : {\n     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI_REF_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL1_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL2_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"namedGraphClause\" : {\n     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \n  \"notExistsFunc\" : {\n     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \n  \"numericExpression\" : {\n     \"!\": [\"additiveExpression\"], \n     \"+\": [\"additiveExpression\"], \n     \"-\": [\"additiveExpression\"], \n     \"VAR1\": [\"additiveExpression\"], \n     \"VAR2\": [\"additiveExpression\"], \n     \"(\": [\"additiveExpression\"], \n     \"STR\": [\"additiveExpression\"], \n     \"LANG\": [\"additiveExpression\"], \n     \"LANGMATCHES\": [\"additiveExpression\"], \n     \"DATATYPE\": [\"additiveExpression\"], \n     \"BOUND\": [\"additiveExpression\"], \n     \"IRI\": [\"additiveExpression\"], \n     \"URI\": [\"additiveExpression\"], \n     \"BNODE\": [\"additiveExpression\"], \n     \"RAND\": [\"additiveExpression\"], \n     \"ABS\": [\"additiveExpression\"], \n     \"CEIL\": [\"additiveExpression\"], \n     \"FLOOR\": [\"additiveExpression\"], \n     \"ROUND\": [\"additiveExpression\"], \n     \"CONCAT\": [\"additiveExpression\"], \n     \"STRLEN\": [\"additiveExpression\"], \n     \"UCASE\": [\"additiveExpression\"], \n     \"LCASE\": [\"additiveExpression\"], \n     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \n     \"CONTAINS\": [\"additiveExpression\"], \n     \"STRSTARTS\": [\"additiveExpression\"], \n     \"STRENDS\": [\"additiveExpression\"], \n     \"STRBEFORE\": [\"additiveExpression\"], \n     \"STRAFTER\": [\"additiveExpression\"], \n     \"YEAR\": [\"additiveExpression\"], \n     \"MONTH\": [\"additiveExpression\"], \n     \"DAY\": [\"additiveExpression\"], \n     \"HOURS\": [\"additiveExpression\"], \n     \"MINUTES\": [\"additiveExpression\"], \n     \"SECONDS\": [\"additiveExpression\"], \n     \"TIMEZONE\": [\"additiveExpression\"], \n     \"TZ\": [\"additiveExpression\"], \n     \"NOW\": [\"additiveExpression\"], \n     \"UUID\": [\"additiveExpression\"], \n     \"STRUUID\": [\"additiveExpression\"], \n     \"MD5\": [\"additiveExpression\"], \n     \"SHA1\": [\"additiveExpression\"], \n     \"SHA256\": [\"additiveExpression\"], \n     \"SHA384\": [\"additiveExpression\"], \n     \"SHA512\": [\"additiveExpression\"], \n     \"COALESCE\": [\"additiveExpression\"], \n     \"IF\": [\"additiveExpression\"], \n     \"STRLANG\": [\"additiveExpression\"], \n     \"STRDT\": [\"additiveExpression\"], \n     \"SAMETERM\": [\"additiveExpression\"], \n     \"ISIRI\": [\"additiveExpression\"], \n     \"ISURI\": [\"additiveExpression\"], \n     \"ISBLANK\": [\"additiveExpression\"], \n     \"ISLITERAL\": [\"additiveExpression\"], \n     \"ISNUMERIC\": [\"additiveExpression\"], \n     \"TRUE\": [\"additiveExpression\"], \n     \"FALSE\": [\"additiveExpression\"], \n     \"COUNT\": [\"additiveExpression\"], \n     \"SUM\": [\"additiveExpression\"], \n     \"MIN\": [\"additiveExpression\"], \n     \"MAX\": [\"additiveExpression\"], \n     \"AVG\": [\"additiveExpression\"], \n     \"SAMPLE\": [\"additiveExpression\"], \n     \"GROUP_CONCAT\": [\"additiveExpression\"], \n     \"SUBSTR\": [\"additiveExpression\"], \n     \"REPLACE\": [\"additiveExpression\"], \n     \"REGEX\": [\"additiveExpression\"], \n     \"EXISTS\": [\"additiveExpression\"], \n     \"NOT\": [\"additiveExpression\"], \n     \"IRI_REF\": [\"additiveExpression\"], \n     \"IRI_REF_START\": [\"additiveExpression\"], \n     \"INTEGER\": [\"additiveExpression\"], \n     \"DECIMAL\": [\"additiveExpression\"], \n     \"DOUBLE\": [\"additiveExpression\"], \n     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \n     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \n     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \n     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \n     \"PNAME_LN\": [\"additiveExpression\"], \n     \"PNAME_NS\": [\"additiveExpression\"], \n     \"STRING_LITERAL1\": [\"additiveExpression\"], \n     \"STRING_LITERAL1_START\": [\"additiveExpression\"], \n     \"STRING_LITERAL2\": [\"additiveExpression\"], \n     \"STRING_LITERAL2_START\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"additiveExpression\"]}, \n  \"numericLiteral\" : {\n     \"INTEGER\": [\"numericLiteralUnsigned\"], \n     \"DECIMAL\": [\"numericLiteralUnsigned\"], \n     \"DOUBLE\": [\"numericLiteralUnsigned\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"numericLiteralNegative\" : {\n     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \n     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \n     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \n  \"numericLiteralPositive\" : {\n     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \n     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \n     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \n  \"numericLiteralUnsigned\" : {\n     \"INTEGER\": [\"INTEGER\"], \n     \"DECIMAL\": [\"DECIMAL\"], \n     \"DOUBLE\": [\"DOUBLE\"]}, \n  \"object\" : {\n     \"(\": [\"graphNode\"], \n     \"[\": [\"graphNode\"], \n     \"VAR1\": [\"graphNode\"], \n     \"VAR2\": [\"graphNode\"], \n     \"NIL\": [\"graphNode\"], \n     \"START_XEXPR\": [\"graphNode\"], \n     \"IRI_REF\": [\"graphNode\"], \n     \"IRI_REF_START\": [\"graphNode\"], \n     \"TRUE\": [\"graphNode\"], \n     \"FALSE\": [\"graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\"], \n     \"ANON\": [\"graphNode\"], \n     \"PNAME_LN\": [\"graphNode\"], \n     \"PNAME_NS\": [\"graphNode\"], \n     \"INTEGER\": [\"graphNode\"], \n     \"DECIMAL\": [\"graphNode\"], \n     \"DOUBLE\": [\"graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\"], \n     \"STRING_LITERAL1_START\": [\"graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\"], \n     \"STRING_LITERAL2_START\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\"]}, \n  \"objectList\" : {\n     \"(\": [\"object\",\"*[,,object]\"], \n     \"[\": [\"object\",\"*[,,object]\"], \n     \"VAR1\": [\"object\",\"*[,,object]\"], \n     \"VAR2\": [\"object\",\"*[,,object]\"], \n     \"NIL\": [\"object\",\"*[,,object]\"], \n     \"START_XEXPR\": [\"object\",\"*[,,object]\"], \n     \"IRI_REF\": [\"object\",\"*[,,object]\"], \n     \"IRI_REF_START\": [\"object\",\"*[,,object]\"], \n     \"TRUE\": [\"object\",\"*[,,object]\"], \n     \"FALSE\": [\"object\",\"*[,,object]\"], \n     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \n     \"ANON\": [\"object\",\"*[,,object]\"], \n     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \n     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \n     \"INTEGER\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL1_START\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL2_START\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"object\",\"*[,,object]\"]}, \n  \"objectListPath\" : {\n     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"START_XEXPR\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"IRI_REF_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL1_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL2_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"objectPath\",\"*[,,objectPath]\"]}, \n  \"objectPath\" : {\n     \"(\": [\"graphNodePath\"], \n     \"[\": [\"graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\"], \n     \"NIL\": [\"graphNodePath\"], \n     \"START_XEXPR\": [\"graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\"], \n     \"IRI_REF_START\": [\"graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \n     \"ANON\": [\"graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\"], \n     \"STRING_LITERAL1_START\": [\"graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\"], \n     \"STRING_LITERAL2_START\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\"]}, \n  \"offsetClause\" : {\n     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \n  \"optionalGraphPattern\" : {\n     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \n  \"or([*,expression])\" : {\n     \"*\": [\"*\"], \n     \"!\": [\"expression\"], \n     \"+\": [\"expression\"], \n     \"-\": [\"expression\"], \n     \"VAR1\": [\"expression\"], \n     \"VAR2\": [\"expression\"], \n     \"(\": [\"expression\"], \n     \"STR\": [\"expression\"], \n     \"LANG\": [\"expression\"], \n     \"LANGMATCHES\": [\"expression\"], \n     \"DATATYPE\": [\"expression\"], \n     \"BOUND\": [\"expression\"], \n     \"IRI\": [\"expression\"], \n     \"URI\": [\"expression\"], \n     \"BNODE\": [\"expression\"], \n     \"RAND\": [\"expression\"], \n     \"ABS\": [\"expression\"], \n     \"CEIL\": [\"expression\"], \n     \"FLOOR\": [\"expression\"], \n     \"ROUND\": [\"expression\"], \n     \"CONCAT\": [\"expression\"], \n     \"STRLEN\": [\"expression\"], \n     \"UCASE\": [\"expression\"], \n     \"LCASE\": [\"expression\"], \n     \"ENCODE_FOR_URI\": [\"expression\"], \n     \"CONTAINS\": [\"expression\"], \n     \"STRSTARTS\": [\"expression\"], \n     \"STRENDS\": [\"expression\"], \n     \"STRBEFORE\": [\"expression\"], \n     \"STRAFTER\": [\"expression\"], \n     \"YEAR\": [\"expression\"], \n     \"MONTH\": [\"expression\"], \n     \"DAY\": [\"expression\"], \n     \"HOURS\": [\"expression\"], \n     \"MINUTES\": [\"expression\"], \n     \"SECONDS\": [\"expression\"], \n     \"TIMEZONE\": [\"expression\"], \n     \"TZ\": [\"expression\"], \n     \"NOW\": [\"expression\"], \n     \"UUID\": [\"expression\"], \n     \"STRUUID\": [\"expression\"], \n     \"MD5\": [\"expression\"], \n     \"SHA1\": [\"expression\"], \n     \"SHA256\": [\"expression\"], \n     \"SHA384\": [\"expression\"], \n     \"SHA512\": [\"expression\"], \n     \"COALESCE\": [\"expression\"], \n     \"IF\": [\"expression\"], \n     \"STRLANG\": [\"expression\"], \n     \"STRDT\": [\"expression\"], \n     \"SAMETERM\": [\"expression\"], \n     \"ISIRI\": [\"expression\"], \n     \"ISURI\": [\"expression\"], \n     \"ISBLANK\": [\"expression\"], \n     \"ISLITERAL\": [\"expression\"], \n     \"ISNUMERIC\": [\"expression\"], \n     \"TRUE\": [\"expression\"], \n     \"FALSE\": [\"expression\"], \n     \"COUNT\": [\"expression\"], \n     \"SUM\": [\"expression\"], \n     \"MIN\": [\"expression\"], \n     \"MAX\": [\"expression\"], \n     \"AVG\": [\"expression\"], \n     \"SAMPLE\": [\"expression\"], \n     \"GROUP_CONCAT\": [\"expression\"], \n     \"SUBSTR\": [\"expression\"], \n     \"REPLACE\": [\"expression\"], \n     \"REGEX\": [\"expression\"], \n     \"EXISTS\": [\"expression\"], \n     \"NOT\": [\"expression\"], \n     \"IRI_REF\": [\"expression\"], \n     \"IRI_REF_START\": [\"expression\"], \n     \"INTEGER\": [\"expression\"], \n     \"DECIMAL\": [\"expression\"], \n     \"DOUBLE\": [\"expression\"], \n     \"INTEGER_POSITIVE\": [\"expression\"], \n     \"DECIMAL_POSITIVE\": [\"expression\"], \n     \"DOUBLE_POSITIVE\": [\"expression\"], \n     \"INTEGER_NEGATIVE\": [\"expression\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\"], \n     \"PNAME_LN\": [\"expression\"], \n     \"PNAME_NS\": [\"expression\"], \n     \"STRING_LITERAL1\": [\"expression\"], \n     \"STRING_LITERAL1_START\": [\"expression\"], \n     \"STRING_LITERAL2\": [\"expression\"], \n     \"STRING_LITERAL2_START\": [\"expression\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\"]}, \n  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\n     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"*\": [\"*\"]}, \n  \"or([ASC,DESC])\" : {\n     \"ASC\": [\"ASC\"], \n     \"DESC\": [\"DESC\"]}, \n  \"or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"REDUCED\": [\"REDUCED\"]}, \n  \"or([ITERATOR,ITERATE])\" : {\n     \"ITERATOR\": [\"ITERATOR\"], \n     \"ITERATE\": [\"ITERATE\"]}, \n  \"or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"LANGTAG\"], \n     \"^^\": [\"[^^,iriRef]\"]}, \n  \"or([LANGTAG,[^^,xiri]])\" : {\n     \"LANGTAG\": [\"LANGTAG\"], \n     \"^^\": [\"[^^,xiri]\"]}, \n  \"or([NIL,[ (,*var,)]])\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"[ (,*var,)]\"]}, \n  \"or([SOURCE,LOOK UP])\" : {\n     \"SOURCE\": [\"SOURCE\"], \n     \"LOOK UP\": [\"LOOK UP\"]}, \n  \"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\" : {\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n     \"STRING_LITERAL1_START\": [\"[STRING_LITERAL1_START,xString_Literal1_Sub]\"]}, \n  \"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\" : {\n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n     \"STRING_LITERAL2_START\": [\"[STRING_LITERAL2_START,xString_Literal2_Sub]\"]}, \n  \"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\" : {\n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n     \"STRING_LITERAL_LONG1_START\": [\"[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]\"]}, \n  \"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\" : {\n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"], \n     \"STRING_LITERAL_LONG2_START\": [\"[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]\"]}, \n  \"or([WHEREVER,WHERE])\" : {\n     \"WHEREVER\": [\"WHEREVER\"], \n     \"WHERE\": [\"WHERE\"]}, \n  \"or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"[ (,*dataBlockValue,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[ (,expression,)],NIL])\" : {\n     \"(\": [\"[ (,expression,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"[*,unaryExpression]\"], \n     \"/\": [\"[/,unaryExpression]\"]}, \n  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"[+,multiplicativeExpression]\"], \n     \"-\": [\"[-,multiplicativeExpression]\"], \n     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \n  \"or([[,,or([},[integer,}]])],}])\" : {\n     \",\": [\"[,,or([},[integer,}]])]\"], \n     \"}\": [\"}\"]}, \n  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"[=,numericExpression]\"], \n     \"!=\": [\"[!=,numericExpression]\"], \n     \"<\": [\"[<,numericExpression]\"], \n     \">\": [\"[>,numericExpression]\"], \n     \"<=\": [\"[<=,numericExpression]\"], \n     \">=\": [\"[>=,numericExpression]\"], \n     \"IN\": [\"[IN,expressionList]\"], \n     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \n  \"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\" : {\n     \"IRI_REF_SUB\": [\"[IRI_REF_SUB,xiri_Sub]\"], \n     \"IRI_REF_END\": [\"IRI_REF_END\"]}, \n  \"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\" : {\n     \"STRING_LITERAL1_SUB\": [\"[STRING_LITERAL1_SUB,xString_Literal1_Sub]\"], \n     \"STRING_LITERAL1_END\": [\"STRING_LITERAL1_END\"]}, \n  \"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\" : {\n     \"STRING_LITERAL2_SUB\": [\"[STRING_LITERAL2_SUB,xString_Literal2_Sub]\"], \n     \"STRING_LITERAL2_END\": [\"STRING_LITERAL2_END\"]}, \n  \"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\" : {\n     \"STRING_LITERAL_LONG1_SUB\": [\"[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]\"], \n     \"STRING_LITERAL_LONG1_END\": [\"STRING_LITERAL_LONG1_END\"]}, \n  \"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\" : {\n     \"STRING_LITERAL_LONG2_SUB\": [\"[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]\"], \n     \"STRING_LITERAL_LONG2_END\": [\"STRING_LITERAL_LONG2_END\"]}, \n  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\n     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \n     \",\": [\"[,,integer,}]\"]}, \n  \"or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"baseDecl\"], \n     \"PREFIX\": [\"prefixDecl\"]}, \n  \"or([defaultGraphClause,namedGraphClause])\" : {\n     \"IRI_REF\": [\"defaultGraphClause\"], \n     \"PNAME_LN\": [\"defaultGraphClause\"], \n     \"PNAME_NS\": [\"defaultGraphClause\"], \n     \"NAMED\": [\"namedGraphClause\"]}, \n  \"or([generateQuery1,generateQuery2])\" : {\n     \"GENERATE\": [\"generateQuery1\"], \n     \"CONSTRUCT\": [\"generateQuery2\"], \n     \"WHEREVER\": [\"generateQuery2\"], \n     \"WHERE\": [\"generateQuery2\"], \n     \"FROM\": [\"generateQuery2\"], \n     \"ORDER\": [\"generateQuery2\"], \n     \"HAVING\": [\"generateQuery2\"], \n     \"GROUP\": [\"generateQuery2\"], \n     \"{\": [\"generateQuery2\"], \n     \"ITERATOR\": [\"generateQuery2\"], \n     \"ITERATE\": [\"generateQuery2\"], \n     \"SOURCE\": [\"generateQuery2\"], \n     \"LOOK UP\": [\"generateQuery2\"], \n     \"BIND\": [\"generateQuery2\"], \n     \"LIMIT\": [\"generateQuery2\"], \n     \"OFFSET\": [\"generateQuery2\"]}, \n  \"or([inlineDataOneVar,inlineDataFull])\" : {\n     \"VAR1\": [\"inlineDataOneVar\"], \n     \"VAR2\": [\"inlineDataOneVar\"], \n     \"NIL\": [\"inlineDataFull\"], \n     \"(\": [\"inlineDataFull\"]}, \n  \"or([iriRef,[IRI_REF_START,xiri_Sub]])\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"IRI_REF_START\": [\"[IRI_REF_START,xiri_Sub]\"]}, \n  \"or([iteratorClause,sourceClause,bind])\" : {\n     \"ITERATOR\": [\"iteratorClause\"], \n     \"ITERATE\": [\"iteratorClause\"], \n     \"SOURCE\": [\"sourceClause\"], \n     \"LOOK UP\": [\"sourceClause\"], \n     \"BIND\": [\"bind\"]}, \n  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"or([sourceSelector,generateTemplate])\" : {\n     \"IRI_REF\": [\"sourceSelector\"], \n     \"PNAME_LN\": [\"sourceSelector\"], \n     \"PNAME_NS\": [\"sourceSelector\"], \n     \"{\": [\"generateTemplate\"]}, \n  \"or([subGenerateQuery1,subGenerateQuery2])\" : {\n     \"GENERATE\": [\"subGenerateQuery1\"], \n     \"CONSTRUCT\": [\"subGenerateQuery2\"], \n     \"WHEREVER\": [\"subGenerateQuery2\"], \n     \"WHERE\": [\"subGenerateQuery2\"], \n     \"ORDER\": [\"subGenerateQuery2\"], \n     \"HAVING\": [\"subGenerateQuery2\"], \n     \"GROUP\": [\"subGenerateQuery2\"], \n     \"{\": [\"subGenerateQuery2\"], \n     \"ITERATOR\": [\"subGenerateQuery2\"], \n     \"ITERATE\": [\"subGenerateQuery2\"], \n     \"SOURCE\": [\"subGenerateQuery2\"], \n     \"LOOK UP\": [\"subGenerateQuery2\"], \n     \"BIND\": [\"subGenerateQuery2\"], \n     \"LIMIT\": [\"subGenerateQuery2\"], \n     \"OFFSET\": [\"subGenerateQuery2\"]}, \n  \"or([subSelect,groupGraphPatternSub])\" : {\n     \"SELECT\": [\"subSelect\"], \n     \"{\": [\"groupGraphPatternSub\"], \n     \"OPTIONAL\": [\"groupGraphPatternSub\"], \n     \"MINUS\": [\"groupGraphPatternSub\"], \n     \"GRAPH\": [\"groupGraphPatternSub\"], \n     \"SERVICE\": [\"groupGraphPatternSub\"], \n     \"FILTER\": [\"groupGraphPatternSub\"], \n     \"BIND\": [\"groupGraphPatternSub\"], \n     \"VALUES\": [\"groupGraphPatternSub\"], \n     \"VAR1\": [\"groupGraphPatternSub\"], \n     \"VAR2\": [\"groupGraphPatternSub\"], \n     \"NIL\": [\"groupGraphPatternSub\"], \n     \"(\": [\"groupGraphPatternSub\"], \n     \"[\": [\"groupGraphPatternSub\"], \n     \"START_XEXPR\": [\"groupGraphPatternSub\"], \n     \"IRI_REF\": [\"groupGraphPatternSub\"], \n     \"IRI_REF_START\": [\"groupGraphPatternSub\"], \n     \"TRUE\": [\"groupGraphPatternSub\"], \n     \"FALSE\": [\"groupGraphPatternSub\"], \n     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \n     \"ANON\": [\"groupGraphPatternSub\"], \n     \"PNAME_LN\": [\"groupGraphPatternSub\"], \n     \"PNAME_NS\": [\"groupGraphPatternSub\"], \n     \"INTEGER\": [\"groupGraphPatternSub\"], \n     \"DECIMAL\": [\"groupGraphPatternSub\"], \n     \"DOUBLE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL1_START\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL2_START\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG1_START\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG2_START\": [\"groupGraphPatternSub\"], \n     \"}\": [\"groupGraphPatternSub\"]}, \n  \"or([var,[ (,expression,AS,var,)]])\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"(\": [\"[ (,expression,AS,var,)]\"]}, \n  \"or([var,xExpr])\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"START_XEXPR\": [\"xExpr\"]}, \n  \"or([verbPath,verbSimple])\" : {\n     \"^\": [\"verbPath\"], \n     \"a\": [\"verbPath\"], \n     \"!\": [\"verbPath\"], \n     \"(\": [\"verbPath\"], \n     \"IRI_REF\": [\"verbPath\"], \n     \"IRI_REF_START\": [\"verbPath\"], \n     \"PNAME_LN\": [\"verbPath\"], \n     \"PNAME_NS\": [\"verbPath\"], \n     \"VAR1\": [\"verbSimple\"], \n     \"VAR2\": [\"verbSimple\"], \n     \"START_XEXPR\": [\"verbSimple\"]}, \n  \"or([xiri,a])\" : {\n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"], \n     \"a\": [\"a\"]}, \n  \"or([},[integer,}]])\" : {\n     \"}\": [\"}\"], \n     \"INTEGER\": [\"[integer,}]\"]}, \n  \"orderClause\" : {\n     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \n  \"orderCondition\" : {\n     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"path\" : {\n     \"^\": [\"pathAlternative\"], \n     \"a\": [\"pathAlternative\"], \n     \"!\": [\"pathAlternative\"], \n     \"(\": [\"pathAlternative\"], \n     \"IRI_REF\": [\"pathAlternative\"], \n     \"IRI_REF_START\": [\"pathAlternative\"], \n     \"PNAME_LN\": [\"pathAlternative\"], \n     \"PNAME_NS\": [\"pathAlternative\"]}, \n  \"pathAlternative\" : {\n     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"IRI_REF_START\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \n  \"pathElt\" : {\n     \"a\": [\"pathPrimary\",\"?pathMod\"], \n     \"!\": [\"pathPrimary\",\"?pathMod\"], \n     \"(\": [\"pathPrimary\",\"?pathMod\"], \n     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \n     \"IRI_REF_START\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \n  \"pathEltOrInverse\" : {\n     \"a\": [\"pathElt\"], \n     \"!\": [\"pathElt\"], \n     \"(\": [\"pathElt\"], \n     \"IRI_REF\": [\"pathElt\"], \n     \"IRI_REF_START\": [\"pathElt\"], \n     \"PNAME_LN\": [\"pathElt\"], \n     \"PNAME_NS\": [\"pathElt\"], \n     \"^\": [\"^\",\"pathElt\"]}, \n  \"pathMod\" : {\n     \"*\": [\"*\"], \n     \"?\": [\"?\"], \n     \"+\": [\"+\"], \n     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \n  \"pathNegatedPropertySet\" : {\n     \"a\": [\"pathOneInPropertySet\"], \n     \"^\": [\"pathOneInPropertySet\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\"], \n     \"IRI_REF_START\": [\"pathOneInPropertySet\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\"], \n     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \n  \"pathOneInPropertySet\" : {\n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"], \n     \"a\": [\"a\"], \n     \"^\": [\"^\",\"or([xiri,a])\"]}, \n  \"pathPrimary\" : {\n     \"IRI_REF\": [\"storeProperty\",\"xiri\"], \n     \"IRI_REF_START\": [\"storeProperty\",\"xiri\"], \n     \"PNAME_LN\": [\"storeProperty\",\"xiri\"], \n     \"PNAME_NS\": [\"storeProperty\",\"xiri\"], \n     \"a\": [\"storeProperty\",\"a\"], \n     \"!\": [\"!\",\"pathNegatedPropertySet\"], \n     \"(\": [\"(\",\"path\",\")\"]}, \n  \"pathSequence\" : {\n     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"IRI_REF_START\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \n  \"prefixDecl\" : {\n     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \n  \"prefixedName\" : {\n     \"PNAME_LN\": [\"PNAME_LN\"], \n     \"PNAME_NS\": [\"PNAME_NS\"]}, \n  \"primaryExpression\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"xiriOrFunction\"], \n     \"IRI_REF_START\": [\"xiriOrFunction\"], \n     \"PNAME_LN\": [\"xiriOrFunction\"], \n     \"PNAME_NS\": [\"xiriOrFunction\"], \n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"COUNT\": [\"aggregate\"], \n     \"SUM\": [\"aggregate\"], \n     \"MIN\": [\"aggregate\"], \n     \"MAX\": [\"aggregate\"], \n     \"AVG\": [\"aggregate\"], \n     \"SAMPLE\": [\"aggregate\"], \n     \"GROUP_CONCAT\": [\"aggregate\"]}, \n  \"prologue\" : {\n     \"BASE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"*or([baseDecl,prefixDecl])\"], \n     \"GENERATE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CONSTRUCT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"WHEREVER\": [\"*or([baseDecl,prefixDecl])\"], \n     \"WHERE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"FROM\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ORDER\": [\"*or([baseDecl,prefixDecl])\"], \n     \"HAVING\": [\"*or([baseDecl,prefixDecl])\"], \n     \"GROUP\": [\"*or([baseDecl,prefixDecl])\"], \n     \"{\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ITERATOR\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ITERATE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"SOURCE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"LOOK UP\": [\"*or([baseDecl,prefixDecl])\"], \n     \"BIND\": [\"*or([baseDecl,prefixDecl])\"], \n     \"LIMIT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"OFFSET\": [\"*or([baseDecl,prefixDecl])\"]}, \n  \"propertyList\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"NIL\": [\"propertyListNotEmpty\"], \n     \"START_XEXPR\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"IRI_REF_START\": [\"propertyListNotEmpty\"], \n     \"TRUE\": [\"propertyListNotEmpty\"], \n     \"FALSE\": [\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"propertyListNotEmpty\"], \n     \"ANON\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"propertyListNotEmpty\" : {\n     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"NIL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"START_XEXPR\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"IRI_REF_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"TRUE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"FALSE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"BLANK_NODE_LABEL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"ANON\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"INTEGER\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DECIMAL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DOUBLE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"INTEGER_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DECIMAL_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DOUBLE_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"INTEGER_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DECIMAL_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DOUBLE_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL1_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL2_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \n  \"propertyListPath\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"NIL\": [\"propertyListNotEmpty\"], \n     \"START_XEXPR\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"IRI_REF_START\": [\"propertyListNotEmpty\"], \n     \"TRUE\": [\"propertyListNotEmpty\"], \n     \"FALSE\": [\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"propertyListNotEmpty\"], \n     \"ANON\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"propertyListPathNotEmpty\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"START_XEXPR\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"IRI_REF_START\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \n  \"rdfLiteral\" : {\n     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \n  \"regexExpression\" : {\n     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"relationalExpression\" : {\n     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI_REF_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL1_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL2_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \n  \"selectClause\" : {\n     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \n  \"serviceGraphPattern\" : {\n     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIri\",\"groupGraphPattern\"]}, \n  \"solutionModifier\" : {\n     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"CONSTRUCT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \".\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \n  \"sourceClause\" : {\n     \"SOURCE\": [\"or([SOURCE,LOOK UP])\",\"varOrIri\",\"?[ACCEPT,varOrIri]\",\"AS\",\"var\"], \n     \"LOOK UP\": [\"or([SOURCE,LOOK UP])\",\"varOrIri\",\"?[ACCEPT,varOrIri]\",\"AS\",\"var\"]}, \n  \"sourceSelector\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"]}, \n  \"sparql11\" : {\n     \"GENERATE\": [\"generateUnit\",\"$\"], \n     \"CONSTRUCT\": [\"generateUnit\",\"$\"], \n     \"WHEREVER\": [\"generateUnit\",\"$\"], \n     \"WHERE\": [\"generateUnit\",\"$\"], \n     \"FROM\": [\"generateUnit\",\"$\"], \n     \"BASE\": [\"generateUnit\",\"$\"], \n     \"PREFIX\": [\"generateUnit\",\"$\"], \n     \"ORDER\": [\"generateUnit\",\"$\"], \n     \"HAVING\": [\"generateUnit\",\"$\"], \n     \"GROUP\": [\"generateUnit\",\"$\"], \n     \"{\": [\"generateUnit\",\"$\"], \n     \"ITERATOR\": [\"generateUnit\",\"$\"], \n     \"ITERATE\": [\"generateUnit\",\"$\"], \n     \"SOURCE\": [\"generateUnit\",\"$\"], \n     \"LOOK UP\": [\"generateUnit\",\"$\"], \n     \"BIND\": [\"generateUnit\",\"$\"], \n     \"LIMIT\": [\"generateUnit\",\"$\"], \n     \"OFFSET\": [\"generateUnit\",\"$\"]}, \n  \"storeProperty\" : {\n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"a\": []}, \n  \"strReplaceExpression\" : {\n     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"string\" : {\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \n  \"subGenerateQuery1\" : {\n     \"GENERATE\": [\"GENERATE\",\"or([sourceSelector,generateTemplate])\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\".\"]}, \n  \"subGenerateQuery2\" : {\n     \"CONSTRUCT\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"ORDER\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"HAVING\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"GROUP\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"LIMIT\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"OFFSET\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"WHEREVER\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"WHERE\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"{\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"ITERATOR\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"ITERATE\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"SOURCE\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"LOOK UP\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"BIND\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"]}, \n  \"subSelect\" : {\n     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \n  \"substringExpression\" : {\n     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"switchToParsingXIRI\" : {\n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"switchToParsingXL1\" : {\n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": []}, \n  \"switchToParsingXL2\" : {\n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": []}, \n  \"switchToParsingXS1\" : {\n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": []}, \n  \"switchToParsingXS2\" : {\n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": []}, \n  \"triplesBlock\" : {\n     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"START_XEXPR\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"IRI_REF_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL1_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL2_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \n  \"triplesNode\" : {\n     \"(\": [\"collection\"], \n     \"[\": [\"blankNodePropertyList\"]}, \n  \"triplesNodePath\" : {\n     \"(\": [\"collectionPath\"], \n     \"[\": [\"blankNodePropertyListPath\"]}, \n  \"triplesSameSubject\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"START_XEXPR\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"IRI_REF_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"(\": [\"triplesNode\",\"propertyList\"], \n     \"[\": [\"triplesNode\",\"propertyList\"]}, \n  \"triplesSameSubjectPath\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"START_XEXPR\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"IRI_REF_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \n     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \n  \"unaryExpression\" : {\n     \"!\": [\"!\",\"primaryExpression\"], \n     \"+\": [\"+\",\"primaryExpression\"], \n     \"-\": [\"-\",\"primaryExpression\"], \n     \"VAR1\": [\"primaryExpression\"], \n     \"VAR2\": [\"primaryExpression\"], \n     \"(\": [\"primaryExpression\"], \n     \"STR\": [\"primaryExpression\"], \n     \"LANG\": [\"primaryExpression\"], \n     \"LANGMATCHES\": [\"primaryExpression\"], \n     \"DATATYPE\": [\"primaryExpression\"], \n     \"BOUND\": [\"primaryExpression\"], \n     \"IRI\": [\"primaryExpression\"], \n     \"URI\": [\"primaryExpression\"], \n     \"BNODE\": [\"primaryExpression\"], \n     \"RAND\": [\"primaryExpression\"], \n     \"ABS\": [\"primaryExpression\"], \n     \"CEIL\": [\"primaryExpression\"], \n     \"FLOOR\": [\"primaryExpression\"], \n     \"ROUND\": [\"primaryExpression\"], \n     \"CONCAT\": [\"primaryExpression\"], \n     \"STRLEN\": [\"primaryExpression\"], \n     \"UCASE\": [\"primaryExpression\"], \n     \"LCASE\": [\"primaryExpression\"], \n     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \n     \"CONTAINS\": [\"primaryExpression\"], \n     \"STRSTARTS\": [\"primaryExpression\"], \n     \"STRENDS\": [\"primaryExpression\"], \n     \"STRBEFORE\": [\"primaryExpression\"], \n     \"STRAFTER\": [\"primaryExpression\"], \n     \"YEAR\": [\"primaryExpression\"], \n     \"MONTH\": [\"primaryExpression\"], \n     \"DAY\": [\"primaryExpression\"], \n     \"HOURS\": [\"primaryExpression\"], \n     \"MINUTES\": [\"primaryExpression\"], \n     \"SECONDS\": [\"primaryExpression\"], \n     \"TIMEZONE\": [\"primaryExpression\"], \n     \"TZ\": [\"primaryExpression\"], \n     \"NOW\": [\"primaryExpression\"], \n     \"UUID\": [\"primaryExpression\"], \n     \"STRUUID\": [\"primaryExpression\"], \n     \"MD5\": [\"primaryExpression\"], \n     \"SHA1\": [\"primaryExpression\"], \n     \"SHA256\": [\"primaryExpression\"], \n     \"SHA384\": [\"primaryExpression\"], \n     \"SHA512\": [\"primaryExpression\"], \n     \"COALESCE\": [\"primaryExpression\"], \n     \"IF\": [\"primaryExpression\"], \n     \"STRLANG\": [\"primaryExpression\"], \n     \"STRDT\": [\"primaryExpression\"], \n     \"SAMETERM\": [\"primaryExpression\"], \n     \"ISIRI\": [\"primaryExpression\"], \n     \"ISURI\": [\"primaryExpression\"], \n     \"ISBLANK\": [\"primaryExpression\"], \n     \"ISLITERAL\": [\"primaryExpression\"], \n     \"ISNUMERIC\": [\"primaryExpression\"], \n     \"TRUE\": [\"primaryExpression\"], \n     \"FALSE\": [\"primaryExpression\"], \n     \"COUNT\": [\"primaryExpression\"], \n     \"SUM\": [\"primaryExpression\"], \n     \"MIN\": [\"primaryExpression\"], \n     \"MAX\": [\"primaryExpression\"], \n     \"AVG\": [\"primaryExpression\"], \n     \"SAMPLE\": [\"primaryExpression\"], \n     \"GROUP_CONCAT\": [\"primaryExpression\"], \n     \"SUBSTR\": [\"primaryExpression\"], \n     \"REPLACE\": [\"primaryExpression\"], \n     \"REGEX\": [\"primaryExpression\"], \n     \"EXISTS\": [\"primaryExpression\"], \n     \"NOT\": [\"primaryExpression\"], \n     \"IRI_REF\": [\"primaryExpression\"], \n     \"IRI_REF_START\": [\"primaryExpression\"], \n     \"INTEGER\": [\"primaryExpression\"], \n     \"DECIMAL\": [\"primaryExpression\"], \n     \"DOUBLE\": [\"primaryExpression\"], \n     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \n     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \n     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \n     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \n     \"PNAME_LN\": [\"primaryExpression\"], \n     \"PNAME_NS\": [\"primaryExpression\"], \n     \"STRING_LITERAL1\": [\"primaryExpression\"], \n     \"STRING_LITERAL1_START\": [\"primaryExpression\"], \n     \"STRING_LITERAL2\": [\"primaryExpression\"], \n     \"STRING_LITERAL2_START\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"primaryExpression\"]}, \n  \"valueLogical\" : {\n     \"!\": [\"relationalExpression\"], \n     \"+\": [\"relationalExpression\"], \n     \"-\": [\"relationalExpression\"], \n     \"VAR1\": [\"relationalExpression\"], \n     \"VAR2\": [\"relationalExpression\"], \n     \"(\": [\"relationalExpression\"], \n     \"STR\": [\"relationalExpression\"], \n     \"LANG\": [\"relationalExpression\"], \n     \"LANGMATCHES\": [\"relationalExpression\"], \n     \"DATATYPE\": [\"relationalExpression\"], \n     \"BOUND\": [\"relationalExpression\"], \n     \"IRI\": [\"relationalExpression\"], \n     \"URI\": [\"relationalExpression\"], \n     \"BNODE\": [\"relationalExpression\"], \n     \"RAND\": [\"relationalExpression\"], \n     \"ABS\": [\"relationalExpression\"], \n     \"CEIL\": [\"relationalExpression\"], \n     \"FLOOR\": [\"relationalExpression\"], \n     \"ROUND\": [\"relationalExpression\"], \n     \"CONCAT\": [\"relationalExpression\"], \n     \"STRLEN\": [\"relationalExpression\"], \n     \"UCASE\": [\"relationalExpression\"], \n     \"LCASE\": [\"relationalExpression\"], \n     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \n     \"CONTAINS\": [\"relationalExpression\"], \n     \"STRSTARTS\": [\"relationalExpression\"], \n     \"STRENDS\": [\"relationalExpression\"], \n     \"STRBEFORE\": [\"relationalExpression\"], \n     \"STRAFTER\": [\"relationalExpression\"], \n     \"YEAR\": [\"relationalExpression\"], \n     \"MONTH\": [\"relationalExpression\"], \n     \"DAY\": [\"relationalExpression\"], \n     \"HOURS\": [\"relationalExpression\"], \n     \"MINUTES\": [\"relationalExpression\"], \n     \"SECONDS\": [\"relationalExpression\"], \n     \"TIMEZONE\": [\"relationalExpression\"], \n     \"TZ\": [\"relationalExpression\"], \n     \"NOW\": [\"relationalExpression\"], \n     \"UUID\": [\"relationalExpression\"], \n     \"STRUUID\": [\"relationalExpression\"], \n     \"MD5\": [\"relationalExpression\"], \n     \"SHA1\": [\"relationalExpression\"], \n     \"SHA256\": [\"relationalExpression\"], \n     \"SHA384\": [\"relationalExpression\"], \n     \"SHA512\": [\"relationalExpression\"], \n     \"COALESCE\": [\"relationalExpression\"], \n     \"IF\": [\"relationalExpression\"], \n     \"STRLANG\": [\"relationalExpression\"], \n     \"STRDT\": [\"relationalExpression\"], \n     \"SAMETERM\": [\"relationalExpression\"], \n     \"ISIRI\": [\"relationalExpression\"], \n     \"ISURI\": [\"relationalExpression\"], \n     \"ISBLANK\": [\"relationalExpression\"], \n     \"ISLITERAL\": [\"relationalExpression\"], \n     \"ISNUMERIC\": [\"relationalExpression\"], \n     \"TRUE\": [\"relationalExpression\"], \n     \"FALSE\": [\"relationalExpression\"], \n     \"COUNT\": [\"relationalExpression\"], \n     \"SUM\": [\"relationalExpression\"], \n     \"MIN\": [\"relationalExpression\"], \n     \"MAX\": [\"relationalExpression\"], \n     \"AVG\": [\"relationalExpression\"], \n     \"SAMPLE\": [\"relationalExpression\"], \n     \"GROUP_CONCAT\": [\"relationalExpression\"], \n     \"SUBSTR\": [\"relationalExpression\"], \n     \"REPLACE\": [\"relationalExpression\"], \n     \"REGEX\": [\"relationalExpression\"], \n     \"EXISTS\": [\"relationalExpression\"], \n     \"NOT\": [\"relationalExpression\"], \n     \"IRI_REF\": [\"relationalExpression\"], \n     \"IRI_REF_START\": [\"relationalExpression\"], \n     \"INTEGER\": [\"relationalExpression\"], \n     \"DECIMAL\": [\"relationalExpression\"], \n     \"DOUBLE\": [\"relationalExpression\"], \n     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \n     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \n     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \n     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \n     \"PNAME_LN\": [\"relationalExpression\"], \n     \"PNAME_NS\": [\"relationalExpression\"], \n     \"STRING_LITERAL1\": [\"relationalExpression\"], \n     \"STRING_LITERAL1_START\": [\"relationalExpression\"], \n     \"STRING_LITERAL2\": [\"relationalExpression\"], \n     \"STRING_LITERAL2_START\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"relationalExpression\"]}, \n  \"valuesClause\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"], \n     \"}\": []}, \n  \"var\" : {\n     \"VAR1\": [\"VAR1\"], \n     \"VAR2\": [\"VAR2\"]}, \n  \"varOrIri\" : {\n     \"VAR1\": [\"varOrXExpr\"], \n     \"VAR2\": [\"varOrXExpr\"], \n     \"START_XEXPR\": [\"varOrXExpr\"], \n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"]}, \n  \"varOrTerm\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"NIL\": [\"xTerm\"], \n     \"START_XEXPR\": [\"xTerm\"], \n     \"IRI_REF\": [\"xTerm\"], \n     \"IRI_REF_START\": [\"xTerm\"], \n     \"TRUE\": [\"xTerm\"], \n     \"FALSE\": [\"xTerm\"], \n     \"BLANK_NODE_LABEL\": [\"xTerm\"], \n     \"ANON\": [\"xTerm\"], \n     \"PNAME_LN\": [\"xTerm\"], \n     \"PNAME_NS\": [\"xTerm\"], \n     \"INTEGER\": [\"xTerm\"], \n     \"DECIMAL\": [\"xTerm\"], \n     \"DOUBLE\": [\"xTerm\"], \n     \"INTEGER_POSITIVE\": [\"xTerm\"], \n     \"DECIMAL_POSITIVE\": [\"xTerm\"], \n     \"DOUBLE_POSITIVE\": [\"xTerm\"], \n     \"INTEGER_NEGATIVE\": [\"xTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"xTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"xTerm\"], \n     \"STRING_LITERAL1\": [\"xTerm\"], \n     \"STRING_LITERAL1_START\": [\"xTerm\"], \n     \"STRING_LITERAL2\": [\"xTerm\"], \n     \"STRING_LITERAL2_START\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xTerm\"]}, \n  \"varOrXExpr\" : {\n     \"VAR1\": [\"or([var,xExpr])\"], \n     \"VAR2\": [\"or([var,xExpr])\"], \n     \"START_XEXPR\": [\"or([var,xExpr])\"]}, \n  \"verb\" : {\n     \"VAR1\": [\"storeProperty\",\"varOrTerm\"], \n     \"VAR2\": [\"storeProperty\",\"varOrTerm\"], \n     \"NIL\": [\"storeProperty\",\"varOrTerm\"], \n     \"START_XEXPR\": [\"storeProperty\",\"varOrTerm\"], \n     \"IRI_REF\": [\"storeProperty\",\"varOrTerm\"], \n     \"IRI_REF_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"TRUE\": [\"storeProperty\",\"varOrTerm\"], \n     \"FALSE\": [\"storeProperty\",\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"storeProperty\",\"varOrTerm\"], \n     \"ANON\": [\"storeProperty\",\"varOrTerm\"], \n     \"PNAME_LN\": [\"storeProperty\",\"varOrTerm\"], \n     \"PNAME_NS\": [\"storeProperty\",\"varOrTerm\"], \n     \"INTEGER\": [\"storeProperty\",\"varOrTerm\"], \n     \"DECIMAL\": [\"storeProperty\",\"varOrTerm\"], \n     \"DOUBLE\": [\"storeProperty\",\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL1_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL2_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"a\": [\"storeProperty\",\"a\"]}, \n  \"verbPath\" : {\n     \"^\": [\"path\"], \n     \"a\": [\"path\"], \n     \"!\": [\"path\"], \n     \"(\": [\"path\"], \n     \"IRI_REF\": [\"path\"], \n     \"IRI_REF_START\": [\"path\"], \n     \"PNAME_LN\": [\"path\"], \n     \"PNAME_NS\": [\"path\"]}, \n  \"verbSimple\" : {\n     \"VAR1\": [\"varOrXExpr\"], \n     \"VAR2\": [\"varOrXExpr\"], \n     \"START_XEXPR\": [\"varOrXExpr\"]}, \n  \"whereClause\" : {\n     \"{\": [\"?or([WHEREVER,WHERE])\",\"groupGraphPattern\"], \n     \"WHEREVER\": [\"?or([WHEREVER,WHERE])\",\"groupGraphPattern\"], \n     \"WHERE\": [\"?or([WHEREVER,WHERE])\",\"groupGraphPattern\"]}, \n  \"xExpr\" : {\n     \"START_XEXPR\": [\"START_XEXPR\",\"expression\",\"}\"]}, \n  \"xNode\" : {\n     \"START_XEXPR\": [\"xExpr\"], \n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"]}, \n  \"xRDFLiteral\" : {\n     \"STRING_LITERAL1\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL1_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL2\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL2_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG1\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG2\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"]}, \n  \"xString\" : {\n     \"STRING_LITERAL1\": [\"xString_Literal1\"], \n     \"STRING_LITERAL1_START\": [\"xString_Literal1\"], \n     \"STRING_LITERAL2\": [\"xString_Literal2\"], \n     \"STRING_LITERAL2_START\": [\"xString_Literal2\"], \n     \"STRING_LITERAL_LONG1\": [\"xString_Literal_Long1\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xString_Literal_Long1\"], \n     \"STRING_LITERAL_LONG2\": [\"xString_Literal_Long2\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xString_Literal_Long2\"]}, \n  \"xString_Literal1\" : {\n     \"STRING_LITERAL1\": [\"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\"], \n     \"STRING_LITERAL1_START\": [\"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\"]}, \n  \"xString_Literal1_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"]}, \n  \"xString_Literal2\" : {\n     \"STRING_LITERAL2\": [\"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\"], \n     \"STRING_LITERAL2_START\": [\"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\"]}, \n  \"xString_Literal2_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"]}, \n  \"xString_Literal_Long1\" : {\n     \"STRING_LITERAL_LONG1\": [\"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\"]}, \n  \"xString_Literal_Long1_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"]}, \n  \"xString_Literal_Long2\" : {\n     \"STRING_LITERAL_LONG2\": [\"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\"]}, \n  \"xString_Literal_Long2_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"]}, \n  \"xTerm\" : {\n     \"START_XEXPR\": [\"xNode\"], \n     \"IRI_REF\": [\"xNode\"], \n     \"IRI_REF_START\": [\"xNode\"], \n     \"PNAME_LN\": [\"xNode\"], \n     \"PNAME_NS\": [\"xNode\"], \n     \"STRING_LITERAL1\": [\"xNode\"], \n     \"STRING_LITERAL1_START\": [\"xNode\"], \n     \"STRING_LITERAL2\": [\"xNode\"], \n     \"STRING_LITERAL2_START\": [\"xNode\"], \n     \"STRING_LITERAL_LONG1\": [\"xNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xNode\"], \n     \"STRING_LITERAL_LONG2\": [\"xNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xNode\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"BLANK_NODE_LABEL\": [\"blankNode\"], \n     \"ANON\": [\"blankNode\"], \n     \"NIL\": [\"NIL\"]}, \n  \"xiri\" : {\n     \"IRI_REF\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \n     \"IRI_REF_START\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \n     \"PNAME_LN\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \n     \"PNAME_NS\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"]}, \n  \"xiriOrFunction\" : {\n     \"IRI_REF\": [\"xiri\",\"?argList\"], \n     \"IRI_REF_START\": [\"xiri\",\"?argList\"], \n     \"PNAME_LN\": [\"xiri\",\"?argList\"], \n     \"PNAME_NS\": [\"xiri\",\"?argList\"]}, \n  \"xiri_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"]}\n},\n\nkeywords:/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|GENERATE|ITERATOR|ITERATE|SOURCE|LOOK UP|ACCEPT|WHEREVER|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ,\n\npunct:/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ,\n\nstartSymbol:\"sparql11\",\nacceptEmpty:true,\n}\n},{}],3:[function(require,module,exports){\n\"use strict\";\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n\n  var grammar = require(\"./_tokenizer-table.js\");\n  var ll1_table = grammar.table;\n\n  var IRI_REF = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n  var IRI_REF_START = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*\\\\{';\n  var IRI_REF_SUB = '}[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*\\\\{';\n  var IRI_REF_END = '}[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n  /*\n   * PN_CHARS_BASE =\n   * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\n   */\n\n  var PN_CHARS_BASE = \"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\";\n  var PN_CHARS_U = PN_CHARS_BASE + \"|_\";\n\n  var PN_CHARS = \"(\" + PN_CHARS_U + \"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\";\n  var VARNAME = \"(\" + PN_CHARS_U + \"|[0-9])\" + \"(\" + PN_CHARS_U + \"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\";\n  var VAR1 = \"\\\\?\" + VARNAME;\n  var VAR2 = \"\\\\$\" + VARNAME;\n\n  var START_XEXPR = \"(\\\\$|\\\\?)\\\\{\";\n\n  var PN_PREFIX = \"(\" + PN_CHARS_BASE + \")(((\" + PN_CHARS + \")|\\\\.)*(\" + PN_CHARS + \"))?\";\n\n  var HEX = \"[0-9A-Fa-f]\";\n  var PERCENT = \"(%\" + HEX + HEX + \")\";\n  var PN_LOCAL_ESC = \"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\";\n  var PLX = \"(\" + PERCENT + \"|\" + PN_LOCAL_ESC + \")\";\n  var PN_LOCAL = \"(\" +\n    PN_CHARS_U +\n    \"|:|[0-9]|\" +\n    PLX +\n    \")((\" +\n    PN_CHARS +\n    \"|\\\\.|:|\" +\n    PLX +\n    \")*(\" +\n    PN_CHARS +\n    \"|:|\" +\n    PLX +\n    \"))?\";\n  var BLANK_NODE_LABEL = \"_:(\" + PN_CHARS_U + \"|[0-9])((\" + PN_CHARS + \"|\\\\.)*\" + PN_CHARS + \")?\";\n  var PNAME_NS = \"(\" + PN_PREFIX + \")?:\";\n  var PNAME_LN = PNAME_NS + PN_LOCAL;\n  var LANGTAG = \"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\";\n\n  var EXPONENT = \"[eE][\\\\+-]?[0-9]+\";\n  var INTEGER = \"[0-9]+\";\n  var DECIMAL = \"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\";\n  var DOUBLE = \"(([0-9]+\\\\.[0-9]*\" + EXPONENT + \")|\" + \"(\\\\.[0-9]+\" + EXPONENT + \")|\" + \"([0-9]+\" + EXPONENT + \"))\";\n\n  var INTEGER_POSITIVE = \"\\\\+\" + INTEGER;\n  var DECIMAL_POSITIVE = \"\\\\+\" + DECIMAL;\n  var DOUBLE_POSITIVE = \"\\\\+\" + DOUBLE;\n  var INTEGER_NEGATIVE = \"-\" + INTEGER;\n  var DECIMAL_NEGATIVE = \"-\" + DECIMAL;\n  var DOUBLE_NEGATIVE = \"-\" + DOUBLE;\n\n  var ECHAR = \"\\\\\\\\[tbnrf\\\\\\\\\\\"'\\\\{}]\";\n\n  //IMPORTANT: this unicode rule is not in the official grammar.\n  //Reason: https://github.com/YASGUI/YASQE/issues/49\n  //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\n  //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\n  //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\n  var hex4 = HEX + \"{4}\";\n  var unicode = \"(\\\\\\\\u\" + hex4 + \"|\\\\\\\\U00(10|0\" + HEX + \")\" + hex4 + \")\";\n  var LINE_BREAK = \"\\n\";\n\n  var OPEN_EXPR = \"\\\\{\";\n  var CLOSE_EXPR = \"\\\\}\";\n\n  var STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*'\";\n  var STRING_LITERAL1_START = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*\" + OPEN_EXPR;\n  var STRING_LITERAL1_END = CLOSE_EXPR + \"(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*'\";\n  var STRING_LITERAL1_SUB = CLOSE_EXPR + \"(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*\" + OPEN_EXPR;\n\n  var STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*\"';\n  var STRING_LITERAL2_START = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*' + OPEN_EXPR;\n  var STRING_LITERAL2_END = CLOSE_EXPR + '(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*\"';\n  var STRING_LITERAL2_SUB = CLOSE_EXPR + '(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*' + OPEN_EXPR;\n\n  var STRING_LITERAL_LONG1_QUOTES = \"'''\";\n  var STRING_LITERAL_LONG1_CONTENT = \"(('|'')?([^'\\\\\\\\\\\\{]|\" + ECHAR + \"|\" + unicode + \"))*\";\n\n  var STRING_LITERAL_LONG2_QUOTES = '\"\"\"';\n  var STRING_LITERAL_LONG2_CONTENT = '((\"|\"\")?([^\"\\\\\\\\\\\\{]|' + ECHAR + \"|\" + unicode + \"))*\";\n\n\n  var WS = \"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\";\n  // Careful! Code mirror feeds one line at a time with no \\n\n  // ... but otherwise comment is terminated by \\n\n  var COMMENT = \"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\";\n  var WS_OR_COMMENT_STAR = \"(\" + WS + \"|(\" + COMMENT + \"))*\";\n  var NIL = \"\\\\(\" + WS_OR_COMMENT_STAR + \"\\\\)\";\n  var ANON = \"\\\\[\" + WS_OR_COMMENT_STAR + \"\\\\]\";\n\n  var terminals = { \n    \"default\" : [\n    {\n      name: \"WS\",\n      regex: new RegExp(\"^\" + WS + \"+\"),\n      style: \"ws\"\n    },\n    {\n      name: \"COMMENT\",\n      regex: new RegExp(\"^\" + COMMENT),\n      style: \"comment\"\n    },\n    {\n      name: \"IRI_REF\",\n      regex: new RegExp(\"^\" + IRI_REF),\n      style: \"variable-3\"\n    },\n    {\n      name: \"IRI_REF_START\",\n      regex: new RegExp(\"^\" + IRI_REF_START),\n      style: \"variable-3\"\n    },\n    {\n      name: \"VAR1\",\n      regex: new RegExp(\"^\" + VAR1),\n      style: \"atom\"\n    },\n    {\n      name: \"VAR2\",\n      regex: new RegExp(\"^\" + VAR2),\n      style: \"atom\"\n    },\n    {\n      name: \"START_XEXPR\",\n      regex: new RegExp(\"^\" + START_XEXPR),\n      style: \"atom\"\n    },\n    {\n      name: \"LANGTAG\",\n      regex: new RegExp(\"^\" + LANGTAG),\n      style: \"meta\"\n    },\n    {\n      name: \"DOUBLE\",\n      regex: new RegExp(\"^\" + DOUBLE),\n      style: \"number\"\n    },\n    {\n      name: \"DECIMAL\",\n      regex: new RegExp(\"^\" + DECIMAL),\n      style: \"number\"\n    },\n    {\n      name: \"INTEGER\",\n      regex: new RegExp(\"^\" + INTEGER),\n      style: \"number\"\n    },\n    {\n      name: \"DOUBLE_POSITIVE\",\n      regex: new RegExp(\"^\" + DOUBLE_POSITIVE),\n      style: \"number\"\n    },\n    {\n      name: \"DECIMAL_POSITIVE\",\n      regex: new RegExp(\"^\" + DECIMAL_POSITIVE),\n      style: \"number\"\n    },\n    {\n      name: \"INTEGER_POSITIVE\",\n      regex: new RegExp(\"^\" + INTEGER_POSITIVE),\n      style: \"number\"\n    },\n    {\n      name: \"DOUBLE_NEGATIVE\",\n      regex: new RegExp(\"^\" + DOUBLE_NEGATIVE),\n      style: \"number\"\n    },\n    {\n      name: \"DECIMAL_NEGATIVE\",\n      regex: new RegExp(\"^\" + DECIMAL_NEGATIVE),\n      style: \"number\"\n    },\n    {\n      name: \"INTEGER_NEGATIVE\",\n      regex: new RegExp(\"^\" + INTEGER_NEGATIVE),\n      style: \"number\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_START\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_START_TRUNC\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\n      style: \"string\",\n      switchTo: \"trunc_l1\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_START\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_START_TRUNC\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\n      style: \"string\",\n      switchTo: \"trunc_l2\"\n    },\n    {\n      name: \"STRING_LITERAL1\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL1_START\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1_START),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL2\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL2_START\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2_START),\n      style: \"string\"\n    },\n    // Enclosed comments won't be highlighted\n    {\n      name: \"NIL\",\n      regex: new RegExp(\"^\" + NIL),\n      style: \"punc\"\n    },\n    // Enclosed comments won't be highlighted\n    {\n      name: \"ANON\",\n      regex: new RegExp(\"^\" + ANON),\n      style: \"punc\"\n    },\n    {\n      name: \"PNAME_LN\",\n      regex: new RegExp(\"^\" + PNAME_LN),\n      style: \"string-2\"\n    },\n    {\n      name: \"PNAME_NS\",\n      regex: new RegExp(\"^\" + PNAME_NS),\n      style: \"string-2\"\n    },\n    {\n      name: \"BLANK_NODE_LABEL\",\n      regex: new RegExp(\"^\" + BLANK_NODE_LABEL),\n      style: \"string-2\"\n    }\n  ] ,\n  \"xiri\" : [\n    {\n      name: \"IRI_REF_END\",\n      regex: new RegExp(\"^\" + IRI_REF_END),\n      style: \"variable-3\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"IRI_REF_SUB\",\n      regex: new RegExp(\"^\" + IRI_REF_SUB),\n      style: \"variable-3\",\n      switchTo: \"default\"\n    }\n  ] ,\n  \"xs1\" : [\n    {\n      name: \"STRING_LITERAL1_END\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1_END),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL1_SUB\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1_SUB),\n      style: \"string\",\n      switchTo: \"default\"\n    }\n  ] ,\n  \"xs2\" : [\n    {\n      name: \"STRING_LITERAL2_SUB\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2_SUB),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL2_END\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2_END),\n      style: \"string\",\n      switchTo: \"default\"\n    }\n  ]  ,\n  \"trunc_l1\" : [\n    {\n      name: \"STRING_LITERAL_LONG1_TRUNC_END\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_TRUNC_OPEN\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_TRUNC_TRUNC\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\n      style: \"string\"\n    }\n  ] ,\n  \"trunc_l2\" : [\n    {\n      name: \"STRING_LITERAL_LONG2_TRUNC_END\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_TRUNC_OPEN\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_TRUNC_TRUNC\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\n      style: \"string\"\n    }\n  ] ,\n  \"xl1\" : [\n    {\n      name: \"STRING_LITERAL_LONG1_END\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_SUB\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_CLOSE_TRUNC\", // switch to trunc_l1\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\n      style: \"string\",\n      switchTo: \"trunc_l2\"      \n    }\n  ] ,\n  \"xl2\" : [\n    {\n      name: \"STRING_LITERAL_LONG2_END\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_SUB\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_CLOSE_TRUNC\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\n      style: \"string\",\n      switchTo: \"trunc_l2\"\n    }\n  ] } ;\n\n  function getPossibles(symbol) {\n    var possibles = [], possiblesOb = ll1_table[symbol];\n    if (possiblesOb != undefined) {\n      for (var property in possiblesOb) {\n        possibles.push(property.toString());\n      }\n    } else {\n      possibles.push(symbol);\n    }\n    return possibles;\n  }\n\n  function tokenBase(stream, state) {\n    function nextToken(consume) {\n      var consumed = null;\n\n      // Tokens defined by individual regular expressions in the current lexical state\n      var termls = terminals[state.lexicalState];\n      for (var i = 0; i < termls.length; ++i) {\n        consumed = stream.match(termls[i].regex, consume, false);\n        if (consumed) {\n          var result = {\n            cat: termls[i].name,\n            style: termls[i].style,\n            text: consumed[0],\n            start: stream.start,\n            switchTo: termls[i].switchTo\n          };\n          return result;\n        }\n      }\n\n      // Keywords\n      consumed = stream.match(grammar.keywords, consume, false);\n      if (consumed) {\n        return {\n          cat: consumed[0].toUpperCase(),\n          style: \"keyword\",\n          text: consumed[0].toUpperCase(),\n          start: stream.start\n        };\n      }\n\n      // Punctuation\n      consumed = stream.match(grammar.punct, consume, false);\n      if (consumed)\n        return {\n          cat: consumed[0],\n          style: \"punc\",\n          text: consumed[0],\n          start: stream.start\n        };\n\n      // Token is invalid\n      // better consume something anyway, or else we're stuck\n      consumed = stream.match(/^.[A-Za-z0-9]*/, consume, false);\n      return {\n        cat: \"<invalid_token>\",\n        style: \"error\",\n        text: consumed ? consumed[0] : \"$\",\n        start: stream.start\n      };\n    }\n\n    function recordFailurePos(tokenOb) {\n      var col = stream.column();\n      state.errorStartPos = col;\n      if(tokenOb && tokenOb.text) {\n        state.errorEndPos = col + tokenOb.text.length;\n      }\n    }\n\n    function setQueryType(s) {\n      if (state.queryType == null) {\n        if (\n          s == \"GENERATE\" ||\n          s == \"SELECT\" ||\n          s == \"CONSTRUCT\" ||\n          s == \"ASK\" ||\n          s == \"DESCRIBE\" ||\n          s == \"INSERT\" ||\n          s == \"DELETE\" ||\n          s == \"LOAD\" ||\n          s == \"CLEAR\" ||\n          s == \"CREATE\" ||\n          s == \"DROP\" ||\n          s == \"COPY\" ||\n          s == \"MOVE\" ||\n          s == \"ADD\"\n        )\n          state.queryType = s;\n      }\n    }\n\n    // Some fake non-terminals are just there to have side-effect on state\n    // - i.e. allow or disallow variables and bnodes in certain non-nesting\n    // contexts\n    function setSideConditions(topSymbol) {\n      if (topSymbol === \"prefixDecl\") {\n        state.inPrefixDecl = true;\n      } else {\n        state.inPrefixDecl = false;\n      }\n      switch (topSymbol) {\n        case \"disallowVars\":\n          state.allowVars = false;\n          break;\n        case \"allowVars\":\n          state.allowVars = true;\n          break;\n        case \"disallowBnodes\":\n          state.allowBnodes = false;\n          break;\n        case \"allowBnodes\":\n          state.allowBnodes = true;\n          break;\n        case \"storeProperty\":\n          state.storeProperty = true;\n          break;\n      }\n    }\n\n    function checkSideConditions(topSymbol) {\n      return (state.allowVars || topSymbol != \"var\") &&\n        (state.allowBnodes ||\n          (topSymbol != \"blankNode\" &&\n            topSymbol != \"blankNodePropertyList\" &&\n            topSymbol != \"blankNodePropertyListPath\"));\n    }\n\n    function changeLexicalState(topSymbol) {\n      switch (topSymbol) {\n        case \"switchToParsingXIRI\":\n          state.lexicalState = \"xiri\";\n          break;\n        case \"switchToParsingXS1\":\n          state.lexicalState = \"xs1\";\n          break;\n        case \"switchToParsingXS2\":\n          state.lexicalState = \"xs2\";\n          break;\n        case \"switchToParsingXL1\":\n          state.lexicalState = \"xl1\";\n          break;\n        case \"switchToParsingXL2\":\n          state.lexicalState = \"xl2\";\n          break;\n      }\n    }\n\n    function checkinLiteral(tokenOb) {\n      switch (tokenOb.cat) {\n        case \"STRING_LITERAL_LONG1_START_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG1_START\";\n          break;\n        case \"STRING_LITERAL_LONG1_TRUNC_END\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG1_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG1_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1_END\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG1_TRUNC_OPEN\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG1_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1_START\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG1_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1_SUB\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG1_TRUNC_TRUNC\":\n          state.inLiteral.text += \".\";\n          break;\n        case \"STRING_LITERAL_LONG1_CLOSE_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG1_CLOSE\";\n          break;\n        case \"STRING_LITERAL_LONG2_START_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG2_START\";\n          break;\n        case \"STRING_LITERAL_LONG2_TRUNC_END\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG2_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG2_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2_END\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG2_TRUNC_OPEN\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG2_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2_START\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG2_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2_SUB\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG2_TRUNC_TRUNC\":\n          state.inLiteral.text += \".\";\n          break;\n        case \"STRING_LITERAL_LONG2_CLOSE_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG2_CLOSE\";\n          break;\n      }\n      if(tokenOb.switchTo) {\n        state.lexicalState = tokenOb.switchTo;\n      }\n    }\n\n    function attemptConsume() {\n      var consumed = false;\n\n      if (stream.pos == 0) {\n        state.possibleCurrent = state.possibleNext;\n      }\n\n      var tokenOb = nextToken(false);\n      if (tokenOb.cat == \"<invalid_token>\") {\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n        consumed = true;\n        if (state.OK==true) {\n          state.OK=false;\n          state.lexicalState = \"default\";\n          recordFailurePos(tokenOb);\n        }\n        state.complete=false;\n        return tokenOb.style;\n      }\n\n      if (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\") {\n        state.possibleCurrent = state.possibleNext;\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n        consumed = true;\n        return tokenOb.style;\n      }\n\n      if(tokenOb.cat.includes(\"TRUNC\")) {\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n        consumed = true;\n        checkinLiteral(tokenOb);\n      }  \n\n      if(state.inLiteral) {\n        state.complete = false;\n        state.possibleCurrent = state.possibleNext;\n        // console.log(\"inliteral, return \", state.inLiteral.style);\n        return state.inLiteral.style;\n      }\n\n      // Run the parser until the token is digested or failure\n      var finished = false;\n      var token = tokenOb.cat;\n      var topSymbol;\n\n      // Incremental LL1 parse\n      while (state.stack.length > 0 && token && state.OK && !finished) {\n        // console.log(\"----------------\" + topSymbol);\n        topSymbol = state.stack.pop();\n\n        if (!ll1_table[topSymbol]) {\n          // Top symbol is a terminal\n          if (topSymbol == token) {\n            if (state.inPrefixDecl) {\n              if (topSymbol === \"PNAME_NS\" && tokenOb.text.length > 0) {\n                state.currentPnameNs = tokenOb.text.slice(0, -1);\n              } else if (state.currentPnameNs !== undefined && tokenOb.text.length > 2) {\n                state.prefixes[state.currentPnameNs] = tokenOb.text.slice(1, -1);\n                //reset current pname ns\n                state.currentPnameNs = undefined;\n              }\n            }\n            // Matching terminals\n            // - ensure token is consumed from input stream\n            finished = true;\n\n            setQueryType(topSymbol);\n            // Check whether $ (end of input token) is poss next\n            // for everything on stack\n            var allNillable = true;\n            for (var sp = state.stack.length; sp > 0; --sp) {\n              var item = ll1_table[state.stack[sp - 1]];\n              if (state.stack[sp - 1] != '$' && ( !item || !item[\"$\"]))  {\n                allNillable = false;\n              }\n            }\n            state.complete = allNillable;\n            if (state.storeProperty && token.cat != \"punc\") {\n              state.lastProperty = tokenOb.text;\n              state.storeProperty = false;\n            }\n\n            //check whether a used prefix is actually defined\n            if (!state.inPrefixDecl && (token === \"PNAME_NS\" || token === \"PNAME_LN\")) {\n              var colonIndex = tokenOb.text.indexOf(\":\");\n              if (colonIndex >= 0) {\n                var prefNs = tokenOb.text.slice(0, colonIndex);\n                //avoid warnings for missing bif prefixes (yuck, virtuoso-specific)\n                if (!state.prefixes[prefNs] && [\"bif\", \"xsd\", \"sql\"].indexOf(prefNs) < 0) {\n                  state.OK = false;\n                  state.lexicalState = \"default\";\n                  recordFailurePos(tokenOb);\n                  state.errorMsg = \"Prefix '\" + prefNs + \"' is not defined\";\n                }\n              }\n            }\n          } else {\n            state.OK = false;\n            state.lexicalState = \"default\";\n            state.complete = false;\n            recordFailurePos(tokenOb);\n          }\n        } else {\n          // topSymbol is nonterminal\n          // - see if there is an entry for topSymbol\n          // and nextToken in table\n          var nextSymbols = ll1_table[topSymbol][token];\n          if (nextSymbols != undefined && checkSideConditions(topSymbol)) {\n            // Match - copy RHS of rule to stack\n            for (var i = nextSymbols.length - 1; i >= 0; --i) {\n              state.stack.push(nextSymbols[i]);\n            }\n            // Peform any non-grammatical side-effects\n            setSideConditions(topSymbol);\n          } else if(topSymbol.startsWith(\"switchTo\")) {\n            // Attempt with a chage of the lexical state\n            changeLexicalState(topSymbol);\n            return attemptConsume();\n          } else {\n            // No match in table - fail\n            state.OK = false;\n            state.complete = false;\n            state.lexicalState = \"default\";\n            recordFailurePos(tokenOb);\n            state.stack.push(topSymbol); // Shove topSymbol back on stack\n          }\n        }\n      }\n      if (!finished && state.OK) {\n        state.OK = false;\n        state.lexicalState = \"default\";\n        state.complete = false;\n        recordFailurePos(tokenOb);\n      }\n\n      if(!consumed) {\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n      }\n      if(tokenOb.switchTo) {\n        state.lexicalState = tokenOb.switchTo;\n      }\n\n      if (state.possibleCurrent.indexOf(\"a\") >= 0) {\n        state.lastPredicateOffset = tokenOb.start;\n      }\n      state.possibleCurrent = state.possibleNext;\n      state.possibleNext = getPossibles(state.stack[state.stack.length - 1]);\n\n      return tokenOb.style;\n    }\n\n    // CodeMirror works with one line at a time,\n    // but newline should behave like whitespace\n    // - i.e. a definite break between tokens (for autocompleter)\n    return attemptConsume();\n  }\n\n  var indentTop = {\n    \"*[,, object]\": 3,\n    \"*[(,),object]\": 3,\n    \"*[(,),objectPath]\": 3,\n    \"*[/,pathEltOrInverse]\": 2,\n    object: 2,\n    objectPath: 2,\n    objectList: 2,\n    objectListPath: 2,\n    storeProperty: 2,\n    pathMod: 2,\n    \"?pathMod\": 2,\n    propertyListNotEmpty: 1,\n    propertyList: 1,\n    propertyListPath: 1,\n    propertyListPathNotEmpty: 1,\n    \"?[verb,objectList]\": 1\n    //    \"?[or([verbPath, verbSimple]),objectList]\": 1,\n  };\n\n  var indentTable = {\n    \"}\": 1,\n    \"]\": 1,\n    \")\": 1,\n    \"{\": -1,\n    \"(\": -1,\n    \"[\": -1\n    //    \"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\n  };\n\n  function indent(state, textAfter) {\n    //just avoid we don't indent multi-line  literals\n    if (state.inLiteral) return 0;\n    if (state.stack.length && state.stack[state.stack.length - 1] == \"?[or([verbPath,verbSimple]),objectList]\") {\n      //we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\n      return state.lastPredicateOffset;\n    } else {\n      var n = 0; // indent level\n      var i = state.stack.length - 1;\n      if (/^[\\}\\]\\)]/.test(textAfter)) {\n        // Skip stack items until after matching bracket\n        var closeBracket = textAfter.substr(0, 1);\n        for (; i >= 0; --i) {\n          if (state.stack[i] == closeBracket) {\n            --i;\n            break;\n          }\n        }\n      } else {\n        // Consider nullable non-terminals if at top of stack\n        var dn = indentTop[state.stack[i]];\n        if (dn) {\n          n += dn;\n          --i;\n        }\n      }\n      for (; i >= 0; --i) {\n        var dn = indentTable[state.stack[i]];\n        if (dn) {\n          n += dn;\n        }\n      }\n      return n * config.indentUnit;\n    }\n  }\n\n  return {\n    token: tokenBase,\n    startState: function(base) {\n      return {\n        tokenize: tokenBase,\n        OK: true,\n        complete: grammar.acceptEmpty,\n        errorStartPos: null,\n        errorEndPos: null,\n        queryType: null,\n        possibleCurrent: getPossibles(grammar.startSymbol),\n        possibleNext: getPossibles(grammar.startSymbol),\n        allowVars: true,\n        allowBnodes: true,\n        storeProperty: false,\n        lastProperty: \"\",\n        lexicalState: \"default\",\n        inLiteral: null,\n        stack: [grammar.startSymbol],\n        lastPredicateOffset: config.indentUnit,\n        prefixes: {}\n      };\n    },\n    indent: indent,\n    electricChars: \"])\"\n  };\n});\nCodeMirror.defineMIME(\"application/vnd.sparql-generate\", \"sparql11\");\n},{\"./_tokenizer-table.js\":2,\"codemirror\":undefined}],4:[function(require,module,exports){\n/*\n* TRIE implementation in Javascript\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* Date: Nov 7, 2010\n*/\n\n/*\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet.\n* It has been used to store large dictionaries of English (say) words in spell-checking programs\n* and in natural-language \"understanding\" programs.\n* @see http://en.wikipedia.org/wiki/Trie\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\n/*\n\n* @class Trie\n* @constructor\n*/\n\nvar Trie = module.exports = function() {\n  this.words = 0;\n  this.prefixes = 0;\n  this.children = [];\n};\n\nTrie.prototype = {\n  /*\n    * Insert a word into the dictionary.\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\n    *\n    * @method insert\n    * @param {String} str Word to insert in the dictionary\n    * @param {Integer} pos Current index of the string to be inserted\n    * @return {Void}\n    */\n  insert: function(str, pos) {\n    if (str.length == 0) {\n      //blank string cannot be inserted\n      return;\n    }\n\n    var T = this, k, child;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (pos === str.length) {\n      T.words++;\n      return;\n    }\n    T.prefixes++;\n    k = str[pos];\n    if (T.children[k] === undefined) {\n      //if node for this char doesn't exist, create one\n      T.children[k] = new Trie();\n    }\n    child = T.children[k];\n    child.insert(str, pos + 1);\n  },\n\n  /*\n    * Remove a word from the dictionary.\n    *\n    * @method remove\n    * @param {String} str Word to be removed\n    * @param {Integer} pos Current index of the string to be removed\n    * @return {Void}\n    */\n  remove: function(str, pos) {\n    if (str.length == 0) {\n      return;\n    }\n\n    var T = this, k, child;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (T === undefined) {\n      return;\n    }\n    if (pos === str.length) {\n      T.words--;\n      return;\n    }\n    T.prefixes--;\n    k = str[pos];\n    child = T.children[k];\n    child.remove(str, pos + 1);\n  },\n\n  /*\n    * Update an existing word in the dictionary.\n    * This method removes the old word from the dictionary and inserts the new word.\n    *\n    * @method update\n    * @param {String} strOld The old word to be replaced\n    * @param {String} strNew The new word to be inserted\n    * @return {Void}\n    */\n  update: function(strOld, strNew) {\n    if (strOld.length == 0 || strNew.length == 0) {\n      return;\n    }\n    this.remove(strOld);\n    this.insert(strNew);\n  },\n\n  /*\n    * Count the number of times a given word has been inserted into the dictionary\n    *\n    * @method countWord\n    * @param {String} str Word to get count of\n    * @param {Integer} pos Current index of the given word\n    * @return {Integer} The number of times a given word exists in the dictionary\n    */\n  countWord: function(str, pos) {\n    if (str.length == 0) {\n      return 0;\n    }\n\n    var T = this, k, child, ret = 0;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (pos === str.length) {\n      return T.words;\n    }\n    k = str[pos];\n    child = T.children[k];\n    if (child !== undefined) {\n      //node exists\n      ret = child.countWord(str, pos + 1);\n    }\n    return ret;\n  },\n\n  /*\n    * Count the number of times a given prefix exists in the dictionary\n    *\n    * @method countPrefix\n    * @param {String} str Prefix to get count of\n    * @param {Integer} pos Current index of the given prefix\n    * @return {Integer} The number of times a given prefix exists in the dictionary\n    */\n  countPrefix: function(str, pos) {\n    if (str.length == 0) {\n      return 0;\n    }\n\n    var T = this, k, child, ret = 0;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (pos === str.length) {\n      return T.prefixes;\n    }\n    var k = str[pos];\n    child = T.children[k];\n    if (child !== undefined) {\n      //node exists\n      ret = child.countPrefix(str, pos + 1);\n    }\n    return ret;\n  },\n\n  /*\n    * Find a word in the dictionary\n    *\n    * @method find\n    * @param {String} str The word to find in the dictionary\n    * @return {Boolean} True if the word exists in the dictionary, else false\n    */\n  find: function(str) {\n    if (str.length == 0) {\n      return false;\n    }\n\n    if (this.countWord(str) > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  /*\n    * Get all words in the dictionary\n    *\n    * @method getAllWords\n    * @param {String} str Prefix of current word\n    * @return {Array} Array of words in the dictionary\n    */\n  getAllWords: function(str) {\n    var T = this, k, child, ret = [];\n    if (str === undefined) {\n      str = \"\";\n    }\n    if (T === undefined) {\n      return [];\n    }\n    if (T.words > 0) {\n      ret.push(str);\n    }\n    for (k in T.children) {\n      if (T.children.hasOwnProperty(k)) {\n        child = T.children[k];\n        ret = ret.concat(child.getAllWords(str + k));\n      }\n    }\n    return ret;\n  },\n\n  /*\n    * Autocomplete a given prefix\n    *\n    * @method autoComplete\n    * @param {String} str Prefix to be completed based on dictionary entries\n    * @param {Integer} pos Current index of the prefix\n    * @return {Array} Array of possible suggestions\n    */\n  autoComplete: function(str, pos) {\n    var T = this, k, child;\n    if (str.length == 0) {\n      if (pos === undefined) {\n        return T.getAllWords(str);\n      } else {\n        return [];\n      }\n    }\n    if (pos === undefined) {\n      pos = 0;\n    }\n    k = str[pos];\n    child = T.children[k];\n    if (child === undefined) {\n      //node doesn't exist\n      return [];\n    }\n    if (pos === str.length - 1) {\n      return child.getAllWords(str);\n    }\n    return child.autoComplete(str, pos + 1);\n  }\n};\n\n},{}],5:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n\n},{\"codemirror\":undefined}],6:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n},{\"codemirror\":undefined}],7:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n},{\"codemirror\":undefined}],8:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n},{\"codemirror\":undefined}],9:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n},{\"./foldcode\":8,\"codemirror\":undefined}],10:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n},{\"codemirror\":undefined}],11:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n},{\"codemirror\":undefined}],12:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n\n},{\"codemirror\":undefined}],13:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n\n},{\"codemirror\":undefined}],14:[function(require,module,exports){\nvar engine = require('../src/store-engine')\n\nvar storages = require('../storages/all')\nvar plugins = [require('../plugins/json2')]\n\nmodule.exports = engine.createStore(storages, plugins)\n\n},{\"../plugins/json2\":15,\"../src/store-engine\":17,\"../storages/all\":19}],15:[function(require,module,exports){\nmodule.exports = json2Plugin\n\nfunction json2Plugin() {\n\trequire('./lib/json2')\n\treturn {}\n}\n\n},{\"./lib/json2\":16}],16:[function(require,module,exports){\n/* eslint-disable */\n\n//  json2.js\n//  2016-10-28\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n//  See http://www.JSON.org/js.html\n//  This code should be minified before deployment.\n//  See http://javascript.crockford.com/jsmin.html\n\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n\n//          For example, this would serialize Dates as ISO strings.\n\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n\n//          JSON.stringify(undefined) returns undefined.\n\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n\n//          Example:\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n\n//          Example:\n\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n//                          +a[5], +a[6]));\n//                  }\n//              }\n//              return value;\n//          });\n\n//          myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n//              var d;\n//              if (typeof value === \"string\" &&\n//                      value.slice(0, 5) === \"Date(\" &&\n//                      value.slice(-1) === \")\") {\n//                  d = new Date(value.slice(5, -1));\n//                  if (d) {\n//                      return d;\n//                  }\n//              }\n//              return value;\n//          });\n\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\n    eval, for, this\n*/\n\n/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== \"object\") {\n    JSON = {};\n}\n\n(function () {\n    \"use strict\";\n\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10\n            ? \"0\" + n\n            : n;\n    }\n\n    function this_value() {\n        return this.valueOf();\n    }\n\n    if (typeof Date.prototype.toJSON !== \"function\") {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear() + \"-\" +\n                        f(this.getUTCMonth() + 1) + \"-\" +\n                        f(this.getUTCDate()) + \"T\" +\n                        f(this.getUTCHours()) + \":\" +\n                        f(this.getUTCMinutes()) + \":\" +\n                        f(this.getUTCSeconds()) + \"Z\"\n                : null;\n        };\n\n        Boolean.prototype.toJSON = this_value;\n        Number.prototype.toJSON = this_value;\n        String.prototype.toJSON = this_value;\n    }\n\n    var gap;\n    var indent;\n    var meta;\n    var rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        rx_escapable.lastIndex = 0;\n        return rx_escapable.test(string)\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n                var c = meta[a];\n                return typeof c === \"string\"\n                    ? c\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + \"\\\"\"\n            : \"\\\"\" + string + \"\\\"\";\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i;          // The loop counter.\n        var k;          // The member key.\n        var v;          // The member value.\n        var length;\n        var mind = gap;\n        var partial;\n        var value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === \"object\" &&\n                typeof value.toJSON === \"function\") {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === \"function\") {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case \"string\":\n            return quote(value);\n\n        case \"number\":\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value)\n                ? String(value)\n                : \"null\";\n\n        case \"boolean\":\n        case \"null\":\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce \"null\". The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is \"object\", we might be dealing with an object or an array or\n// null.\n\n        case \"object\":\n\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\n// so watch out for that case.\n\n            if (!value) {\n                return \"null\";\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || \"null\";\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? \"[]\"\n                    : gap\n                        ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\"\n                        : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === \"string\") {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? \"{}\"\n                : gap\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\n                    : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== \"function\") {\n        meta = {    // table of character substitutions\n            \"\\b\": \"\\\\b\",\n            \"\\t\": \"\\\\t\",\n            \"\\n\": \"\\\\n\",\n            \"\\f\": \"\\\\f\",\n            \"\\r\": \"\\\\r\",\n            \"\\\"\": \"\\\\\\\"\",\n            \"\\\\\": \"\\\\\\\\\"\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = \"\";\n            indent = \"\";\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === \"number\") {\n                for (i = 0; i < space; i += 1) {\n                    indent += \" \";\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \"string\") {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \"function\" &&\n                    (typeof replacer !== \"object\" ||\n                    typeof replacer.length !== \"number\")) {\n                throw new Error(\"JSON.stringify\");\n            }\n\n// Make a fake root object containing our value under the key of \"\".\n// Return the result of stringifying the value.\n\n            return str(\"\", {\"\": value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== \"function\") {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k;\n                var v;\n                var value = holder[key];\n                if (value && typeof value === \"object\") {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            rx_dangerous.lastIndex = 0;\n            if (rx_dangerous.test(text)) {\n                text = text.replace(rx_dangerous, function (a) {\n                    return \"\\\\u\" +\n                            (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n// because they can cause invocation, and \"=\" because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n            if (\n                rx_one.test(\n                    text\n                        .replace(rx_two, \"@\")\n                        .replace(rx_three, \"]\")\n                        .replace(rx_four, \"\")\n                )\n            ) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval(\"(\" + text + \")\");\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return (typeof reviver === \"function\")\n                    ? walk({\"\": j}, \"\")\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\"JSON.parse\");\n        };\n    }\n}());\n},{}],17:[function(require,module,exports){\nvar util = require('./util')\nvar slice = util.slice\nvar pluck = util.pluck\nvar each = util.each\nvar bind = util.bind\nvar create = util.create\nvar isList = util.isList\nvar isFunction = util.isFunction\nvar isObject = util.isObject\n\nmodule.exports = {\n\tcreateStore: createStore\n}\n\nvar storeAPI = {\n\tversion: '2.0.12',\n\tenabled: false,\n\t\n\t// get returns the value of the given key. If that value\n\t// is undefined, it returns optionalDefaultValue instead.\n\tget: function(key, optionalDefaultValue) {\n\t\tvar data = this.storage.read(this._namespacePrefix + key)\n\t\treturn this._deserialize(data, optionalDefaultValue)\n\t},\n\n\t// set will store the given value at key and returns value.\n\t// Calling set with value === undefined is equivalent to calling remove.\n\tset: function(key, value) {\n\t\tif (value === undefined) {\n\t\t\treturn this.remove(key)\n\t\t}\n\t\tthis.storage.write(this._namespacePrefix + key, this._serialize(value))\n\t\treturn value\n\t},\n\n\t// remove deletes the key and value stored at the given key.\n\tremove: function(key) {\n\t\tthis.storage.remove(this._namespacePrefix + key)\n\t},\n\n\t// each will call the given callback once for each key-value pair\n\t// in this store.\n\teach: function(callback) {\n\t\tvar self = this\n\t\tthis.storage.each(function(val, namespacedKey) {\n\t\t\tcallback.call(self, self._deserialize(val), (namespacedKey || '').replace(self._namespaceRegexp, ''))\n\t\t})\n\t},\n\n\t// clearAll will remove all the stored key-value pairs in this store.\n\tclearAll: function() {\n\t\tthis.storage.clearAll()\n\t},\n\n\t// additional functionality that can't live in plugins\n\t// ---------------------------------------------------\n\n\t// hasNamespace returns true if this store instance has the given namespace.\n\thasNamespace: function(namespace) {\n\t\treturn (this._namespacePrefix == '__storejs_'+namespace+'_')\n\t},\n\n\t// createStore creates a store.js instance with the first\n\t// functioning storage in the list of storage candidates,\n\t// and applies the the given mixins to the instance.\n\tcreateStore: function() {\n\t\treturn createStore.apply(this, arguments)\n\t},\n\t\n\taddPlugin: function(plugin) {\n\t\tthis._addPlugin(plugin)\n\t},\n\t\n\tnamespace: function(namespace) {\n\t\treturn createStore(this.storage, this.plugins, namespace)\n\t}\n}\n\nfunction _warn() {\n\tvar _console = (typeof console == 'undefined' ? null : console)\n\tif (!_console) { return }\n\tvar fn = (_console.warn ? _console.warn : _console.log)\n\tfn.apply(_console, arguments)\n}\n\nfunction createStore(storages, plugins, namespace) {\n\tif (!namespace) {\n\t\tnamespace = ''\n\t}\n\tif (storages && !isList(storages)) {\n\t\tstorages = [storages]\n\t}\n\tif (plugins && !isList(plugins)) {\n\t\tplugins = [plugins]\n\t}\n\n\tvar namespacePrefix = (namespace ? '__storejs_'+namespace+'_' : '')\n\tvar namespaceRegexp = (namespace ? new RegExp('^'+namespacePrefix) : null)\n\tvar legalNamespaces = /^[a-zA-Z0-9_\\-]*$/ // alpha-numeric + underscore and dash\n\tif (!legalNamespaces.test(namespace)) {\n\t\tthrow new Error('store.js namespaces can only have alphanumerics + underscores and dashes')\n\t}\n\t\n\tvar _privateStoreProps = {\n\t\t_namespacePrefix: namespacePrefix,\n\t\t_namespaceRegexp: namespaceRegexp,\n\n\t\t_testStorage: function(storage) {\n\t\t\ttry {\n\t\t\t\tvar testStr = '__storejs__test__'\n\t\t\t\tstorage.write(testStr, testStr)\n\t\t\t\tvar ok = (storage.read(testStr) === testStr)\n\t\t\t\tstorage.remove(testStr)\n\t\t\t\treturn ok\n\t\t\t} catch(e) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t},\n\n\t\t_assignPluginFnProp: function(pluginFnProp, propName) {\n\t\t\tvar oldFn = this[propName]\n\t\t\tthis[propName] = function pluginFn() {\n\t\t\t\tvar args = slice(arguments, 0)\n\t\t\t\tvar self = this\n\n\t\t\t\t// super_fn calls the old function which was overwritten by\n\t\t\t\t// this mixin.\n\t\t\t\tfunction super_fn() {\n\t\t\t\t\tif (!oldFn) { return }\n\t\t\t\t\teach(arguments, function(arg, i) {\n\t\t\t\t\t\targs[i] = arg\n\t\t\t\t\t})\n\t\t\t\t\treturn oldFn.apply(self, args)\n\t\t\t\t}\n\n\t\t\t\t// Give mixing function access to super_fn by prefixing all mixin function\n\t\t\t\t// arguments with super_fn.\n\t\t\t\tvar newFnArgs = [super_fn].concat(args)\n\n\t\t\t\treturn pluginFnProp.apply(self, newFnArgs)\n\t\t\t}\n\t\t},\n\n\t\t_serialize: function(obj) {\n\t\t\treturn JSON.stringify(obj)\n\t\t},\n\n\t\t_deserialize: function(strVal, defaultVal) {\n\t\t\tif (!strVal) { return defaultVal }\n\t\t\t// It is possible that a raw string value has been previously stored\n\t\t\t// in a storage without using store.js, meaning it will be a raw\n\t\t\t// string value instead of a JSON serialized string. By defaulting\n\t\t\t// to the raw string value in case of a JSON parse error, we allow\n\t\t\t// for past stored values to be forwards-compatible with store.js\n\t\t\tvar val = ''\n\t\t\ttry { val = JSON.parse(strVal) }\n\t\t\tcatch(e) { val = strVal }\n\n\t\t\treturn (val !== undefined ? val : defaultVal)\n\t\t},\n\t\t\n\t\t_addStorage: function(storage) {\n\t\t\tif (this.enabled) { return }\n\t\t\tif (this._testStorage(storage)) {\n\t\t\t\tthis.storage = storage\n\t\t\t\tthis.enabled = true\n\t\t\t}\n\t\t},\n\n\t\t_addPlugin: function(plugin) {\n\t\t\tvar self = this\n\n\t\t\t// If the plugin is an array, then add all plugins in the array.\n\t\t\t// This allows for a plugin to depend on other plugins.\n\t\t\tif (isList(plugin)) {\n\t\t\t\teach(plugin, function(plugin) {\n\t\t\t\t\tself._addPlugin(plugin)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Keep track of all plugins we've seen so far, so that we\n\t\t\t// don't add any of them twice.\n\t\t\tvar seenPlugin = pluck(this.plugins, function(seenPlugin) {\n\t\t\t\treturn (plugin === seenPlugin)\n\t\t\t})\n\t\t\tif (seenPlugin) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.plugins.push(plugin)\n\n\t\t\t// Check that the plugin is properly formed\n\t\t\tif (!isFunction(plugin)) {\n\t\t\t\tthrow new Error('Plugins must be function values that return objects')\n\t\t\t}\n\n\t\t\tvar pluginProperties = plugin.call(this)\n\t\t\tif (!isObject(pluginProperties)) {\n\t\t\t\tthrow new Error('Plugins must return an object of function properties')\n\t\t\t}\n\n\t\t\t// Add the plugin function properties to this store instance.\n\t\t\teach(pluginProperties, function(pluginFnProp, propName) {\n\t\t\t\tif (!isFunction(pluginFnProp)) {\n\t\t\t\t\tthrow new Error('Bad plugin property: '+propName+' from plugin '+plugin.name+'. Plugins should only return functions.')\n\t\t\t\t}\n\t\t\t\tself._assignPluginFnProp(pluginFnProp, propName)\n\t\t\t})\n\t\t},\n\t\t\n\t\t// Put deprecated properties in the private API, so as to not expose it to accidential\n\t\t// discovery through inspection of the store object.\n\t\t\n\t\t// Deprecated: addStorage\n\t\taddStorage: function(storage) {\n\t\t\t_warn('store.addStorage(storage) is deprecated. Use createStore([storages])')\n\t\t\tthis._addStorage(storage)\n\t\t}\n\t}\n\n\tvar store = create(_privateStoreProps, storeAPI, {\n\t\tplugins: []\n\t})\n\tstore.raw = {}\n\teach(store, function(prop, propName) {\n\t\tif (isFunction(prop)) {\n\t\t\tstore.raw[propName] = bind(store, prop)\t\t\t\n\t\t}\n\t})\n\teach(storages, function(storage) {\n\t\tstore._addStorage(storage)\n\t})\n\teach(plugins, function(plugin) {\n\t\tstore._addPlugin(plugin)\n\t})\n\treturn store\n}\n\n},{\"./util\":18}],18:[function(require,module,exports){\n(function (global){\nvar assign = make_assign()\nvar create = make_create()\nvar trim = make_trim()\nvar Global = (typeof window !== 'undefined' ? window : global)\n\nmodule.exports = {\n\tassign: assign,\n\tcreate: create,\n\ttrim: trim,\n\tbind: bind,\n\tslice: slice,\n\teach: each,\n\tmap: map,\n\tpluck: pluck,\n\tisList: isList,\n\tisFunction: isFunction,\n\tisObject: isObject,\n\tGlobal: Global\n}\n\nfunction make_assign() {\n\tif (Object.assign) {\n\t\treturn Object.assign\n\t} else {\n\t\treturn function shimAssign(obj, props1, props2, etc) {\n\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\teach(Object(arguments[i]), function(val, key) {\n\t\t\t\t\tobj[key] = val\n\t\t\t\t})\n\t\t\t}\t\t\t\n\t\t\treturn obj\n\t\t}\n\t}\n}\n\nfunction make_create() {\n\tif (Object.create) {\n\t\treturn function create(obj, assignProps1, assignProps2, etc) {\n\t\t\tvar assignArgsList = slice(arguments, 1)\n\t\t\treturn assign.apply(this, [Object.create(obj)].concat(assignArgsList))\n\t\t}\n\t} else {\n\t\tfunction F() {} // eslint-disable-line no-inner-declarations\n\t\treturn function create(obj, assignProps1, assignProps2, etc) {\n\t\t\tvar assignArgsList = slice(arguments, 1)\n\t\t\tF.prototype = obj\n\t\t\treturn assign.apply(this, [new F()].concat(assignArgsList))\n\t\t}\n\t}\n}\n\nfunction make_trim() {\n\tif (String.prototype.trim) {\n\t\treturn function trim(str) {\n\t\t\treturn String.prototype.trim.call(str)\n\t\t}\n\t} else {\n\t\treturn function trim(str) {\n\t\t\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')\n\t\t}\n\t}\n}\n\nfunction bind(obj, fn) {\n\treturn function() {\n\t\treturn fn.apply(obj, Array.prototype.slice.call(arguments, 0))\n\t}\n}\n\nfunction slice(arr, index) {\n\treturn Array.prototype.slice.call(arr, index || 0)\n}\n\nfunction each(obj, fn) {\n\tpluck(obj, function(val, key) {\n\t\tfn(val, key)\n\t\treturn false\n\t})\n}\n\nfunction map(obj, fn) {\n\tvar res = (isList(obj) ? [] : {})\n\tpluck(obj, function(v, k) {\n\t\tres[k] = fn(v, k)\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunction pluck(obj, fn) {\n\tif (isList(obj)) {\n\t\tfor (var i=0; i<obj.length; i++) {\n\t\t\tif (fn(obj[i], i)) {\n\t\t\t\treturn obj[i]\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (var key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\tif (fn(obj[key], key)) {\n\t\t\t\t\treturn obj[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction isList(val) {\n\treturn (val != null && typeof val != 'function' && typeof val.length == 'number')\n}\n\nfunction isFunction(val) {\n\treturn val && {}.toString.call(val) === '[object Function]'\n}\n\nfunction isObject(val) {\n\treturn val && {}.toString.call(val) === '[object Object]'\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],19:[function(require,module,exports){\nmodule.exports = [\n\t// Listed in order of usage preference\n\trequire('./localStorage'),\n\trequire('./oldFF-globalStorage'),\n\trequire('./oldIE-userDataStorage'),\n\trequire('./cookieStorage'),\n\trequire('./sessionStorage'),\n\trequire('./memoryStorage')\n]\n\n},{\"./cookieStorage\":20,\"./localStorage\":21,\"./memoryStorage\":22,\"./oldFF-globalStorage\":23,\"./oldIE-userDataStorage\":24,\"./sessionStorage\":25}],20:[function(require,module,exports){\n// cookieStorage is useful Safari private browser mode, where localStorage\n// doesn't work but cookies do. This implementation is adopted from\n// https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage\n\nvar util = require('../src/util')\nvar Global = util.Global\nvar trim = util.trim\n\nmodule.exports = {\n\tname: 'cookieStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar doc = Global.document\n\nfunction read(key) {\n\tif (!key || !_has(key)) { return null }\n\tvar regexpStr = \"(?:^|.*;\\\\s*)\" +\n\t\tescape(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n\t\t\"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"\n\treturn unescape(doc.cookie.replace(new RegExp(regexpStr), \"$1\"))\n}\n\nfunction each(callback) {\n\tvar cookies = doc.cookie.split(/; ?/g)\n\tfor (var i = cookies.length - 1; i >= 0; i--) {\n\t\tif (!trim(cookies[i])) {\n\t\t\tcontinue\n\t\t}\n\t\tvar kvp = cookies[i].split('=')\n\t\tvar key = unescape(kvp[0])\n\t\tvar val = unescape(kvp[1])\n\t\tcallback(val, key)\n\t}\n}\n\nfunction write(key, data) {\n\tif(!key) { return }\n\tdoc.cookie = escape(key) + \"=\" + escape(data) + \"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/\"\n}\n\nfunction remove(key) {\n\tif (!key || !_has(key)) {\n\t\treturn\n\t}\n\tdoc.cookie = escape(key) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\"\n}\n\nfunction clearAll() {\n\teach(function(_, key) {\n\t\tremove(key)\n\t})\n}\n\nfunction _has(key) {\n\treturn (new RegExp(\"(?:^|;\\\\s*)\" + escape(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(doc.cookie)\n}\n\n},{\"../src/util\":18}],21:[function(require,module,exports){\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'localStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nfunction localStorage() {\n\treturn Global.localStorage\n}\n\nfunction read(key) {\n\treturn localStorage().getItem(key)\n}\n\nfunction write(key, data) {\n\treturn localStorage().setItem(key, data)\n}\n\nfunction each(fn) {\n\tfor (var i = localStorage().length - 1; i >= 0; i--) {\n\t\tvar key = localStorage().key(i)\n\t\tfn(read(key), key)\n\t}\n}\n\nfunction remove(key) {\n\treturn localStorage().removeItem(key)\n}\n\nfunction clearAll() {\n\treturn localStorage().clear()\n}\n\n},{\"../src/util\":18}],22:[function(require,module,exports){\n// memoryStorage is a useful last fallback to ensure that the store\n// is functions (meaning store.get(), store.set(), etc will all function).\n// However, stored values will not persist when the browser navigates to\n// a new page or reloads the current page.\n\nmodule.exports = {\n\tname: 'memoryStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar memoryStorage = {}\n\nfunction read(key) {\n\treturn memoryStorage[key]\n}\n\nfunction write(key, data) {\n\tmemoryStorage[key] = data\n}\n\nfunction each(callback) {\n\tfor (var key in memoryStorage) {\n\t\tif (memoryStorage.hasOwnProperty(key)) {\n\t\t\tcallback(memoryStorage[key], key)\n\t\t}\n\t}\n}\n\nfunction remove(key) {\n\tdelete memoryStorage[key]\n}\n\nfunction clearAll(key) {\n\tmemoryStorage = {}\n}\n\n},{}],23:[function(require,module,exports){\n// oldFF-globalStorage provides storage for Firefox\n// versions 6 and 7, where no localStorage, etc\n// is available.\n\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'oldFF-globalStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar globalStorage = Global.globalStorage\n\nfunction read(key) {\n\treturn globalStorage[key]\n}\n\nfunction write(key, data) {\n\tglobalStorage[key] = data\n}\n\nfunction each(fn) {\n\tfor (var i = globalStorage.length - 1; i >= 0; i--) {\n\t\tvar key = globalStorage.key(i)\n\t\tfn(globalStorage[key], key)\n\t}\n}\n\nfunction remove(key) {\n\treturn globalStorage.removeItem(key)\n}\n\nfunction clearAll() {\n\teach(function(key, _) {\n\t\tdelete globalStorage[key]\n\t})\n}\n\n},{\"../src/util\":18}],24:[function(require,module,exports){\n// oldIE-userDataStorage provides storage for Internet Explorer\n// versions 6 and 7, where no localStorage, sessionStorage, etc\n// is available.\n\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'oldIE-userDataStorage',\n\twrite: write,\n\tread: read,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar storageName = 'storejs'\nvar doc = Global.document\nvar _withStorageEl = _makeIEStorageElFunction()\nvar disable = (Global.navigator ? Global.navigator.userAgent : '').match(/ (MSIE 8|MSIE 9|MSIE 10)\\./) // MSIE 9.x, MSIE 10.x\n\nfunction write(unfixedKey, data) {\n\tif (disable) { return }\n\tvar fixedKey = fixKey(unfixedKey)\n\t_withStorageEl(function(storageEl) {\n\t\tstorageEl.setAttribute(fixedKey, data)\n\t\tstorageEl.save(storageName)\n\t})\n}\n\nfunction read(unfixedKey) {\n\tif (disable) { return }\n\tvar fixedKey = fixKey(unfixedKey)\n\tvar res = null\n\t_withStorageEl(function(storageEl) {\n\t\tres = storageEl.getAttribute(fixedKey)\n\t})\n\treturn res\n}\n\nfunction each(callback) {\n\t_withStorageEl(function(storageEl) {\n\t\tvar attributes = storageEl.XMLDocument.documentElement.attributes\n\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\tvar attr = attributes[i]\n\t\t\tcallback(storageEl.getAttribute(attr.name), attr.name)\n\t\t}\n\t})\n}\n\nfunction remove(unfixedKey) {\n\tvar fixedKey = fixKey(unfixedKey)\n\t_withStorageEl(function(storageEl) {\n\t\tstorageEl.removeAttribute(fixedKey)\n\t\tstorageEl.save(storageName)\n\t})\n}\n\nfunction clearAll() {\n\t_withStorageEl(function(storageEl) {\n\t\tvar attributes = storageEl.XMLDocument.documentElement.attributes\n\t\tstorageEl.load(storageName)\n\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\tstorageEl.removeAttribute(attributes[i].name)\n\t\t}\n\t\tstorageEl.save(storageName)\n\t})\n}\n\n// Helpers\n//////////\n\n// In IE7, keys cannot start with a digit or contain certain chars.\n// See https://github.com/marcuswestin/store.js/issues/40\n// See https://github.com/marcuswestin/store.js/issues/83\nvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\nfunction fixKey(key) {\n\treturn key.replace(/^\\d/, '___$&').replace(forbiddenCharsRegex, '___')\n}\n\nfunction _makeIEStorageElFunction() {\n\tif (!doc || !doc.documentElement || !doc.documentElement.addBehavior) {\n\t\treturn null\n\t}\n\tvar scriptTag = 'script',\n\t\tstorageOwner,\n\t\tstorageContainer,\n\t\tstorageEl\n\n\t// Since #userData storage applies only to specific paths, we need to\n\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t// as a pretty safe option, since all browsers already make a request to\n\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t// since the iframe access rules appear to allow direct access and\n\t// manipulation of the document element, even for a 404 page.  This\n\t// document can be used instead of the current document (which would\n\t// have been limited to the current path) to perform #userData storage.\n\ttry {\n\t\t/* global ActiveXObject */\n\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\tstorageContainer.open()\n\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\tstorageContainer.close()\n\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\tstorageEl = storageOwner.createElement('div')\n\t} catch(e) {\n\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t// security settings or otherwse), fall back to per-path storage\n\t\tstorageEl = doc.createElement('div')\n\t\tstorageOwner = doc.body\n\t}\n\n\treturn function(storeFunction) {\n\t\tvar args = [].slice.call(arguments, 0)\n\t\targs.unshift(storageEl)\n\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\tstorageOwner.appendChild(storageEl)\n\t\tstorageEl.addBehavior('#default#userData')\n\t\tstorageEl.load(storageName)\n\t\tstoreFunction.apply(this, args)\n\t\tstorageOwner.removeChild(storageEl)\n\t\treturn\n\t}\n}\n\n},{\"../src/util\":18}],25:[function(require,module,exports){\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'sessionStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll\n}\n\nfunction sessionStorage() {\n\treturn Global.sessionStorage\n}\n\nfunction read(key) {\n\treturn sessionStorage().getItem(key)\n}\n\nfunction write(key, data) {\n\treturn sessionStorage().setItem(key, data)\n}\n\nfunction each(fn) {\n\tfor (var i = sessionStorage().length - 1; i >= 0; i--) {\n\t\tvar key = sessionStorage().key(i)\n\t\tfn(read(key), key)\n\t}\n}\n\nfunction remove(key) {\n\treturn sessionStorage().removeItem(key)\n}\n\nfunction clearAll() {\n\treturn sessionStorage().clear()\n}\n\n},{\"../src/util\":18}],26:[function(require,module,exports){\nmodule.exports={\n  \"_args\": [\n    [\n      {\n        \"raw\": \"yasgui-utils@^1.6.7\",\n        \"scope\": null,\n        \"escapedName\": \"yasgui-utils\",\n        \"name\": \"yasgui-utils\",\n        \"rawSpec\": \"^1.6.7\",\n        \"spec\": \">=1.6.7 <2.0.0\",\n        \"type\": \"range\"\n      },\n      \"/root/yasqe/sparql-generate-yasqe\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.6.7 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.7\",\n  \"_inCache\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_nodeVersion\": \"7.10.0\",\n  \"_npmOperationalInternal\": {\n    \"host\": \"s3://npm-registry-packages\",\n    \"tmp\": \"tmp/yasgui-utils-1.6.7.tgz_1495459781202_0.06725964159704745\"\n  },\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"_npmVersion\": \"4.2.0\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"yasgui-utils@^1.6.7\",\n    \"scope\": null,\n    \"escapedName\": \"yasgui-utils\",\n    \"name\": \"yasgui-utils\",\n    \"rawSpec\": \"^1.6.7\",\n    \"spec\": \">=1.6.7 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.7.tgz\",\n  \"_shasum\": \"2bcfc5a315688de3ae6057883d9ae342b205f267\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.6.7\",\n  \"_where\": \"/root/yasqe/sparql-generate-yasqe\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^2.0.4\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"2bcfc5a315688de3ae6057883d9ae342b205f267\",\n    \"tarball\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.7.tgz\"\n  },\n  \"gitHead\": \"6031b1cb732d390b29cd5376dceb9a9d665bbd11\",\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"scripts\": {},\n  \"version\": \"1.6.7\"\n}\n\n},{}],27:[function(require,module,exports){\nwindow.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n\n},{\"../package.json\":26,\"./storage.js\":28,\"./svg.js\":29}],28:[function(require,module,exports){\nvar store = require(\"store\");\nvar times = {\n  day: function() {\n    return 1000 * 3600 * 24; //millis to day\n  },\n  month: function() {\n    times.day() * 30;\n  },\n  year: function() {\n    times.month() * 12;\n  }\n};\nfunction isQuotaExceeded(e) {\n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n}\nvar root = (module.exports = {\n  set: function(key, val, exp, onQuotaExceeded) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key && val !== undefined) {\n      if (typeof exp == \"string\") {\n        exp = times[exp]();\n      }\n      //try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n      if (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n      try {\n        store.set(key, {\n          val: val,\n          exp: exp,\n          time: new Date().getTime()\n        });\n      } catch (e) {\n        e.quotaExceeded = isQuotaExceeded(e);\n        if (e.quotaExceeded && onQuotaExceeded) {\n          onQuotaExceeded(e);\n        } else {\n          throw e;\n        }\n      }\n    }\n  },\n  remove: function(key) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key) store.remove(key);\n  },\n  removeAll: function(filter) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (!filter) {\n      store.clearAll();\n    } else if (typeof filter === \"function\") {\n      store.each(function(value, key) {\n        if (filter(key, value)) root.remove(key);\n      });\n    }\n  },\n  get: function(key) {\n    if (!store.enabled) return null; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key) {\n      var info = store.get(key);\n      if (!info) {\n        return null;\n      }\n      if (info.exp && new Date().getTime() - info.time > info.exp) {\n        return null;\n      }\n      return info.val;\n    } else {\n      return null;\n    }\n  }\n});\n\n},{\"store\":14}],29:[function(require,module,exports){\nmodule.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};\n},{}],30:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"yasgui-yasqe\",\n  \"description\": \"Yet Another SPARQL Query Editor\",\n  \"version\": \"2.11.14\",\n  \"main\": \"src/main.js\",\n  \"license\": \"MIT\",\n  \"author\": \"Laurens Rietveld\",\n  \"homepage\": \"http://yasqe.yasgui.org\",\n  \"scripts\": {\n    \"dev\": \"gulp serve\",\n    \"build\": \"gulp\",\n    \"patch\": \"gulp patch\",\n    \"minor\": \"gulp minor\",\n    \"major\": \"gulp major\"\n  },\n  \"devDependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"browserify\": \"^13.1.0\",\n    \"browserify-shim\": \"^3.8.12\",\n    \"browserify-transform-tools\": \"^1.6.0\",\n    \"exorcist\": \"^0.4.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-autoprefixer\": \"^3.1.0\",\n    \"gulp-bump\": \"^2.2.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-connect\": \"^4.2.0\",\n    \"gulp-cssimport\": \"^3.1.0\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-filter\": \"^4.0.0\",\n    \"gulp-git\": \"^2.4.1\",\n    \"gulp-jsvalidate\": \"^2.1.0\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-streamify\": \"1.0.2\",\n    \"gulp-tag-version\": \"^1.3.0\",\n    \"gulp-uglify\": \"^1.5.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"require-dir\": \"^0.3.2\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\n  },\n  \"dependencies\": {\n    \"codemirror\": \"5.17.0\",\n    \"jquery\": \"^2.2.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"prettier\": \"^1.4.4\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"yasgui-utils\": \"^1.6.7\"\n  },\n  \"optionalShim\": {\n    \"codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    },\n    \"jquery\": {\n      \"require\": \"jquery\",\n      \"global\": \"jQuery\"\n    },\n    \"../../lib/codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    }\n  }\n}\n\n},{}],31:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n  utils = require(\"../utils.js\"),\n  yutils = require(\"yasgui-utils\"),\n  Trie = require(\"../../lib/trie.js\"),\n  YASQE = require(\"../main.js\");\n\nmodule.exports = function(YASQE, yasqe) {\n  var completionNotifications = {};\n  var completers = {};\n  var tries = {};\n\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\n    autoComplete(true);\n  });\n  yasqe.on(\"change\", function() {\n    var needPossibleAdjustment = [];\n    for (var notificationName in completionNotifications) {\n      if (completionNotifications[notificationName].is(\":visible\")) {\n        needPossibleAdjustment.push(completionNotifications[notificationName]);\n      }\n    }\n    if (needPossibleAdjustment.length > 0) {\n      //position completion notifications\n      var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n      var offset = 0;\n      if (scrollBar.is(\":visible\")) {\n        offset = scrollBar.outerWidth();\n      }\n      needPossibleAdjustment.forEach(function(notification) {\n        notification.css(\"right\", offset);\n      });\n    }\n  });\n\n  /**\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\n\t *\n\t * @method doc.storeBulkCompletions\n\t * @param completions {array}\n\t */\n  var storeBulkCompletions = function(completer, completions) {\n    // store array as trie\n    tries[completer.name] = new Trie();\n    for (var i = 0; i < completions.length; i++) {\n      tries[completer.name].insert(completions[i]);\n    }\n    // store in localstorage as well\n    var storageId = utils.getPersistencyId(yasqe, completer.persistent);\n    if (storageId) yutils.storage.set(storageId, completions, \"month\", yasqe.options.onQuotaExceeded);\n  };\n\n  var initCompleter = function(name, completionInit) {\n    var completer = (completers[name] = new completionInit(yasqe, name));\n    completer.name = name;\n    if (completer.bulk) {\n      var storeArrayAsBulk = function(suggestions) {\n        if (suggestions && suggestions instanceof Array && suggestions.length > 0) {\n          storeBulkCompletions(completer, suggestions);\n        }\n      };\n      if (completer.get instanceof Array) {\n        // we don't care whether the completions are already stored in\n        // localstorage. just use this one\n        storeArrayAsBulk(completer.get);\n      } else {\n        // if completions are defined in localstorage, use those! (calling the\n        // function may come with overhead (e.g. async calls))\n        var completionsFromStorage = null;\n        var persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\n        if (persistencyIdentifier) completionsFromStorage = yutils.storage.get(persistencyIdentifier);\n        if (completionsFromStorage && completionsFromStorage.length > 0) {\n          storeArrayAsBulk(completionsFromStorage);\n        } else {\n          // nothing in storage. check whether we have a function via which we\n          // can get our prefixes\n          if (completer.get instanceof Function) {\n            if (completer.async) {\n              completer.get(null, storeArrayAsBulk);\n            } else {\n              storeArrayAsBulk(completer.get());\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var autoComplete = function(fromAutoShow) {\n    if (yasqe.somethingSelected()) return;\n    var tryHintType = function(completer) {\n      if (\n        fromAutoShow && // from autoShow, i.e. this gets called each time the editor content changes\n        (!completer.autoShow || // autoshow for  this particular type of autocompletion is -not- enabled\n          (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\n      ) {\n        return false;\n      }\n\n      var hintConfig = {\n        closeCharacters: /(?=a)b/,\n        completeSingle: false\n      };\n      if (!completer.bulk && completer.async) {\n        hintConfig.async = true;\n      }\n      var wrappedHintCallback = function(yasqe, callback) {\n        return getCompletionHintsObject(completer, callback);\n      };\n      var result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\n      return true;\n    };\n    for (var completerName in completers) {\n      if ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\n      var completer = completers[completerName];\n      if (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\n\n      if (!completer.isValidCompletionPosition()) {\n        //if needed, fire callbacks for when we are -not- in valid completion position\n        if (completer.callbacks && completer.callbacks.invalidPosition) {\n          completer.callbacks.invalidPosition(yasqe, completer);\n        }\n        //not in a valid position, so continue to next completion candidate type\n        continue;\n      }\n      // run valid position handler, if there is one (if it returns false, stop the autocompletion!)\n      if (completer.callbacks && completer.callbacks.validPosition) {\n        if (completer.callbacks.validPosition(yasqe, completer) === false) continue;\n      }\n      var success = tryHintType(completer);\n      if (success) break;\n    }\n  };\n\n  var getCompletionHintsObject = function(completer, callback) {\n    var getSuggestionsFromToken = function(partialToken) {\n      var stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\n      var suggestions = [];\n      if (tries[completer.name]) {\n        suggestions = tries[completer.name].autoComplete(stringToAutocomplete);\n      } else if (typeof completer.get == \"function\" && completer.async == false) {\n        suggestions = completer.get(stringToAutocomplete);\n      } else if (typeof completer.get == \"object\") {\n        var partialTokenLength = stringToAutocomplete.length;\n        for (var i = 0; i < completer.get.length; i++) {\n          var completion = completer.get[i];\n          if (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\n            suggestions.push(completion);\n          }\n        }\n      }\n      return getSuggestionsAsHintObject(suggestions, completer, partialToken);\n    };\n\n    var token = yasqe.getCompleteToken();\n    if (completer.preProcessToken) {\n      token = completer.preProcessToken(token);\n    }\n\n    if (token) {\n      // use custom completionhint function, to avoid reaching a loop when the\n      // completionhint is the same as the current token\n      // regular behaviour would keep changing the codemirror dom, hence\n      // constantly calling this callback\n      if (!completer.bulk && completer.async) {\n        var wrappedCallback = function(suggestions) {\n          callback(getSuggestionsAsHintObject(suggestions, completer, token));\n        };\n        completer.get(token, wrappedCallback);\n      } else {\n        return getSuggestionsFromToken(token);\n      }\n    }\n  };\n\n  /**\n\t *  get our array of suggestions (strings) in the codemirror hint format\n\t */\n  var getSuggestionsAsHintObject = function(suggestions, completer, token) {\n    var hintList = [];\n    for (var i = 0; i < suggestions.length; i++) {\n      var suggestedString = suggestions[i];\n      if (completer.postProcessToken) {\n        suggestedString = completer.postProcessToken(token, suggestedString);\n      }\n      hintList.push({\n        text: suggestedString,\n        displayText: suggestedString,\n        hint: selectHint\n      });\n    }\n\n    var cur = yasqe.getCursor();\n    var returnObj = {\n      completionToken: token.string,\n      list: hintList,\n      from: {\n        line: cur.line,\n        ch: token.start\n      },\n      to: {\n        line: cur.line,\n        ch: token.end\n      }\n    };\n    //if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\n    if (completer.callbacks) {\n      for (var callbackName in completer.callbacks) {\n        if (completer.callbacks[callbackName]) {\n          YASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\n        }\n      }\n    }\n    return returnObj;\n  };\n\n  return {\n    init: initCompleter,\n    completers: completers,\n    notifications: {\n      getEl: function(completer) {\n        return $(completionNotifications[completer.name]);\n      },\n      show: function(yasqe, completer) {\n        //only draw when the user needs to use a keypress to summon autocompletions\n        if (!completer.autoshow) {\n          if (!completionNotifications[completer.name])\n            completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\n          completionNotifications[completer.name]\n            .show()\n            .text(\"Press CTRL - <spacebar> to autocomplete\")\n            .appendTo($(yasqe.getWrapperElement()));\n        }\n      },\n      hide: function(yasqe, completer) {\n        if (completionNotifications[completer.name]) {\n          completionNotifications[completer.name].hide();\n        }\n      }\n    },\n    autoComplete: autoComplete,\n    getTrie: function(completer) {\n      return typeof completer == \"string\" ? tries[completer] : tries[completer.name];\n    }\n  };\n};\n\n/**\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\n */\nvar selectHint = function(yasqe, data, completion) {\n  if (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\n    yasqe.replaceRange(completion.text, data.from, data.to);\n  }\n};\n\n//\n//module.exports = {\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n//\tshowCompletionNotification: showCompletionNotification,\n//\thideCompletionNotification: hideCompletionNotification,\n//\tautoComplete: autoComplete,\n//\tautocompleteVariables: autocompleteVariables,\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\n//\tfetchFromLov: fetchFromLov,\n////\tstoreBulkCompletions: storeBulkCompletions,\n//\tloadBulkCompletions: loadBulkCompletions,\n//};\n\n},{\"../../lib/trie.js\":4,\"../main.js\":41,\"../utils.js\":47,\"jquery\":undefined,\"yasgui-utils\":27}],32:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n  return {\n    isValidCompletionPosition: function() {\n      return module.exports.isValidCompletionPosition(yasqe);\n    },\n    get: function(token, callback) {\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\n    },\n    preProcessToken: function(token) {\n      return module.exports.preProcessToken(yasqe, token);\n    },\n    postProcessToken: function(token, suggestedString) {\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\n    },\n    async: true,\n    bulk: false,\n    autoShow: false,\n    persistent: name,\n    callbacks: {\n      validPosition: yasqe.autocompleters.notifications.show,\n      invalidPosition: yasqe.autocompleters.notifications.hide\n    }\n  };\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n  var token = yasqe.getCompleteToken();\n  if (token.string.indexOf(\"?\") == 0) return false;\n  var cur = yasqe.getCursor();\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n  if (previousToken.string == \"a\") return true;\n  if (previousToken.string == \"rdf:type\") return true;\n  if (previousToken.string == \"rdfs:domain\") return true;\n  if (previousToken.string == \"rdfs:range\") return true;\n  return false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\n};\n\n},{\"./utils\":35,\"./utils.js\":35,\"jquery\":undefined}],33:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\nvar tokenTypes = {\n  \"string-2\": \"prefixed\",\n  atom: \"var\"\n};\n\nmodule.exports = function(yasqe, completerName) {\n  //this autocompleter also fires on-change!\n  yasqe.on(\"change\", function() {\n    module.exports.appendPrefixIfNeeded(yasqe, completerName);\n  });\n\n  return {\n    isValidCompletionPosition: function() {\n      return module.exports.isValidCompletionPosition(yasqe);\n    },\n    get: function(token, callback) {\n      $.get(module.exports.fetchFrom, function(data) {\n        var prefixArray = [];\n        for (var prefix in data) {\n          if (prefix == \"bif\") continue; // skip this one! see #231\n          var completeString = prefix + \": <\" + data[prefix] + \">\";\n          prefixArray.push(completeString); // the array we want to store in localstorage\n        }\n\n        prefixArray.sort();\n        callback(prefixArray);\n      });\n    },\n    preProcessToken: function(token) {\n      return module.exports.preprocessPrefixTokenForCompletion(yasqe, token);\n    },\n    async: true,\n    bulk: true,\n    autoShow: true,\n    persistent: completerName,\n    callbacks: {\n      pick: function() {\n        yasqe.collapsePrefixes(false);\n      }\n    }\n  };\n};\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n  var cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\n\n  // not at end of line\n  if (yasqe.getLine(cur.line).length > cur.ch) return false;\n\n  if (token.type != \"ws\") {\n    // we want to complete token, e.g. when the prefix starts with an a\n    // (treated as a token in itself..)\n    // but we to avoid including the PREFIX tag. So when we have just\n    // typed a space after the prefix tag, don't get the complete token\n    token = yasqe.getCompleteToken();\n  }\n\n  // we shouldnt be at the uri part the prefix declaration\n  // also check whether current token isnt 'a' (that makes codemirror\n  // thing a namespace is a possiblecurrent\n  if (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1) return false;\n\n  // First token of line needs to be PREFIX,\n  // there should be no trailing text (otherwise, text is wrongly inserted\n  // in between)\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n  if (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\n  return true;\n};\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\n  var previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\n  if (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\n    //combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\n    //we want the token to be \"bla: <\", en not \"<\"\n    token = {\n      start: previousToken.start,\n      end: token.end,\n      string: previousToken.string + \" \" + token.string,\n      state: token.state\n    };\n  }\n  return token;\n};\n/**\n * Check whether typed prefix is declared. If not, automatically add declaration\n * using list from prefix.cc\n *\n * @param yasqe\n */\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\n  if (!yasqe.autocompleters.getTrie(completerName)) return; // no prefixed defined. just stop\n  if (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\n  var cur = yasqe.getCursor();\n\n  var token = yasqe.getTokenAt(cur);\n  if (tokenTypes[token.type] == \"prefixed\") {\n    var colonIndex = token.string.indexOf(\":\");\n    if (colonIndex !== -1) {\n      // check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\n      //\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\n      var lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\n      var previousToken = yasqe.getTokenAt({\n        line: cur.line,\n        ch: token.start\n      }); // needs to be null (beginning of line), or whitespace\n      if (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\n        // check whether it isnt defined already (saves us from looping\n        // through the array)\n        var currentPrefix = token.string.substring(0, colonIndex + 1);\n        var queryPrefixes = yasqe.getPrefixesFromQuery();\n        if (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\n          // ok, so it isnt added yet!\n          var completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\n          if (completions.length > 0) {\n            yasqe.addPrefixes(completions[0]);\n          }\n        }\n      }\n    }\n  }\n};\n\nmodule.exports.fetchFrom = (window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\") +\n  \"prefix.cc/popular/all.file.json\";\n\n},{\"jquery\":undefined}],34:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n  return {\n    isValidCompletionPosition: function() {\n      return module.exports.isValidCompletionPosition(yasqe);\n    },\n    get: function(token, callback) {\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\n    },\n    preProcessToken: function(token) {\n      return module.exports.preProcessToken(yasqe, token);\n    },\n    postProcessToken: function(token, suggestedString) {\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\n    },\n    async: true,\n    bulk: false,\n    autoShow: false,\n    persistent: name,\n    callbacks: {\n      validPosition: yasqe.autocompleters.notifications.show,\n      invalidPosition: yasqe.autocompleters.notifications.hide\n    }\n  };\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n  var token = yasqe.getCompleteToken();\n  if (token.string.length == 0) return false; //we want -something- to autocomplete\n  if (token.string.indexOf(\"?\") == 0) return false; // we are typing a var\n  if ($.inArray(\"a\", token.state.possibleCurrent) >= 0) return true; // predicate pos\n  var cur = yasqe.getCursor();\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n  if (previousToken.string == \"rdfs:subPropertyOf\") return true;\n\n  // hmm, we would like -better- checks here, e.g. checking whether we are\n  // in a subject, and whether next item is a rdfs:subpropertyof.\n  // difficult though... the grammar we use is unreliable when the query\n  // is invalid (i.e. during typing), and often the predicate is not typed\n  // yet, when we are busy writing the subject...\n  return false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\n};\n\n},{\"./utils\":35,\"./utils.js\":35,\"jquery\":undefined}],35:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), yutils = require(\"yasgui-utils\");\n/**\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\n */\n\n/**\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\n * Stores additional info such as the used namespace and prefix in the token object\n */\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\n  var queryPrefixes = yasqe.getPrefixesFromQuery();\n  if (!token.string.indexOf(\"<\") == 0) {\n    token.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\n\n    if (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\n      token.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\n    }\n  }\n\n  token.autocompletionString = token.string.trim();\n  if (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\n    // hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\n    for (var prefix in queryPrefixes) {\n      if (token.tokenPrefix === prefix + \":\") {\n        token.autocompletionString = queryPrefixes[prefix];\n        token.autocompletionString += token.string.substring(prefix.length + 1);\n        break;\n      }\n    }\n  }\n\n  if (token.autocompletionString.indexOf(\"<\") == 0)\n    token.autocompletionString = token.autocompletionString.substring(1);\n  if (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1)\n    token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\n  return token;\n};\n\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\n  if (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\n    // we need to get the suggested string back to prefixed form\n    suggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\n  } else {\n    // it is a regular uri. add '<' and '>' to string\n    suggestedString = \"<\" + suggestedString + \">\";\n  }\n  return suggestedString;\n};\n\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\nvar reqProtocol = window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\";\nvar fetchFromLov = function(yasqe, completer, token, callback) {\n  if (!token || !token.string || token.string.trim().length == 0) {\n    yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Nothing to autocomplete yet!\");\n    return false;\n  }\n  var maxResults = 50;\n\n  var args = {\n    q: token.autocompletionString,\n    page: 1\n  };\n  if (completer.name == \"classes\") {\n    args.type = \"class\";\n  } else {\n    args.type = \"property\";\n  }\n  var results = [];\n  var url = \"\";\n  var updateUrl = function() {\n    url = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\n  };\n  updateUrl();\n  var increasePage = function() {\n    args.page++;\n    updateUrl();\n  };\n  var doRequests = function() {\n    $.get(url, function(data) {\n      for (var i = 0; i < data.results.length; i++) {\n        if ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\n          results.push(data.results[i].uri[0]);\n        } else {\n          results.push(data.results[i].uri);\n        }\n      }\n      if (results.length < data.total_results && results.length < maxResults) {\n        increasePage();\n        doRequests();\n      } else {\n        //if notification bar is there, show feedback, or close\n        if (results.length > 0) {\n          yasqe.autocompleters.notifications.hide(yasqe, completer);\n        } else {\n          yasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\n        }\n        callback(results);\n        // requests done! Don't call this function again\n      }\n    }).fail(function(jqXHR, textStatus, errorThrown) {\n      yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Failed fetching suggestions..\");\n    });\n  };\n  //if notification bar is there, show a loader\n  yasqe.autocompleters.notifications\n    .getEl(completer)\n    .empty()\n    .append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\n    .append($(yutils.svg.getElement(require(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));\n  doRequests();\n};\n\nmodule.exports = {\n  fetchFromLov: fetchFromLov,\n  preprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n  postprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion\n};\n\n},{\"../imgs.js\":40,\"./utils.js\":35,\"jquery\":undefined,\"yasgui-utils\":27}],36:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe) {\n  return {\n    isValidCompletionPosition: function() {\n      var token = yasqe.getTokenAt(yasqe.getCursor());\n      if (token.type != \"ws\") {\n        token = yasqe.getCompleteToken(token);\n        if (token && token.string.indexOf(\"?\") == 0) {\n          return true;\n        }\n      }\n      return false;\n    },\n    get: function(token) {\n      if (token.trim().length == 0) return []; //nothing to autocomplete\n      var distinctVars = {};\n      //do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\n      $(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\n        var variable = this.innerHTML;\n        if (variable.indexOf(\"?\") == 0) {\n          //ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\n          var nextEl = $(this).next();\n          var nextElClass = nextEl.attr(\"class\");\n          if (nextElClass && nextEl.attr(\"class\").indexOf(\"cm-atom\") >= 0) {\n            variable += nextEl.text();\n          }\n\n          //skip single questionmarks\n          if (variable.length <= 1) return;\n\n          //it should match our token ofcourse\n          if (variable.indexOf(token) !== 0) return;\n\n          //skip exact matches\n          if (variable == token) return;\n\n          //store in map so we have a unique list\n          distinctVars[variable] = true;\n        }\n      });\n      var variables = [];\n      for (var variable in distinctVars) {\n        variables.push(variable);\n      }\n      variables.sort();\n      return variables;\n    },\n    async: false,\n    bulk: false,\n    autoShow: true\n  };\n};\n\n},{\"jquery\":undefined}],37:[function(require,module,exports){\nvar sparql = require(\"./sparql.js\"), $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nvar quote = function(string) {\n  return \"'\" + string + \"'\";\n};\nmodule.exports = {\n  createCurlString: function(yasqe, config) {\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\n    var url = ajaxConfig.url;\n    if (ajaxConfig.url.indexOf(\"http\") !== 0) {\n      //this is either a relative or absolute url, which is not supported by CURL.\n      //Add domain, schema, etc etc\n      var url = window.location.protocol + \"//\" + window.location.host;\n      if (ajaxConfig.url.indexOf(\"/\") === 0) {\n        //its an absolute path\n        url += ajaxConfig.url;\n      } else {\n        //relative, so append current location to url first\n        url += window.location.pathname + ajaxConfig.url;\n      }\n    }\n    var cmds = [\"curl\", url, \"-X\", yasqe.options.sparql.requestMethod];\n    if (yasqe.options.sparql.requestMethod == \"POST\") {\n      cmds.push(\"--data \" + quote($.param(ajaxConfig.data)));\n    }\n    for (var header in ajaxConfig.headers) {\n      cmds.push(\"-H \" + quote(header + \": \" + ajaxConfig.headers[header]));\n    }\n    return cmds.join(\" \");\n  }\n};\n\n},{\"./sparql.js\":44,\"jquery\":undefined}],38:[function(require,module,exports){\n/**\n * The default options of YASQE (check the CodeMirror documentation for even\n * more options, such as disabling line numbers, or changing keyboard shortcut\n * keys). Either change the default options by setting YASQE.defaults, or by\n * passing your own options as second argument to the YASQE constructor\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), YASQE = require(\"./main.js\");\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\n  mode: \"sparql11\",\n  /**\n\t * Query string\n\t */\n  value: \"PREFIX iter: <http://w3id.org/sparql-generate/iter/>\\nPREFIX fn: <http://w3id.org/sparql-generate/fn/>\\nPREFIX ex: <http://example.org/>\\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\\n\\nSOURCE <venue.json> AS ?source\\nITERATOR iter:JSONPath(?source, '$.*' ) AS ?venue\\nWHERE {} \\nLIMIT 10\\nCONSTRUCT { \\n  <http://loc.example.com/city/{ fn:JSONPath(?venue, '$.location.city' ) }> a ex:City ;\\n     geo:lat  ?{ fn:JSONPath(?venue, '$.venue.latitude' ) } ;\\n     geo:long ?{ fn:JSONPath(?venue, '$.venue.longitude' ) } ;\\n     ex:countryCode 'The country code is { fn:JSONPath(?venue, '$.location.country' ) }'@en .\\n}\\n\",\n  highlightSelectionMatches: {\n    showToken: /\\w/\n  },\n  tabMode: \"indent\",\n  lineNumbers: true,\n  lineWrapping: true,\n  backdrop: false,\n  foldGutter: {\n    rangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\n  },\n  collapsePrefixesOnLoad: false,\n  gutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n  matchBrackets: true,\n  fixedGutter: true,\n  syntaxErrorCheck: true,\n  onQuotaExceeded: function(e) {\n    //fail silently\n    console.warn(\"Could not store in localstorage. Skipping..\", e);\n  },\n  /**\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\n\t *\n\t * @property extraKeys\n\t * @type object\n\t */\n  extraKeys: {\n    //\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\n    //\t\t\t\t\t\tYASQE.autoComplete(yasqe);\n    //\t\t\t\t\t},\n    \"Ctrl-Space\": YASQE.autoComplete,\n\n    \"Cmd-Space\": YASQE.autoComplete,\n    \"Ctrl-D\": YASQE.deleteLine,\n    \"Ctrl-K\": YASQE.deleteLine,\n    \"Shift-Ctrl-K\": YASQE.deleteLine,\n    \"Cmd-D\": YASQE.deleteLine,\n    \"Cmd-K\": YASQE.deleteLine,\n    \"Ctrl-/\": YASQE.commentLines,\n    \"Cmd-/\": YASQE.commentLines,\n    \"Ctrl-Alt-Down\": YASQE.copyLineDown,\n    \"Ctrl-Alt-Up\": YASQE.copyLineUp,\n    \"Cmd-Alt-Down\": YASQE.copyLineDown,\n    \"Cmd-Alt-Up\": YASQE.copyLineUp,\n    \"Shift-Ctrl-F\": YASQE.doAutoFormat,\n    \"Shift-Cmd-F\": YASQE.doAutoFormat,\n    \"Ctrl-]\": YASQE.indentMore,\n    \"Cmd-]\": YASQE.indentMore,\n    \"Ctrl-[\": YASQE.indentLess,\n    \"Cmd-[\": YASQE.indentLess,\n    \"Ctrl-S\": YASQE.storeQuery,\n    \"Cmd-S\": YASQE.storeQuery,\n    \"Ctrl-Enter\": YASQE.executeQuery,\n    \"Cmd-Enter\": YASQE.executeQuery,\n    F11: function(yasqe) {\n      yasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\n    },\n    Esc: function(yasqe) {\n      if (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\n    }\n  },\n  cursorHeight: 0.9,\n\n  /**\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\n\t */\n  createShareLink: YASQE.createShareLink,\n\n  createShortLink: null,\n\n  /**\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\n\t */\n  consumeShareLink: YASQE.consumeShareLink,\n\n  /**\n\t * Change persistency settings for the YASQE query value. Setting the values\n\t * to null, will disable persistancy: nothing is stored between browser\n\t * sessions Setting the values to a string (or a function which returns a\n\t * string), will store the query in localstorage using the specified string.\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\n\t * page\n\t *\n\t * @type function|string\n\t */\n  persistent: function(yasqe) {\n    return \"yasqe_\" + $(yasqe.getWrapperElement()).closest(\"[id]\").attr(\"id\") + \"_queryVal\";\n  },\n\n  /**\n\t * Settings for querying sparql endpoints\n\t */\n  sparql: {\n    queryName: function(yasqe) {\n      return yasqe.getQueryMode();\n    },\n    showQueryButton: false,\n\n    /**f\n\t\t * Endpoint to query\n\t\t *\n\t\t * @property sparql.endpoint\n\t\t * @type String|function\n\t\t */\n    endpoint: \"http://dbpedia.org/sparql\",\n    /**\n\t\t * Request method via which to access SPARQL endpoint\n\t\t *\n\t\t * @property sparql.requestMethod\n\t\t * @type String|function\n\t\t */\n    requestMethod: \"POST\",\n\n    /**\n\t\t * @type String|function\n\t\t */\n    acceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\n    /**\n\t\t * @type String|function\n\t\t */\n    acceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\n    /**\n\t\t * @type String|function\n\t\t */\n    acceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\n\n    /**\n\t\t * Named graphs to query.\n\t\t */\n    namedGraphs: [],\n    /**\n\t\t * Default graphs to query.\n\t\t */\n    defaultGraphs: [],\n\n    /**\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\n\t\t */\n    args: [],\n\n    /**\n\t\t * Additional request headers\n\t\t */\n    headers: {},\n\n    getQueryForAjax: null,\n    /**\n\t\t * Set of ajax callbacks\n\t\t */\n    callbacks: {\n      beforeSend: null,\n      complete: null,\n      error: null,\n      success: null\n    },\n    handlers: {} //keep here for backwards compatability\n  }\n});\n\n},{\"./main.js\":41,\"jquery\":undefined}],39:[function(require,module,exports){\n//this is the entry-point for browserify.\n//the current browserify version does not support require-ing js files which are used as entry-point\n//this way, we can still require our main.js file\nmodule.exports = require(\"./main.js\");\n\n},{\"./main.js\":41}],40:[function(require,module,exports){\n\"use strict\";\nmodule.exports = {\n  query: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"><path d=\"M64.622 2.41H14.995c-6.627 0-12 5.374-12 12V64.31c0 6.627 5.373 12 12 12h49.627c6.627 0 12-5.373 12-12V14.41c0-6.627-5.373-12-12-12zM24.125 63.907V15.093L61 39.168 24.125 63.906z\"/></svg>',\n  queryInvalid: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 73.627 73.897\"><path d=\"M61.627 0H12C5.373 0 0 5.373 0 12v49.897c0 6.627 5.373 12 12 12h49.627c6.627 0 12-5.373 12-12V12c0-6.628-5.373-12-12-12zM21.13 61.495V12.682l36.875 24.075L21.13 61.495z\"/><path d=\"M66.13 65.904H49.77c-1.647 0-2.89-.58-3.5-1.636-.608-1.056-.49-2.422.334-3.848l8.18-14.167c.822-1.427 1.947-2.212 3.165-2.212s2.342.786 3.165 2.213l8.18 14.167c.824 1.426.942 2.792.333 3.848-.61 1.055-1.852 1.636-3.5 1.636zm-6.51-4.986c0-.85-.69-1.54-1.54-1.54-.85 0-1.54.69-1.54 1.54 0 .85.69 1.54 1.54 1.54.85 0 1.54-.69 1.54-1.54zm.04-9.266c0-.873-.708-1.58-1.58-1.58-.874 0-1.582.707-1.582 1.58l.374 5.61h.005c.054.62.568 1.108 1.202 1.108.586 0 1.075-.415 1.188-.968.01-.045.01-.093.014-.14h.01l.368-5.61z\" fill=\"#a80\"/></svg>',\n  download: '<svg xmlns=\"http://www.w3.org/2000/svg\" baseProfile=\"tiny\" viewBox=\"0 0 100 100\"><path fill-rule=\"evenodd\" d=\"M88 84v-2c0-2.96-.86-4-4-4H16c-2.96 0-4 .98-4 4v2c0 3.102 1.04 4 4 4h68c3.02 0 4-.96 4-4zM58 12H42c-5 0-6 .94-6 6v22H16l34 34 34-34H64V18c0-5.06-1.06-6-6-6z\"/></svg>',\n  share: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M36.764 50c0 .308-.07.598-.088.905l32.247 16.12c2.76-2.34 6.293-3.798 10.195-3.798C87.89 63.227 95 70.337 95 79.11 95 87.89 87.89 95 79.118 95c-8.78 0-15.882-7.11-15.882-15.89 0-.317.07-.6.088-.906l-32.247-16.12c-2.77 2.33-6.293 3.79-10.195 3.79C12.11 65.873 5 58.77 5 50c0-8.78 7.11-15.89 15.882-15.89 3.902 0 7.427 1.467 10.195 3.796l32.247-16.12c-.018-.307-.088-.597-.088-.913C63.236 12.11 70.338 5 79.118 5 87.89 5 95 12.11 95 20.873c0 8.78-7.11 15.89-15.882 15.89-3.91 0-7.436-1.467-10.195-3.805L36.676 49.086c.017.308.088.598.088.914z\"/></svg>',\n  warning: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 66.399998 66.399998\"><g fill=\"red\"><path d=\"M33.2 0C14.9 0 0 14.9 0 33.2c0 18.3 14.9 33.2 33.2 33.2 18.3 0 33.2-14.9 33.2-33.2C66.4 14.9 51.5 0 33.2 0zm0 59.4C18.7 59.4 7 47.6 7 33.2 7 18.7 18.8 7 33.2 7c14.4 0 26.2 11.8 26.2 26.2 0 14.4-11.8 26.2-26.2 26.2z\"/><path d=\"M33.1 45.6c-1.4 0-2.5.5-3.5 1.5-.9 1-1.4 2.2-1.4 3.6 0 1.6.5 2.8 1.5 3.8 1 .9 2.1 1.3 3.4 1.3 1.3 0 2.4-.5 3.4-1.4 1-.9 1.5-2.2 1.5-3.7 0-1.4-.5-2.6-1.4-3.6-.9-1-2.1-1.5-3.5-1.5zM33.3 12.4c-1.5 0-2.8.5-3.7 1.6-.9 1-1.4 2.4-1.4 4.2 0 1.1.1 2.9.2 5.6l.8 13.1c.2 1.8.4 3.2.9 4.1.5 1.2 1.5 1.8 2.9 1.8 1.3 0 2.3-.7 2.9-1.9.5-1 .7-2.3.9-4l1.1-13.4c.1-1.3.2-2.5.2-3.8 0-2.2-.3-3.9-.8-5.1-.5-1-1.6-2.2-4-2.2z\"/></g></svg>',\n  fullscreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"5 -10 100 100\"><path d=\"M5-10v38.89L21.667 12.22 38.334 28.89l5.555-5.556L27.22 6.667 43.89-10H5zM105-10v38.89L88.333 12.22 71.667 28.89l-5.556-5.556L82.778 6.667 66.11-10H105zM5 90V51.11l16.667 16.667L38.334 51.11l5.555 5.557L27.22 73.333 43.89 90H5zM105 90V51.11L88.333 67.778 71.667 51.11l-5.556 5.557 16.667 16.666L66.11 90H105z\" fill=\"#010101\"/></svg>',\n  smallscreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"5 -10 100 100\"><path d=\"M43.89 28.89V-10L27.22 6.667 10.555-10 5-4.445l16.667 16.667L5 28.89h38.89zM66.11 28.89V-10L82.78 6.667 99.444-10 105-4.445 88.334 12.222 105 28.89H66.11zM43.89 51.11V90L27.22 73.334 10.555 90 5 84.444l16.667-16.666L5 51.11h38.89zM66.11 51.11V90L82.78 73.334 99.444 90 105 84.444 88.334 67.778 105 51.11H66.11z\" fill=\"#010101\"/></svg>'\n};\n\n},{}],41:[function(require,module,exports){\n\"use strict\";\n//make sure any console statements\nwindow.console = window.console || {\n  log: function() {}\n};\n\n/**\n * Load libraries\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n  CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n  utils = require(\"./utils.js\"),\n  yutils = require(\"yasgui-utils\"),\n  imgs = require(\"./imgs.js\");\n\nrequire(\"../lib/deparam.js\");\nrequire(\"codemirror/addon/fold/foldcode.js\");\nrequire(\"codemirror/addon/fold/foldgutter.js\");\nrequire(\"codemirror/addon/fold/xml-fold.js\");\nrequire(\"codemirror/addon/fold/brace-fold.js\");\nrequire(\"./prefixFold.js\");\nrequire(\"codemirror/addon/hint/show-hint.js\");\nrequire(\"codemirror/addon/search/searchcursor.js\");\nrequire(\"codemirror/addon/edit/matchbrackets.js\");\nrequire(\"codemirror/addon/runmode/runmode.js\");\nrequire(\"codemirror/addon/display/fullscreen.js\");\nrequire(\"../lib/grammar/tokenizer.js\");\n\n/**\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\n *\n * @constructor\n * @param {DOM-Element} parent element to append editor to.\n * @param {object} settings\n * @class YASQE\n * @return {doc} YASQE document\n */\nvar root = (module.exports = function(parent, config) {\n  var rootEl = $(\"<div>\", {\n    class: \"yasqe\"\n  }).appendTo($(parent));\n  config = extendConfig(config);\n  var yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\n  postProcessCmElement(yasqe);\n  return yasqe;\n});\n\n/**\n * Extend config object, which we will pass on to the CM constructor later on.\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\n * people who add their own onblur events to the config Additionally, need this\n * to include the CM defaults ourselves. CodeMirror has a method for including\n * defaults, but we can't rely on that one: it assumes flat config object, where\n * we have nested objects (e.g. the persistency option)\n *\n * @private\n */\nvar extendConfig = function(config) {\n  var extendedConfig = $.extend(true, {}, root.defaults, config);\n\n  // I know, codemirror deals with  default options as well.\n  //However, it does not do this recursively (i.e. the persistency option)\n\n  return extendedConfig;\n};\n/**\n * Add extra functions to the CM document (i.e. the codemirror instantiated\n * object)\n *\n * @private\n */\nvar extendCmInstance = function(yasqe) {\n  //instantiate autocompleters\n  yasqe.autocompleters = require(\"./autocompleters/autocompleterBase.js\")(root, yasqe);\n  if (yasqe.options.autocompleters) {\n    yasqe.options.autocompleters.forEach(function(name) {\n      if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n    });\n  }\n  yasqe.lastQueryDuration = null;\n  yasqe.getCompleteToken = function(token, cur) {\n    return require(\"./tokenUtils.js\").getCompleteToken(yasqe, token, cur);\n  };\n  yasqe.getPreviousNonWsToken = function(line, token) {\n    return require(\"./tokenUtils.js\").getPreviousNonWsToken(yasqe, line, token);\n  };\n  yasqe.getNextNonWsToken = function(lineNumber, charNumber) {\n    return require(\"./tokenUtils.js\").getNextNonWsToken(yasqe, lineNumber, charNumber);\n  };\n  yasqe.collapsePrefixes = function(collapse) {\n    if (collapse === undefined) collapse = true;\n    yasqe.foldCode(\n      require(\"./prefixFold.js\").findFirstPrefixLine(yasqe),\n      root.fold.prefix,\n      collapse ? \"fold\" : \"unfold\"\n    );\n  };\n  var backdrop = null;\n  var animateSpeed = null;\n  yasqe.setBackdrop = function(show) {\n    if (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === \"0\") {\n      if (animateSpeed === null) {\n        animateSpeed = +yasqe.options.backdrop;\n        if (animateSpeed === 1) {\n          //ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\n          animateSpeed = 400;\n        }\n      }\n\n      if (!backdrop) {\n        backdrop = $(\"<div>\", {\n          class: \"backdrop\"\n        })\n          .click(function() {\n            $(this).hide();\n          })\n          .insertAfter($(yasqe.getWrapperElement()));\n      }\n      if (show) {\n        backdrop.show(animateSpeed);\n      } else {\n        backdrop.hide(animateSpeed);\n      }\n    }\n  };\n  /**\n   * Execute query. Pass a callback function, or a configuration object (see\n   * default settings below for possible values) I.e., you can change the\n   * query configuration by either changing the default settings, changing the\n   * settings of this document, or by passing query settings to this function\n   *\n   * @method doc.query\n   * @param function|object\n   */\n  yasqe.query = function(callbackOrConfig) {\n    root.executeQuery(yasqe, callbackOrConfig);\n  };\n\n  yasqe.getUrlArguments = function(config) {\n    return root.getUrlArguments(yasqe, config);\n  };\n\n  /**\n   * Fetch defined prefixes from query string\n   *\n   * @method doc.getPrefixesFromQuery\n   * @return object\n   */\n  yasqe.getPrefixesFromQuery = function() {\n    return require(\"./prefixUtils.js\").getPrefixesFromQuery(yasqe);\n  };\n\n  yasqe.addPrefixes = function(prefixes) {\n    return require(\"./prefixUtils.js\").addPrefixes(yasqe, prefixes);\n  };\n  yasqe.removePrefixes = function(prefixes) {\n    return require(\"./prefixUtils.js\").removePrefixes(yasqe, prefixes);\n  };\n\n  yasqe.getValueWithoutComments = function() {\n    var cleanedQuery = \"\";\n    root.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\n      if (className != \"comment\") {\n        cleanedQuery += stringVal;\n      }\n    });\n    return cleanedQuery;\n  };\n  /**\n   * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\n   *\n   * @method doc.getQueryType\n   * @return string\n   *\n   */\n  yasqe.getQueryType = function() {\n    return yasqe.queryType;\n  };\n  /**\n   * Fetch the query mode: 'query' or 'update'\n   *\n   * @method doc.getQueryMode\n   * @return string\n   *\n   */\n  yasqe.getQueryMode = function() {\n    var type = yasqe.getQueryType();\n    if (\n      type == \"INSERT\" ||\n      type == \"DELETE\" ||\n      type == \"LOAD\" ||\n      type == \"CLEAR\" ||\n      type == \"CREATE\" ||\n      type == \"DROP\" ||\n      type == \"COPY\" ||\n      type == \"MOVE\" ||\n      type == \"ADD\"\n    ) {\n      return \"update\";\n    } else {\n      return \"query\";\n    }\n  };\n\n  yasqe.setCheckSyntaxErrors = function(isEnabled) {\n    yasqe.options.syntaxErrorCheck = isEnabled;\n    checkSyntax(yasqe);\n  };\n\n  yasqe.enableCompleter = function(name) {\n    addCompleterToSettings(yasqe.options, name);\n    if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n  };\n  yasqe.disableCompleter = function(name) {\n    removeCompleterFromSettings(yasqe.options, name);\n  };\n  return yasqe;\n};\n\nvar addCompleterToSettings = function(settings, name) {\n  if (!settings.autocompleters) settings.autocompleters = [];\n  settings.autocompleters.push(name);\n};\nvar removeCompleterFromSettings = function(settings, name) {\n  if (typeof settings.autocompleters == \"object\") {\n    var index = $.inArray(name, settings.autocompleters);\n    if (index >= 0) {\n      settings.autocompleters.splice(index, 1);\n      removeCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\n    }\n  }\n};\nvar postProcessCmElement = function(yasqe) {\n  /**\n   * Set doc value\n   */\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n  if (storageId) {\n    var valueFromStorage = yutils.storage.get(storageId);\n    if (valueFromStorage) yasqe.setValue(valueFromStorage);\n  }\n\n  root.drawButtons(yasqe);\n\n  /**\n   * Add event handlers\n   */\n  yasqe.on(\"blur\", function(yasqe, eventInfo) {\n    root.storeQuery(yasqe);\n  });\n  yasqe.on(\"change\", function(yasqe, eventInfo) {\n    checkSyntax(yasqe);\n    root.updateQueryButton(yasqe);\n    root.positionButtons(yasqe);\n  });\n  yasqe.on(\"changes\", function() {\n    //e.g. on paste\n    checkSyntax(yasqe);\n    root.updateQueryButton(yasqe);\n    root.positionButtons(yasqe);\n  });\n\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\n    updateButtonsTransparency(yasqe);\n  });\n  yasqe.prevQueryValid = false;\n  checkSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\n  root.positionButtons(yasqe);\n\n  $(yasqe.getWrapperElement())\n    .on(\"mouseenter\", \".cm-atom\", function() {\n      var matchText = $(this).text();\n      $(yasqe.getWrapperElement())\n        .find(\".cm-atom\")\n        .filter(function() {\n          return $(this).text() === matchText;\n        })\n        .addClass(\"matchingVar\");\n    })\n    .on(\"mouseleave\", \".cm-atom\", function() {\n      $(yasqe.getWrapperElement()).find(\".matchingVar\").removeClass(\"matchingVar\");\n    });\n  /**\n   * check url args and modify yasqe settings if needed\n   */\n  if (yasqe.options.consumeShareLink) {\n    yasqe.options.consumeShareLink(yasqe, getUrlParams());\n    //and: add a hash listener!\n    window.addEventListener(\"hashchange\", function() {\n      yasqe.options.consumeShareLink(yasqe, getUrlParams());\n    });\n  }\n  if (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\n};\n\n/**\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\n */\nvar getUrlParams = function() {\n  //first try hash\n  var urlParams = null;\n  if (window.location.hash.length > 1) {\n    //firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\n    //Don't want this. So simply get the hash string ourselves\n    urlParams = $.deparam(location.href.split(\"#\")[1]);\n  }\n  if ((!urlParams || !(\"query\" in urlParams)) && window.location.search.length > 1) {\n    //ok, then just try regular url params\n    urlParams = $.deparam(window.location.search.substring(1));\n  }\n  return urlParams;\n};\n\n/**\n * Update transparency of buttons. Increase transparency when cursor is below buttons\n */\n\nvar updateButtonsTransparency = function(yasqe) {\n  yasqe.cursor = $(\".CodeMirror-cursor\");\n  if (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\n    if (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\n    } else {\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\n    }\n  }\n};\n\nvar clearError = null;\nvar checkSyntax = function(yasqe, deepcheck) {\n  yasqe.queryValid = true;\n\n  yasqe.clearGutter(\"gutterErrorBar\");\n\n  var state = null;\n  for (var l = 0; l < yasqe.lineCount(); ++l) {\n    var precise = false;\n    if (!yasqe.prevQueryValid) {\n      // we don't want cached information in this case, otherwise the\n      // previous error sign might still show up,\n      // even though the syntax error might be gone already\n      precise = true;\n    }\n\n    var token = yasqe.getTokenAt(\n      {\n        line: l,\n        ch: yasqe.getLine(l).length\n      },\n      precise\n    );\n    var state = token.state;\n    yasqe.queryType = state.queryType;\n    if(state.OK && l == yasqe.lineCount() - 1) {\n      // console.log(\"is complete: \" +  state.complete);\n      if(!state.complete) {\n        if(state.inLiteral) {\n          state.errorMsg = \"needs to close literal with \" + (state.inLiteral.cat.includes(\"2\")? '\"\"\"' : \"'''\");\n        }\n        state.OK = false;\n      }\n    }\n    if (state.OK == false) {\n      if (!yasqe.options.syntaxErrorCheck) {\n        //the library we use already marks everything as being an error. Overwrite this class attribute.\n        $(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\n        //we don't want to gutter error, so return\n        return;\n      }\n\n      var warningEl = yutils.svg.getElement(imgs.warning);\n      if (state.errorMsg) {\n        require(\"./tooltip\")(yasqe, warningEl, function() {\n          return $(\"<div/>\").text(token.state.errorMsg).html();\n        });\n      } else if (state.possibleCurrent && state.possibleCurrent.length > 0) {\n        //        warningEl.style.zIndex = \"99999999\";\n        require(\"./tooltip\")(yasqe, warningEl, function() {\n          var expectedEncoded = [];\n          state.possibleCurrent.forEach(function(expected) {\n            expectedEncoded.push(\n              \"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\"\n            );\n          });\n          return \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\n        });\n      }\n      warningEl.style.marginTop = \"2px\";\n      warningEl.style.marginLeft = \"2px\";\n      warningEl.className = \"parseErrorIcon\";\n      yasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\n\n      yasqe.queryValid = false;\n      break;\n    }\n  }\n  yasqe.prevQueryValid = yasqe.queryValid;\n  if (deepcheck) {\n    if (state != null && state.stack != undefined) {\n      var stack = state.stack, len = state.stack.length;\n      // Because incremental parser doesn't receive end-of-input\n      // it can't clear stack, so we have to check that whatever\n      // is left on the stack is nillable\n      if (len > 1) yasqe.queryValid = false;\n      else if (len == 1) {\n        if (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\n          yasqe.queryValid = false;\n      }\n    }\n  }\n};\n/**\n * Static Utils\n */\n// first take all CodeMirror references and store them in the YASQE object\n$.extend(root, CodeMirror);\n\n//add registrar for autocompleters\nroot.Autocompleters = {};\nroot.registerAutocompleter = function(name, constructor) {\n  root.Autocompleters[name] = constructor;\n  addCompleterToSettings(root.defaults, name);\n};\n\nroot.autoComplete = function(yasqe) {\n  //this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\n  yasqe.autocompleters.autoComplete(false);\n};\n//include the autocompleters we provide out-of-the-box\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\n\nroot.positionButtons = function(yasqe) {\n  var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n  var offset = 0;\n  if (scrollBar.is(\":visible\")) {\n    offset = scrollBar.outerWidth();\n  }\n  if (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\n};\n\n/**\n * Create a share link\n *\n * @method YASQE.createShareLink\n * @param {doc} YASQE document\n * @default {query: doc.getValue()}\n * @return object\n */\nroot.createShareLink = function(yasqe) {\n  //extend existing link, so first fetch current arguments\n  var urlParams = {};\n  if (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\n  urlParams[\"query\"] = yasqe.getValue();\n  return urlParams;\n};\nroot.getAsCurl = function(yasqe, ajaxConfig) {\n  var curl = require(\"./curl.js\");\n  return curl.createCurlString(yasqe, ajaxConfig);\n};\n/**\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\n *\n * @method YASQE.consumeShareLink\n * @param {doc} YASQE document\n */\nroot.consumeShareLink = function(yasqe, urlParams) {\n  if (urlParams && urlParams.query) {\n    yasqe.setValue(urlParams.query);\n  }\n};\nroot.drawButtons = function(yasqe) {\n  yasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\n\n  /**\n   * draw share link button\n   */\n  if (yasqe.options.createShareLink) {\n    var svgShare = $(yutils.svg.getElement(imgs.share));\n    svgShare\n      .click(function(event) {\n        event.stopPropagation();\n        var popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\n        $(\"html\").click(function() {\n          if (popup) popup.remove();\n        });\n\n        popup.click(function(event) {\n          event.stopPropagation();\n        });\n        var $input = $(\"<input>\").val(\n          location.protocol +\n            \"//\" +\n            location.host +\n            location.pathname +\n            location.search +\n            \"#\" +\n            $.param(yasqe.options.createShareLink(yasqe))\n        );\n\n        $input.focus(function() {\n          var $this = $(this);\n          $this.select();\n\n          // Work around Chrome's little problem\n          $this.mouseup(function() {\n            // Prevent further mouseup intervention\n            $this.unbind(\"mouseup\");\n            return false;\n          });\n        });\n\n        popup.empty().append($(\"<div>\", { class: \"inputWrapper\" }).append($input));\n        if (yasqe.options.createShortLink) {\n          popup.addClass(\"enableShort\");\n          $(\"<button>Shorten</button>\")\n            .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\n            .click(function() {\n              $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\n              yasqe.options.createShortLink($input.val(), function(errString, shortLink) {\n                if (errString) {\n                  $input.remove();\n                  popup.find(\".inputWrapper\").append($(\"<span>\", { class: \"shortlinkErr\" }).text(errString));\n                } else {\n                  $input.val(shortLink).focus();\n                }\n              });\n            })\n            .appendTo(popup);\n        }\n        $(\"<button>CURL</button>\")\n          .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\n          .click(function() {\n            $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\n            $input.val(root.getAsCurl(yasqe)).focus();\n          })\n          .appendTo(popup);\n        var positions = svgShare.position();\n        popup\n          .css(\"top\", positions.top + svgShare.outerHeight() + parseInt(popup.css(\"padding-top\")) + \"px\")\n          .css(\"left\", positions.left + svgShare.outerWidth() - popup.outerWidth() + \"px\");\n        $input.focus();\n      })\n      .addClass(\"yasqe_share\")\n      .attr(\"title\", \"Share your query\")\n      .appendTo(yasqe.buttons);\n  }\n\n  /**\n   * draw fullscreen button\n   */\n\n  var toggleFullscreen = $(\"<div>\", {\n    class: \"fullscreenToggleBtns\"\n  })\n    .append(\n      $(yutils.svg.getElement(imgs.fullscreen))\n        .addClass(\"yasqe_fullscreenBtn\")\n        .attr(\"title\", \"Set editor full screen\")\n        .click(function() {\n          yasqe.setOption(\"fullScreen\", true);\n        })\n    )\n    .append(\n      $(yutils.svg.getElement(imgs.smallscreen))\n        .addClass(\"yasqe_smallscreenBtn\")\n        .attr(\"title\", \"Set editor to normal size\")\n        .click(function() {\n          yasqe.setOption(\"fullScreen\", false);\n        })\n    );\n  yasqe.buttons.append(toggleFullscreen);\n\n  if (yasqe.options.sparql.showQueryButton) {\n    $(\"<div>\", {\n      class: \"yasqe_queryButton\"\n    })\n      .click(function() {\n        if ($(this).hasClass(\"query_busy\")) {\n          if (yasqe.xhr) yasqe.xhr.abort();\n          root.updateQueryButton(yasqe);\n        } else {\n          yasqe.query();\n        }\n      })\n      .appendTo(yasqe.buttons);\n    root.updateQueryButton(yasqe);\n  }\n};\n\nvar queryButtonIds = {\n  busy: \"loader\",\n  valid: \"query\",\n  error: \"queryInvalid\"\n};\n\n/**\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\n *\n * @param {doc} YASQE document\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\n */\nroot.updateQueryButton = function(yasqe, status) {\n  var queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\n  if (queryButton.length == 0) return; //no query button drawn\n\n  //detect status\n  if (!status) {\n    status = \"valid\";\n    if (yasqe.queryValid === false) status = \"error\";\n  }\n\n  if (status != yasqe.queryStatus) {\n    queryButton.empty().removeClass(function(index, classNames) {\n      return classNames\n        .split(\" \")\n        .filter(function(c) {\n          //remove classname from previous status\n          return c.indexOf(\"query_\") == 0;\n        })\n        .join(\" \");\n    });\n\n    if (status == \"busy\") {\n      queryButton.append(\n        $(\"<div>\", {\n          class: \"loader\"\n        })\n      );\n      yasqe.queryStatus = status;\n    } else if (status == \"valid\" || status == \"error\") {\n      queryButton.addClass(\"query_\" + status);\n      yutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\n      yasqe.queryStatus = status;\n    }\n  }\n};\n/**\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\n *\n * @method YASQE.fromTextArea\n * @param textArea {DOM element}\n * @param config {object}\n * @returns {doc} YASQE document\n */\nroot.fromTextArea = function(textAreaEl, config) {\n  config = extendConfig(config);\n  //add yasqe div as parent (needed for styles to be manageable and scoped).\n  //In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\n  var rootEl = $(\"<div>\", {\n    class: \"yasqe\"\n  })\n    .insertBefore($(textAreaEl))\n    .append($(textAreaEl));\n  var yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\n  postProcessCmElement(yasqe);\n  return yasqe;\n};\n\nroot.storeQuery = function(yasqe) {\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n  if (storageId) {\n    yutils.storage.set(storageId, yasqe.getValue(), \"month\", yasqe.options.onQuotaExceeded);\n  }\n};\nroot.commentLines = function(yasqe) {\n  var startLine = yasqe.getCursor(true).line;\n  var endLine = yasqe.getCursor(false).line;\n  var min = Math.min(startLine, endLine);\n  var max = Math.max(startLine, endLine);\n\n  // if all lines start with #, remove this char. Otherwise add this char\n  var linesAreCommented = true;\n  for (var i = min; i <= max; i++) {\n    var line = yasqe.getLine(i);\n    if (line.length == 0 || line.substring(0, 1) != \"#\") {\n      linesAreCommented = false;\n      break;\n    }\n  }\n  for (var i = min; i <= max; i++) {\n    if (linesAreCommented) {\n      // lines are commented, so remove comments\n      yasqe.replaceRange(\n        \"\",\n        {\n          line: i,\n          ch: 0\n        },\n        {\n          line: i,\n          ch: 1\n        }\n      );\n    } else {\n      // Not all lines are commented, so add comments\n      yasqe.replaceRange(\"#\", {\n        line: i,\n        ch: 0\n      });\n    }\n  }\n};\n\nroot.copyLineUp = function(yasqe) {\n  var cursor = yasqe.getCursor();\n  var lineCount = yasqe.lineCount();\n  // First create new empty line at end of text\n  yasqe.replaceRange(\"\\n\", {\n    line: lineCount - 1,\n    ch: yasqe.getLine(lineCount - 1).length\n  });\n  // Copy all lines to their next line\n  for (var i = lineCount; i > cursor.line; i--) {\n    var line = yasqe.getLine(i - 1);\n    yasqe.replaceRange(\n      line,\n      {\n        line: i,\n        ch: 0\n      },\n      {\n        line: i,\n        ch: yasqe.getLine(i).length\n      }\n    );\n  }\n};\nroot.copyLineDown = function(yasqe) {\n  root.copyLineUp(yasqe);\n  // Make sure cursor goes one down (we are copying downwards)\n  var cursor = yasqe.getCursor();\n  cursor.line++;\n  yasqe.setCursor(cursor);\n};\nroot.doAutoFormat = function(yasqe) {\n  if (!yasqe.somethingSelected()) yasqe.execCommand(\"selectAll\");\n  var to = {\n    line: yasqe.getCursor(false).line,\n    ch: yasqe.getSelection().length\n  };\n  autoFormatRange(yasqe, yasqe.getCursor(true), to);\n};\n\nvar autoFormatRange = function(yasqe, from, to) {\n  var absStart = yasqe.indexFromPos(from);\n  var absEnd = yasqe.indexFromPos(to);\n  // Insert additional line breaks where necessary according to the\n  // mode's syntax\n  var res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\n\n  // Replace and auto-indent the range\n  yasqe.operation(function() {\n    yasqe.replaceRange(res, from, to);\n    var startLine = yasqe.posFromIndex(absStart).line;\n    var endLine = yasqe.posFromIndex(absStart + res.length).line;\n    for (var i = startLine; i <= endLine; i++) {\n      yasqe.indentLine(i, \"smart\");\n    }\n  });\n};\n\nvar autoFormatLineBreaks = function(text, start, end) {\n  text = text.substring(start, end);\n  var breakAfterArray = [\n    [\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\n    [\"keyword\", \"ws\", \"uri\"] // i.e. base\n  ];\n  var breakAfterCharacters = [\"{\", \".\", \";\"];\n  var breakBeforeCharacters = [\"}\"];\n  var getBreakType = function(stringVal, type) {\n    for (var i = 0; i < breakAfterArray.length; i++) {\n      if (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf().toString()) {\n        return 1;\n      }\n    }\n    for (var i = 0; i < breakAfterCharacters.length; i++) {\n      if (stringVal == breakAfterCharacters[i]) {\n        return 1;\n      }\n    }\n    for (var i = 0; i < breakBeforeCharacters.length; i++) {\n      // don't want to issue 'breakbefore' AND 'breakafter', so check\n      // current line\n      if ($.trim(currentLine) != \"\" && stringVal == breakBeforeCharacters[i]) {\n        return -1;\n      }\n    }\n    return 0;\n  };\n  var formattedQuery = \"\";\n  var currentLine = \"\";\n  var stackTrace = [];\n  CodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\n    stackTrace.push(type);\n    var breakType = getBreakType(stringVal, type);\n    if (breakType != 0) {\n      if (breakType == 1) {\n        formattedQuery += stringVal + \"\\n\";\n        currentLine = \"\";\n      } else {\n        // (-1)\n        formattedQuery += \"\\n\" + stringVal;\n        currentLine = stringVal;\n      }\n      stackTrace = [];\n    } else {\n      currentLine += stringVal;\n      formattedQuery += stringVal;\n    }\n    if (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\") stackTrace = [];\n  });\n  return $.trim(formattedQuery.replace(/\\n\\s*\\n/g, \"\\n\"));\n};\n\nrequire(\"./sparql.js\"), require(\"./defaults.js\");\nroot.$ = $;\nroot.version = {\n  CodeMirror: CodeMirror.version,\n  YASQE: require(\"../package.json\").version,\n  jquery: $.fn.jquery,\n  \"yasgui-utils\": yutils.version\n};\n\n},{\"../lib/deparam.js\":1,\"../lib/grammar/tokenizer.js\":3,\"../package.json\":30,\"./autocompleters/autocompleterBase.js\":31,\"./autocompleters/classes.js\":32,\"./autocompleters/prefixes.js\":33,\"./autocompleters/properties.js\":34,\"./autocompleters/variables.js\":36,\"./curl.js\":37,\"./defaults.js\":38,\"./imgs.js\":40,\"./prefixFold.js\":42,\"./prefixUtils.js\":43,\"./sparql.js\":44,\"./tokenUtils.js\":45,\"./tooltip\":46,\"./utils.js\":47,\"codemirror\":undefined,\"codemirror/addon/display/fullscreen.js\":5,\"codemirror/addon/edit/matchbrackets.js\":6,\"codemirror/addon/fold/brace-fold.js\":7,\"codemirror/addon/fold/foldcode.js\":8,\"codemirror/addon/fold/foldgutter.js\":9,\"codemirror/addon/fold/xml-fold.js\":10,\"codemirror/addon/hint/show-hint.js\":11,\"codemirror/addon/runmode/runmode.js\":12,\"codemirror/addon/search/searchcursor.js\":13,\"jquery\":undefined,\"yasgui-utils\":27}],42:[function(require,module,exports){\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), tokenUtils = require(\"./tokenUtils.js\");\n\n(\"use strict\");\nvar lookFor = \"PREFIX\";\nmodule.exports = {\n  findFirstPrefixLine: function(cm) {\n    var lastLine = cm.lastLine();\n    for (var i = 0; i <= lastLine; ++i) {\n      if (findFirstPrefix(cm, i) >= 0) {\n        return i;\n      }\n    }\n  }\n};\n\nfunction findFirstPrefix(cm, line, ch, lineText) {\n  if (!ch) ch = 0;\n  if (!lineText) lineText = cm.getLine(line);\n  lineText = lineText.toUpperCase();\n  for (var at = ch, pass = 0; ; ) {\n    var found = lineText.indexOf(lookFor, at);\n    if (found == -1) {\n      //no prefix on this line\n      if (pass == 1) break;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < ch) break;\n    var tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n    if (!/^(comment|string)/.test(tokenType)) return found + 1;\n    at = found - 1;\n    //Could not find a prefix, no use looping any further. Probably invalid query\n    if (at === pass) break;\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh, tokenType;\n\n  function hasPreviousPrefix() {\n    var hasPreviousPrefix = false;\n    for (var i = line - 1; i >= 0; i--) {\n      if (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\n        hasPreviousPrefix = true;\n        break;\n      }\n    }\n    return hasPreviousPrefix;\n  }\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0; ; ) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n  var getLastPrefixPos = function(line, ch) {\n    var prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\n    if (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\n    var prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\n    if (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\n    var prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\n    if (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\n    return prefixUri.end;\n  };\n\n  //only use opening prefix declaration\n  if (hasPreviousPrefix()) return;\n  var prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\n\n  if (prefixStart == null) return;\n  var stopAt = \"{\"; //if this char is there, we won't have a chance of finding more prefixes\n  var stopAtNextLine = false;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  var prefixEndChar = getLastPrefixPos(line, prefixStart);\n  var prefixEndLine = line;\n\n  outer:\n  for (var i = line; i <= lastLine; ++i) {\n    if (stopAtNextLine) break;\n    var text = cm.getLine(i), pos = i == line ? prefixStart + 1 : 0;\n\n    for (;;) {\n      if (!stopAtNextLine && text.indexOf(stopAt) >= 0) stopAtNextLine = true;\n\n      var nextPrefixDeclaration = text.toUpperCase().indexOf(lookFor, pos);\n\n      if (nextPrefixDeclaration >= 0) {\n        if ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\n          prefixEndChar = endCh;\n          prefixEndLine = i;\n          pos = prefixEndChar;\n        }\n        pos++;\n      } else {\n        break;\n      }\n    }\n  }\n  return {\n    from: CodeMirror.Pos(line, prefixStart + lookFor.length),\n    to: CodeMirror.Pos(prefixEndLine, prefixEndChar)\n  };\n});\n\n},{\"./tokenUtils.js\":45,\"codemirror\":undefined}],43:[function(require,module,exports){\n\"use strict\";\n/**\n * Append prefix declaration to list of prefixes in query window.\n *\n * @param yasqe\n * @param prefix\n */\nvar addPrefixes = function(yasqe, prefixes) {\n  var existingPrefixes = yasqe.getPrefixesFromQuery();\n  //for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\n  if (typeof prefixes == \"string\") {\n    addPrefixAsString(yasqe, prefixes);\n  } else {\n    for (var pref in prefixes) {\n      if (!(pref in existingPrefixes)) addPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\n    }\n  }\n  yasqe.collapsePrefixes(false);\n};\n\nvar addPrefixAsString = function(yasqe, prefixString) {\n  var lastPrefix = null;\n  var lastPrefixLine = 0;\n  var numLines = yasqe.lineCount();\n  for (var i = 0; i < numLines; i++) {\n    var firstToken = yasqe.getNextNonWsToken(i);\n    if (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\n      lastPrefix = firstToken;\n      lastPrefixLine = i;\n    }\n  }\n\n  if (lastPrefix == null) {\n    yasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\n      line: 0,\n      ch: 0\n    });\n  } else {\n    var previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\n    yasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\n      line: lastPrefixLine\n    });\n  }\n  yasqe.collapsePrefixes(false);\n};\nvar removePrefixes = function(yasqe, prefixes) {\n  var escapeRegex = function(string) {\n    //taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  };\n  for (var pref in prefixes) {\n    yasqe.setValue(\n      yasqe\n        .getValue()\n        .replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), \"\")\n    );\n  }\n  yasqe.collapsePrefixes(false);\n};\n\n/**\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\n *\n * @param cm\n * @returns {Array}\n */\nvar getPrefixesFromQuery = function(yasqe) {\n  //Use precise here. We want to be sure we use the most up to date state. If we're\n  //not, we might get outdated prefixes from the current query (creating loops such\n  //as https://github.com/OpenTriply/YASGUI/issues/84)\n  return yasqe.getTokenAt({ line: yasqe.lastLine(), ch: yasqe.getLine(yasqe.lastLine()).length }, true).state.prefixes;\n};\n\n/**\n * Get the used indentation for a certain line\n *\n * @param yasqe\n * @param line\n * @param charNumber\n * @returns\n */\nvar getIndentFromLine = function(yasqe, line, charNumber) {\n  if (charNumber == undefined) charNumber = 1;\n  var token = yasqe.getTokenAt({\n    line: line,\n    ch: charNumber\n  });\n  if (token == null || token == undefined || token.type != \"ws\") {\n    return \"\";\n  } else {\n    return token.string + getIndentFromLine(yasqe, line, token.end + 1);\n  }\n};\n\nmodule.exports = {\n  addPrefixes: addPrefixes,\n  getPrefixesFromQuery: getPrefixesFromQuery,\n  removePrefixes: removePrefixes\n};\n\n},{}],44:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n  utils = require(\"./utils.js\"),\n  YASQE = require(\"./main.js\");\n\nYASQE.getAjaxConfig = function(yasqe, callbackOrConfig) {\n  var callback = typeof callbackOrConfig == \"function\" ? callbackOrConfig : null;\n  var config = typeof callbackOrConfig == \"object\" ? callbackOrConfig : {};\n\n  if (yasqe.options.sparql) config = $.extend({}, yasqe.options.sparql, config);\n\n  //for backwards compatability, make sure we copy sparql handlers to sparql callbacks\n  if (config.handlers) $.extend(true, config.callbacks, config.handlers);\n\n  if (!config.endpoint || config.endpoint.length == 0) return; // nothing to query!\n  var queryMode = yasqe.getQueryMode();\n  /**\n\t * initialize ajax config\n\t */\n  var ajaxConfig = {\n    url: typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint,\n    type: queryMode == \"update\"\n      ? \"POST\"\n      : typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod,\n    headers: {\n      Accept: getAcceptHeader(yasqe, config)\n    }\n  };\n  if (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\n  /**\n\t * add complete, beforesend, etc callbacks (if specified)\n\t */\n  var handlerDefined = false;\n  if (config.callbacks) {\n    for (var handler in config.callbacks) {\n      if (config.callbacks[handler]) {\n        handlerDefined = true;\n        ajaxConfig[handler] = config.callbacks[handler];\n      }\n    }\n  }\n  if (ajaxConfig.type === \"GET\") {\n    //we need to do encoding ourselve, as jquery does not properly encode the url string\n    //https://github.com/OpenTriply/YASGUI/issues/75\n    var first = true;\n    $.each(yasqe.getUrlArguments(config), function(key, val) {\n      ajaxConfig.url += (first ? \"?\" : \"&\") + val.name + \"=\" + encodeURIComponent(val.value);\n      first = false;\n    });\n  } else {\n    ajaxConfig.data = yasqe.getUrlArguments(config);\n  }\n  if (!handlerDefined && !callback) return; // ok, we can query, but have no callbacks. just stop now\n\n  // if only callback is passed as arg, add that on as 'onComplete' callback\n  if (callback) ajaxConfig.complete = callback;\n\n  /**\n\t * merge additional request headers\n\t */\n  if (config.headers && !$.isEmptyObject(config.headers)) $.extend(ajaxConfig.headers, config.headers);\n\n  var queryStart = new Date();\n  var updateYasqe = function() {\n    yasqe.lastQueryDuration = new Date() - queryStart;\n    YASQE.updateQueryButton(yasqe);\n    yasqe.setBackdrop(false);\n  };\n  //Make sure the query button is updated again on complete\n  var completeCallbacks = [\n    function() {\n      require(\"./main.js\").signal(yasqe, \"queryFinish\", arguments);\n    },\n    updateYasqe\n  ];\n\n  if (ajaxConfig.complete) {\n    completeCallbacks.push(ajaxConfig.complete);\n  }\n  ajaxConfig.complete = completeCallbacks;\n  return ajaxConfig;\n};\n\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\n  YASQE.signal(yasqe, \"query\", yasqe, callbackOrConfig);\n  YASQE.updateQueryButton(yasqe, \"busy\");\n  yasqe.setBackdrop(true);\n  yasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\n};\n\nYASQE.getUrlArguments = function(yasqe, config) {\n  var queryMode = yasqe.getQueryMode();\n  var data = [\n    {\n      name: utils.getString(yasqe, yasqe.options.sparql.queryName),\n      value: config.getQueryForAjax ? config.getQueryForAjax(yasqe) : yasqe.getValue()\n    }\n  ];\n\n  /**\n\t * add named graphs to ajax config\n\t */\n  if (config.namedGraphs && config.namedGraphs.length > 0) {\n    var argName = queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \";\n    for (var i = 0; i < config.namedGraphs.length; i++)\n      data.push({\n        name: argName,\n        value: config.namedGraphs[i]\n      });\n  }\n  /**\n\t * add default graphs to ajax config\n\t */\n  if (config.defaultGraphs && config.defaultGraphs.length > 0) {\n    var argName = queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \";\n    for (var i = 0; i < config.defaultGraphs.length; i++)\n      data.push({\n        name: argName,\n        value: config.defaultGraphs[i]\n      });\n  }\n\n  /**\n\t * add additional request args\n\t */\n  if (config.args && config.args.length > 0) $.merge(data, config.args);\n\n  return data;\n};\nvar getAcceptHeader = function(yasqe, config) {\n  var acceptHeader = null;\n  if (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\n    //this is the old config. For backwards compatability, keep supporting it\n    if (typeof config.acceptHeader == \"function\") {\n      acceptHeader = config.acceptHeader(yasqe);\n    } else {\n      acceptHeader = config.acceptHeader;\n    }\n  } else {\n    if (yasqe.getQueryMode() == \"update\") {\n      acceptHeader = typeof config.acceptHeader == \"function\"\n        ? config.acceptHeaderUpdate(yasqe)\n        : config.acceptHeaderUpdate;\n    } else {\n      var qType = yasqe.getQueryType();\n      if (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\n        acceptHeader = typeof config.acceptHeaderGraph == \"function\"\n          ? config.acceptHeaderGraph(yasqe)\n          : config.acceptHeaderGraph;\n      } else {\n        acceptHeader = typeof config.acceptHeaderSelect == \"function\"\n          ? config.acceptHeaderSelect(yasqe)\n          : config.acceptHeaderSelect;\n      }\n    }\n  }\n  return acceptHeader;\n};\n\nmodule.exports = {\n  getAjaxConfig: YASQE.getAjaxConfig\n};\n\n},{\"./main.js\":41,\"./utils.js\":47,\"jquery\":undefined}],45:[function(require,module,exports){\n\"use strict\";\n/**\n * When typing a query, this query is sometimes syntactically invalid, causing\n * the current tokens to be incorrect This causes problem for autocompletion.\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\n * these\n * \n * @param yasqe {doc}\n * @param token {object}\n * @param cursor {object}\n * @return token {object}\n * @method YASQE.getCompleteToken\n */\nvar getCompleteToken = function(yasqe, token, cur) {\n  if (!cur) {\n    cur = yasqe.getCursor();\n  }\n  if (!token) {\n    token = yasqe.getTokenAt(cur);\n  }\n  var prevToken = yasqe.getTokenAt({\n    line: cur.line,\n    ch: token.start\n  });\n  // not start of line, and not whitespace\n  if (prevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\") {\n    token.start = prevToken.start;\n    token.string = prevToken.string + token.string;\n    return getCompleteToken(yasqe, token, {\n      line: cur.line,\n      ch: prevToken.start\n    }); // recursively, might have multiple tokens which it should include\n  } else if (token.type != null && token.type == \"ws\") {\n    //always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\n    token.start = token.start + 1;\n    token.string = token.string.substring(1);\n    return token;\n  } else {\n    return token;\n  }\n};\nvar getPreviousNonWsToken = function(yasqe, line, token) {\n  var previousToken = yasqe.getTokenAt({\n    line: line,\n    ch: token.start\n  });\n  if (previousToken != null && previousToken.type == \"ws\") {\n    previousToken = getPreviousNonWsToken(yasqe, line, previousToken);\n  }\n  return previousToken;\n};\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\n  if (charNumber == undefined) charNumber = 1;\n  var token = yasqe.getTokenAt({\n    line: lineNumber,\n    ch: charNumber\n  });\n  if (token == null || token == undefined || token.end < charNumber) {\n    return null;\n  }\n  if (token.type == \"ws\") {\n    return getNextNonWsToken(yasqe, lineNumber, token.end + 1);\n  }\n  return token;\n};\n\nmodule.exports = {\n  getPreviousNonWsToken: getPreviousNonWsToken,\n  getCompleteToken: getCompleteToken,\n  getNextNonWsToken: getNextNonWsToken\n};\n\n},{}],46:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\");\n\n/**\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\n * Requirements: \n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\n * \t\tuse html as content\n */\nmodule.exports = function(yasqe, parent, html) {\n  var parent = $(parent);\n  var tooltip;\n  parent.hover(\n    function() {\n      if (typeof html == \"function\") html = html();\n      tooltip = $(\"<div>\").addClass(\"yasqe_tooltip\").html(html).appendTo(parent);\n      repositionTooltip();\n    },\n    function() {\n      $(\".yasqe_tooltip\").remove();\n    }\n  );\n\n  /**\n\t * only need to take into account top and bottom offset for this usecase\n\t */\n  var repositionTooltip = function() {\n    if ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\n      //shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\n      tooltip.css(\"bottom\", \"auto\");\n      tooltip.css(\"top\", \"26px\");\n    }\n  };\n};\n\n},{\"./utils.js\":47,\"jquery\":undefined}],47:[function(require,module,exports){\n\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n\nvar keyExists = function(objectToTest, key) {\n  var exists = false;\n  try {\n    if (objectToTest[key] !== undefined) exists = true;\n  } catch (e) {}\n  return exists;\n};\n\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\n  var persistencyId = null;\n\n  if (persistentIdCreator) {\n    if (typeof persistentIdCreator == \"string\") {\n      persistencyId = persistentIdCreator;\n    } else {\n      persistencyId = persistentIdCreator(yasqe);\n    }\n  }\n  return persistencyId;\n};\n\nvar elementsOverlap = (function() {\n  function getPositions(elem) {\n    var pos, width, height;\n    pos = $(elem).offset();\n    width = $(elem).width();\n    height = $(elem).height();\n    return [[pos.left, pos.left + width], [pos.top, pos.top + height]];\n  }\n\n  function comparePositions(p1, p2) {\n    var r1, r2;\n    r1 = p1[0] < p2[0] ? p1 : p2;\n    r2 = p1[0] < p2[0] ? p2 : p1;\n    return r1[1] > r2[0] || r1[0] === r2[0];\n  }\n\n  return function(a, b) {\n    var pos1 = getPositions(a), pos2 = getPositions(b);\n    return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\n  };\n})();\n\nvar getString = function(yasqe, item) {\n  if (typeof item == \"function\") {\n    return item(yasqe);\n  } else {\n    return item;\n  }\n};\nmodule.exports = {\n  keyExists: keyExists,\n  getPersistencyId: getPersistencyId,\n  elementsOverlap: elementsOverlap,\n  getString: getString\n};\n\n},{\"jquery\":undefined}]},{},[39])(39)\n});\n\n","module.exports = {table:\n{\n  \"*[&&,valueLogical]\" : {\n     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*[,,expression]\" : {\n     \",\": [\"[,,expression]\",\"*[,,expression]\"], \n     \")\": []}, \n  \"*[,,objectPath]\" : {\n     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[,,object]\" : {\n     \",\": [\"[,,object]\",\"*[,,object]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"*[/,pathEltOrInverse]\" : {\n     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \n     \"|\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": []}, \n  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[;,?[verb,objectList]]\" : {\n     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"*[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": []}, \n  \"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\" : {\n     \"GENERATE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"CONSTRUCT\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHEREVER\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHERE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ORDER\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"HAVING\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"GROUP\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"{\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATOR\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"SOURCE\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LOOK UP\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"BIND\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LIMIT\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"OFFSET\": [\"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"}\": []}, \n  \"*[|,pathOneInPropertySet]\" : {\n     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \n     \")\": []}, \n  \"*[|,pathSequence]\" : {\n     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": []}, \n  \"*[||,conditionalAndExpression]\" : {\n     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*dataBlockValue\" : {\n     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"}\": [], \n     \")\": []}, \n  \"*datasetClause\" : {\n     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"CONSTRUCT\": [], \n     \"$\": []}, \n  \"*graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"START_XEXPR\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF_START\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\",\"*graphNode\"], \n     \")\": []}, \n  \"*graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"START_XEXPR\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \")\": []}, \n  \"*groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*iteratorOrSourceClause\" : {\n     \"ITERATOR\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"ITERATE\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"SOURCE\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"LOOK UP\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"BIND\": [\"iteratorOrSourceClause\",\"*iteratorOrSourceClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"$\": []}, \n  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"}\": []}, \n  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"*or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"FROM\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"*or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"{\": []}, \n  \"*orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*var\" : {\n     \"VAR1\": [\"var\",\"*var\"], \n     \"VAR2\": [\"var\",\"*var\"], \n     \")\": []}, \n  \"+graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"START_XEXPR\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF_START\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\",\"*graphNode\"]}, \n  \"+graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"START_XEXPR\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\",\"*graphNodePath\"]}, \n  \"+groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \n  \"+havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \n  \"+or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \n  \"+orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \n  \"?.\" : {\n     \".\": [\".\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?DISTINCT\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"!\": [], \n     \"+\": [], \n     \"-\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"(\": [], \n     \"STR\": [], \n     \"LANG\": [], \n     \"LANGMATCHES\": [], \n     \"DATATYPE\": [], \n     \"BOUND\": [], \n     \"IRI\": [], \n     \"URI\": [], \n     \"BNODE\": [], \n     \"RAND\": [], \n     \"ABS\": [], \n     \"CEIL\": [], \n     \"FLOOR\": [], \n     \"ROUND\": [], \n     \"CONCAT\": [], \n     \"STRLEN\": [], \n     \"UCASE\": [], \n     \"LCASE\": [], \n     \"ENCODE_FOR_URI\": [], \n     \"CONTAINS\": [], \n     \"STRSTARTS\": [], \n     \"STRENDS\": [], \n     \"STRBEFORE\": [], \n     \"STRAFTER\": [], \n     \"YEAR\": [], \n     \"MONTH\": [], \n     \"DAY\": [], \n     \"HOURS\": [], \n     \"MINUTES\": [], \n     \"SECONDS\": [], \n     \"TIMEZONE\": [], \n     \"TZ\": [], \n     \"NOW\": [], \n     \"UUID\": [], \n     \"STRUUID\": [], \n     \"MD5\": [], \n     \"SHA1\": [], \n     \"SHA256\": [], \n     \"SHA384\": [], \n     \"SHA512\": [], \n     \"COALESCE\": [], \n     \"IF\": [], \n     \"STRLANG\": [], \n     \"STRDT\": [], \n     \"SAMETERM\": [], \n     \"ISIRI\": [], \n     \"ISURI\": [], \n     \"ISBLANK\": [], \n     \"ISLITERAL\": [], \n     \"ISNUMERIC\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"COUNT\": [], \n     \"SUM\": [], \n     \"MIN\": [], \n     \"MAX\": [], \n     \"AVG\": [], \n     \"SAMPLE\": [], \n     \"GROUP_CONCAT\": [], \n     \"SUBSTR\": [], \n     \"REPLACE\": [], \n     \"REGEX\": [], \n     \"EXISTS\": [], \n     \"NOT\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"*\": []}, \n  \"?SILENT\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"START_XEXPR\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?[,,expression]\" : {\n     \",\": [\"[,,expression]\"], \n     \")\": []}, \n  \"?[.,?constructTriples]\" : {\n     \".\": [\"[.,?constructTriples]\"], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"?[.,?triplesBlock]\" : {\n     \".\": [\"[.,?triplesBlock]\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[;,SEPARATOR,=,string]\" : {\n     \";\": [\"[;,SEPARATOR,=,string]\"], \n     \")\": []}, \n  \"?[ACCEPT,varOrIri]\" : {\n     \"ACCEPT\": [\"[ACCEPT,varOrIri]\"], \n     \"AS\": []}, \n  \"?[AS,var]\" : {\n     \"AS\": [\"[AS,var]\"], \n     \")\": []}, \n  \"?[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"START_XEXPR\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"IRI_REF_START\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"IRI_REF_START\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \")\": []}, \n  \"?[verb,objectList]\" : {\n     \"a\": [\"[verb,objectList]\"], \n     \"VAR1\": [\"[verb,objectList]\"], \n     \"VAR2\": [\"[verb,objectList]\"], \n     \"NIL\": [\"[verb,objectList]\"], \n     \"START_XEXPR\": [\"[verb,objectList]\"], \n     \"IRI_REF\": [\"[verb,objectList]\"], \n     \"IRI_REF_START\": [\"[verb,objectList]\"], \n     \"TRUE\": [\"[verb,objectList]\"], \n     \"FALSE\": [\"[verb,objectList]\"], \n     \"BLANK_NODE_LABEL\": [\"[verb,objectList]\"], \n     \"ANON\": [\"[verb,objectList]\"], \n     \"PNAME_LN\": [\"[verb,objectList]\"], \n     \"PNAME_NS\": [\"[verb,objectList]\"], \n     \"INTEGER\": [\"[verb,objectList]\"], \n     \"DECIMAL\": [\"[verb,objectList]\"], \n     \"DOUBLE\": [\"[verb,objectList]\"], \n     \"INTEGER_POSITIVE\": [\"[verb,objectList]\"], \n     \"DECIMAL_POSITIVE\": [\"[verb,objectList]\"], \n     \"DOUBLE_POSITIVE\": [\"[verb,objectList]\"], \n     \"INTEGER_NEGATIVE\": [\"[verb,objectList]\"], \n     \"DECIMAL_NEGATIVE\": [\"[verb,objectList]\"], \n     \"DOUBLE_NEGATIVE\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL1\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL1_START\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL2\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL2_START\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG1\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG2\": [\"[verb,objectList]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"[verb,objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"?argList\" : {\n     \"NIL\": [\"argList\"], \n     \"(\": [\"argList\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"*\": [], \n     \"/\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"?constructTriples\" : {\n     \"VAR1\": [\"constructTriples\"], \n     \"VAR2\": [\"constructTriples\"], \n     \"NIL\": [\"constructTriples\"], \n     \"(\": [\"constructTriples\"], \n     \"[\": [\"constructTriples\"], \n     \"START_XEXPR\": [\"constructTriples\"], \n     \"IRI_REF\": [\"constructTriples\"], \n     \"IRI_REF_START\": [\"constructTriples\"], \n     \"TRUE\": [\"constructTriples\"], \n     \"FALSE\": [\"constructTriples\"], \n     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \n     \"ANON\": [\"constructTriples\"], \n     \"PNAME_LN\": [\"constructTriples\"], \n     \"PNAME_NS\": [\"constructTriples\"], \n     \"INTEGER\": [\"constructTriples\"], \n     \"DECIMAL\": [\"constructTriples\"], \n     \"DOUBLE\": [\"constructTriples\"], \n     \"INTEGER_POSITIVE\": [\"constructTriples\"], \n     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \n     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \n     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \n     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \n     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \n     \"STRING_LITERAL1\": [\"constructTriples\"], \n     \"STRING_LITERAL1_START\": [\"constructTriples\"], \n     \"STRING_LITERAL2\": [\"constructTriples\"], \n     \"STRING_LITERAL2_START\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG1_START\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG2_START\": [\"constructTriples\"], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"?groupClause\" : {\n     \"GROUP\": [\"groupClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?havingClause\" : {\n     \"HAVING\": [\"havingClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?limitClause\" : {\n     \"LIMIT\": [\"limitClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitOffsetClauses\"], \n     \"OFFSET\": [\"limitOffsetClauses\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?offsetClause\" : {\n     \"OFFSET\": [\"offsetClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \n     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \n     \"*\": [], \n     \"(\": [], \n     \"VAR1\": [], \n     \"VAR2\": []}, \n  \"?or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"UNDEF\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"}\": [], \n     \")\": []}, \n  \"?or([LANGTAG,[^^,xiri]])\" : {\n     \"LANGTAG\": [\"or([LANGTAG,[^^,xiri]])\"], \n     \"^^\": [\"or([LANGTAG,[^^,xiri]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"*\": [], \n     \"/\": [], \n     \"a\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"(\": [], \n     \"[\": [], \n     \"^\": [], \n     \"!\": [], \n     \".\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": [], \n     \"]\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"VALUES\": []}, \n  \"?or([WHEREVER,WHERE])\" : {\n     \"WHEREVER\": [\"or([WHEREVER,WHERE])\"], \n     \"WHERE\": [\"or([WHEREVER,WHERE])\"], \n     \"{\": []}, \n  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"}\": [], \n     \"||\": [], \n     \"&&\": [], \n     \";\": [], \n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": [], \n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": [], \n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": [], \n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": [], \n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"?orderClause\" : {\n     \"ORDER\": [\"orderClause\"], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?pathMod\" : {\n     \"*\": [\"pathMod\"], \n     \"?\": [\"pathMod\"], \n     \"+\": [\"pathMod\"], \n     \"{\": [\"pathMod\"], \n     \"|\": [], \n     \"/\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": []}, \n  \"?triplesBlock\" : {\n     \"VAR1\": [\"triplesBlock\"], \n     \"VAR2\": [\"triplesBlock\"], \n     \"NIL\": [\"triplesBlock\"], \n     \"(\": [\"triplesBlock\"], \n     \"[\": [\"triplesBlock\"], \n     \"START_XEXPR\": [\"triplesBlock\"], \n     \"IRI_REF\": [\"triplesBlock\"], \n     \"IRI_REF_START\": [\"triplesBlock\"], \n     \"TRUE\": [\"triplesBlock\"], \n     \"FALSE\": [\"triplesBlock\"], \n     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \n     \"ANON\": [\"triplesBlock\"], \n     \"PNAME_LN\": [\"triplesBlock\"], \n     \"PNAME_NS\": [\"triplesBlock\"], \n     \"INTEGER\": [\"triplesBlock\"], \n     \"DECIMAL\": [\"triplesBlock\"], \n     \"DOUBLE\": [\"triplesBlock\"], \n     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \n     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \n     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \n     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \n     \"STRING_LITERAL1\": [\"triplesBlock\"], \n     \"STRING_LITERAL1_START\": [\"triplesBlock\"], \n     \"STRING_LITERAL2\": [\"triplesBlock\"], \n     \"STRING_LITERAL2_START\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG1_START\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG2_START\": [\"triplesBlock\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?whereClause\" : {\n     \"WHEREVER\": [\"whereClause\"], \n     \"WHERE\": [\"whereClause\"], \n     \"{\": [\"whereClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"CONSTRUCT\": [], \n     \".\": [], \n     \"$\": []}, \n  \"[ (,*dataBlockValue,)]\" : {\n     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \n  \"[ (,*var,)]\" : {\n     \"(\": [\"(\",\"*var\",\")\"]}, \n  \"[ (,expression,)]\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"[ (,expression,AS,var,)]\" : {\n     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"[!=,numericExpression]\" : {\n     \"!=\": [\"!=\",\"numericExpression\"]}, \n  \"[&&,valueLogical]\" : {\n     \"&&\": [\"&&\",\"valueLogical\"]}, \n  \"[*,unaryExpression]\" : {\n     \"*\": [\"*\",\"unaryExpression\"]}, \n  \"[+,multiplicativeExpression]\" : {\n     \"+\": [\"+\",\"multiplicativeExpression\"]}, \n  \"[,,expression]\" : {\n     \",\": [\",\",\"expression\"]}, \n  \"[,,integer,}]\" : {\n     \",\": [\",\",\"integer\",\"}\"]}, \n  \"[,,objectPath]\" : {\n     \",\": [\",\",\"objectPath\"]}, \n  \"[,,object]\" : {\n     \",\": [\",\",\"object\"]}, \n  \"[,,or([},[integer,}]])]\" : {\n     \",\": [\",\",\"or([},[integer,}]])\"]}, \n  \"[-,multiplicativeExpression]\" : {\n     \"-\": [\"-\",\"multiplicativeExpression\"]}, \n  \"[.,?constructTriples]\" : {\n     \".\": [\".\",\"?constructTriples\"]}, \n  \"[.,?triplesBlock]\" : {\n     \".\": [\".\",\"?triplesBlock\"]}, \n  \"[/,pathEltOrInverse]\" : {\n     \"/\": [\"/\",\"pathEltOrInverse\"]}, \n  \"[/,unaryExpression]\" : {\n     \"/\": [\"/\",\"unaryExpression\"]}, \n  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \n  \"[;,?[verb,objectList]]\" : {\n     \";\": [\";\",\"?[verb,objectList]\"]}, \n  \"[;,SEPARATOR,=,string]\" : {\n     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \n  \"[<,numericExpression]\" : {\n     \"<\": [\"<\",\"numericExpression\"]}, \n  \"[<=,numericExpression]\" : {\n     \"<=\": [\"<=\",\"numericExpression\"]}, \n  \"[=,numericExpression]\" : {\n     \"=\": [\"=\",\"numericExpression\"]}, \n  \"[>,numericExpression]\" : {\n     \">\": [\">\",\"numericExpression\"]}, \n  \"[>=,numericExpression]\" : {\n     \">=\": [\">=\",\"numericExpression\"]}, \n  \"[ACCEPT,varOrIri]\" : {\n     \"ACCEPT\": [\"ACCEPT\",\"varOrIri\"]}, \n  \"[AS,var]\" : {\n     \"AS\": [\"AS\",\"var\"]}, \n  \"[IN,expressionList]\" : {\n     \"IN\": [\"IN\",\"expressionList\"]}, \n  \"[IRI_REF_START,xiri_Sub]\" : {\n     \"IRI_REF_START\": [\"IRI_REF_START\",\"xiri_Sub\"]}, \n  \"[IRI_REF_SUB,xiri_Sub]\" : {\n     \"IRI_REF_SUB\": [\"IRI_REF_SUB\",\"xiri_Sub\"]}, \n  \"[NOT,IN,expressionList]\" : {\n     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \n  \"[STRING_LITERAL1_START,xString_Literal1_Sub]\" : {\n     \"STRING_LITERAL1_START\": [\"STRING_LITERAL1_START\",\"xString_Literal1_Sub\"]}, \n  \"[STRING_LITERAL1_SUB,xString_Literal1_Sub]\" : {\n     \"STRING_LITERAL1_SUB\": [\"STRING_LITERAL1_SUB\",\"xString_Literal1_Sub\"]}, \n  \"[STRING_LITERAL2_START,xString_Literal2_Sub]\" : {\n     \"STRING_LITERAL2_START\": [\"STRING_LITERAL2_START\",\"xString_Literal2_Sub\"]}, \n  \"[STRING_LITERAL2_SUB,xString_Literal2_Sub]\" : {\n     \"STRING_LITERAL2_SUB\": [\"STRING_LITERAL2_SUB\",\"xString_Literal2_Sub\"]}, \n  \"[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]\" : {\n     \"STRING_LITERAL_LONG1_START\": [\"STRING_LITERAL_LONG1_START\",\"xString_Literal_Long1_Sub\"]}, \n  \"[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]\" : {\n     \"STRING_LITERAL_LONG1_SUB\": [\"STRING_LITERAL_LONG1_SUB\",\"xString_Literal_Long1_Sub\"]}, \n  \"[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]\" : {\n     \"STRING_LITERAL_LONG2_START\": [\"STRING_LITERAL_LONG2_START\",\"xString_Literal_Long2_Sub\"]}, \n  \"[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]\" : {\n     \"STRING_LITERAL_LONG2_SUB\": [\"STRING_LITERAL_LONG2_SUB\",\"xString_Literal_Long2_Sub\"]}, \n  \"[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \n  \"[^^,iriRef]\" : {\n     \"^^\": [\"^^\",\"iriRef\"]}, \n  \"[^^,xiri]\" : {\n     \"^^\": [\"^^\",\"xiri\"]}, \n  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \n  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\n     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \n  \"[integer,}]\" : {\n     \"INTEGER\": [\"integer\",\"}\"]}, \n  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\n     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\" : {\n     \"GENERATE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"CONSTRUCT\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"WHEREVER\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"WHERE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"ORDER\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"HAVING\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"GROUP\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"{\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"ITERATOR\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"ITERATE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"SOURCE\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"LOOK UP\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"BIND\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"LIMIT\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"], \n     \"OFFSET\": [\"or([subGenerateQuery1,subGenerateQuery2])\",\"?constructTriples\"]}, \n  \"[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"START_XEXPR\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"IRI_REF_START\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \n  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"IRI_REF_START\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \n  \"[verb,objectList]\" : {\n     \"a\": [\"verb\",\"objectList\"], \n     \"VAR1\": [\"verb\",\"objectList\"], \n     \"VAR2\": [\"verb\",\"objectList\"], \n     \"NIL\": [\"verb\",\"objectList\"], \n     \"START_XEXPR\": [\"verb\",\"objectList\"], \n     \"IRI_REF\": [\"verb\",\"objectList\"], \n     \"IRI_REF_START\": [\"verb\",\"objectList\"], \n     \"TRUE\": [\"verb\",\"objectList\"], \n     \"FALSE\": [\"verb\",\"objectList\"], \n     \"BLANK_NODE_LABEL\": [\"verb\",\"objectList\"], \n     \"ANON\": [\"verb\",\"objectList\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\"], \n     \"INTEGER\": [\"verb\",\"objectList\"], \n     \"DECIMAL\": [\"verb\",\"objectList\"], \n     \"DOUBLE\": [\"verb\",\"objectList\"], \n     \"INTEGER_POSITIVE\": [\"verb\",\"objectList\"], \n     \"DECIMAL_POSITIVE\": [\"verb\",\"objectList\"], \n     \"DOUBLE_POSITIVE\": [\"verb\",\"objectList\"], \n     \"INTEGER_NEGATIVE\": [\"verb\",\"objectList\"], \n     \"DECIMAL_NEGATIVE\": [\"verb\",\"objectList\"], \n     \"DOUBLE_NEGATIVE\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL1\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL1_START\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL2\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL2_START\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG1\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG1_START\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG2\": [\"verb\",\"objectList\"], \n     \"STRING_LITERAL_LONG2_START\": [\"verb\",\"objectList\"]}, \n  \"[|,pathOneInPropertySet]\" : {\n     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \n  \"[|,pathSequence]\" : {\n     \"|\": [\"|\",\"pathSequence\"]}, \n  \"[||,conditionalAndExpression]\" : {\n     \"||\": [\"||\",\"conditionalAndExpression\"]}, \n  \"additiveExpression\" : {\n     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI_REF_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL1_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL2_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \n  \"aggregate\" : {\n     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \n     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \n  \"argList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"baseDecl\" : {\n     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \n  \"bind\" : {\n     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"blankNode\" : {\n     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \n     \"ANON\": [\"ANON\"]}, \n  \"blankNodePropertyList\" : {\n     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \n  \"blankNodePropertyListPath\" : {\n     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \n  \"booleanLiteral\" : {\n     \"TRUE\": [\"TRUE\"], \n     \"FALSE\": [\"FALSE\"]}, \n  \"brackettedExpression\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"builtInCall\" : {\n     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \n     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \n     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \n     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \n     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \n     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \n     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \n     \"RAND\": [\"RAND\",\"NIL\"], \n     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \n     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \n     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \n     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \n     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \n     \"SUBSTR\": [\"substringExpression\"], \n     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \n     \"REPLACE\": [\"strReplaceExpression\"], \n     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \n     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \n     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \n     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \n     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \n     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \n     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \n     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \n     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \n     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \n     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \n     \"NOW\": [\"NOW\",\"NIL\"], \n     \"UUID\": [\"UUID\",\"NIL\"], \n     \"STRUUID\": [\"STRUUID\",\"NIL\"], \n     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \n     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \n     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \n     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \n     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \n     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \n     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \n     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \n     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \n     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \n     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \n     \"REGEX\": [\"regexExpression\"], \n     \"EXISTS\": [\"existsFunc\"], \n     \"NOT\": [\"notExistsFunc\"]}, \n  \"collection\" : {\n     \"(\": [\"(\",\"+graphNode\",\")\"]}, \n  \"collectionPath\" : {\n     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \n  \"conditionalAndExpression\" : {\n     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI_REF_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL1_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL2_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \n  \"conditionalOrExpression\" : {\n     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI_REF_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL1_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL2_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \n  \"constraint\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"]}, \n  \"constructTriples\" : {\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"START_XEXPR\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"IRI_REF_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL1_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL2_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \n  \"dataBlock\" : {\n     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \n  \"dataBlockValue\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"UNDEF\": [\"UNDEF\"]}, \n  \"datasetClause\" : {\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n  \"defaultGraphClause\" : {\n     \"IRI_REF\": [\"sourceSelector\"], \n     \"PNAME_LN\": [\"sourceSelector\"], \n     \"PNAME_NS\": [\"sourceSelector\"]}, \n  \"existsFunc\" : {\n     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \n  \"expression\" : {\n     \"!\": [\"conditionalOrExpression\"], \n     \"+\": [\"conditionalOrExpression\"], \n     \"-\": [\"conditionalOrExpression\"], \n     \"VAR1\": [\"conditionalOrExpression\"], \n     \"VAR2\": [\"conditionalOrExpression\"], \n     \"(\": [\"conditionalOrExpression\"], \n     \"STR\": [\"conditionalOrExpression\"], \n     \"LANG\": [\"conditionalOrExpression\"], \n     \"LANGMATCHES\": [\"conditionalOrExpression\"], \n     \"DATATYPE\": [\"conditionalOrExpression\"], \n     \"BOUND\": [\"conditionalOrExpression\"], \n     \"IRI\": [\"conditionalOrExpression\"], \n     \"URI\": [\"conditionalOrExpression\"], \n     \"BNODE\": [\"conditionalOrExpression\"], \n     \"RAND\": [\"conditionalOrExpression\"], \n     \"ABS\": [\"conditionalOrExpression\"], \n     \"CEIL\": [\"conditionalOrExpression\"], \n     \"FLOOR\": [\"conditionalOrExpression\"], \n     \"ROUND\": [\"conditionalOrExpression\"], \n     \"CONCAT\": [\"conditionalOrExpression\"], \n     \"STRLEN\": [\"conditionalOrExpression\"], \n     \"UCASE\": [\"conditionalOrExpression\"], \n     \"LCASE\": [\"conditionalOrExpression\"], \n     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \n     \"CONTAINS\": [\"conditionalOrExpression\"], \n     \"STRSTARTS\": [\"conditionalOrExpression\"], \n     \"STRENDS\": [\"conditionalOrExpression\"], \n     \"STRBEFORE\": [\"conditionalOrExpression\"], \n     \"STRAFTER\": [\"conditionalOrExpression\"], \n     \"YEAR\": [\"conditionalOrExpression\"], \n     \"MONTH\": [\"conditionalOrExpression\"], \n     \"DAY\": [\"conditionalOrExpression\"], \n     \"HOURS\": [\"conditionalOrExpression\"], \n     \"MINUTES\": [\"conditionalOrExpression\"], \n     \"SECONDS\": [\"conditionalOrExpression\"], \n     \"TIMEZONE\": [\"conditionalOrExpression\"], \n     \"TZ\": [\"conditionalOrExpression\"], \n     \"NOW\": [\"conditionalOrExpression\"], \n     \"UUID\": [\"conditionalOrExpression\"], \n     \"STRUUID\": [\"conditionalOrExpression\"], \n     \"MD5\": [\"conditionalOrExpression\"], \n     \"SHA1\": [\"conditionalOrExpression\"], \n     \"SHA256\": [\"conditionalOrExpression\"], \n     \"SHA384\": [\"conditionalOrExpression\"], \n     \"SHA512\": [\"conditionalOrExpression\"], \n     \"COALESCE\": [\"conditionalOrExpression\"], \n     \"IF\": [\"conditionalOrExpression\"], \n     \"STRLANG\": [\"conditionalOrExpression\"], \n     \"STRDT\": [\"conditionalOrExpression\"], \n     \"SAMETERM\": [\"conditionalOrExpression\"], \n     \"ISIRI\": [\"conditionalOrExpression\"], \n     \"ISURI\": [\"conditionalOrExpression\"], \n     \"ISBLANK\": [\"conditionalOrExpression\"], \n     \"ISLITERAL\": [\"conditionalOrExpression\"], \n     \"ISNUMERIC\": [\"conditionalOrExpression\"], \n     \"TRUE\": [\"conditionalOrExpression\"], \n     \"FALSE\": [\"conditionalOrExpression\"], \n     \"COUNT\": [\"conditionalOrExpression\"], \n     \"SUM\": [\"conditionalOrExpression\"], \n     \"MIN\": [\"conditionalOrExpression\"], \n     \"MAX\": [\"conditionalOrExpression\"], \n     \"AVG\": [\"conditionalOrExpression\"], \n     \"SAMPLE\": [\"conditionalOrExpression\"], \n     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \n     \"SUBSTR\": [\"conditionalOrExpression\"], \n     \"REPLACE\": [\"conditionalOrExpression\"], \n     \"REGEX\": [\"conditionalOrExpression\"], \n     \"EXISTS\": [\"conditionalOrExpression\"], \n     \"NOT\": [\"conditionalOrExpression\"], \n     \"IRI_REF\": [\"conditionalOrExpression\"], \n     \"IRI_REF_START\": [\"conditionalOrExpression\"], \n     \"INTEGER\": [\"conditionalOrExpression\"], \n     \"DECIMAL\": [\"conditionalOrExpression\"], \n     \"DOUBLE\": [\"conditionalOrExpression\"], \n     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"PNAME_LN\": [\"conditionalOrExpression\"], \n     \"PNAME_NS\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL1_START\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL2_START\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"conditionalOrExpression\"]}, \n  \"expressionList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"filter\" : {\n     \"FILTER\": [\"FILTER\",\"constraint\"]}, \n  \"functionCall\" : {\n     \"IRI_REF\": [\"iriRef\",\"argList\"], \n     \"PNAME_LN\": [\"iriRef\",\"argList\"], \n     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \n  \"generate\" : {\n     \"GENERATE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"CONSTRUCT\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"WHEREVER\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"WHERE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"FROM\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"ORDER\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"HAVING\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"GROUP\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"{\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"ITERATOR\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"ITERATE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"SOURCE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"LOOK UP\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"BIND\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"LIMIT\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"OFFSET\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"BASE\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"], \n     \"PREFIX\": [\"prologue\",\"or([generateQuery1,generateQuery2])\"]}, \n  \"generateQuery1\" : {\n     \"GENERATE\": [\"GENERATE\",\"generateTemplate\",\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\"]}, \n  \"generateQuery2\" : {\n     \"CONSTRUCT\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"ORDER\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"HAVING\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"GROUP\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"LIMIT\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"OFFSET\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"WHEREVER\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"WHERE\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"{\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"ITERATOR\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"ITERATE\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"SOURCE\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"LOOK UP\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"BIND\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"], \n     \"FROM\": [\"*datasetClause\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"generateTemplate\"]}, \n  \"generateTemplate\" : {\n     \"{\": [\"{\",\"generateTemplateSub\",\"}\"]}, \n  \"generateTemplateSub\" : {\n     \"GENERATE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"CONSTRUCT\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHEREVER\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"WHERE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ORDER\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"HAVING\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"GROUP\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"{\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATOR\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ITERATE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"SOURCE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LOOK UP\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"BIND\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"LIMIT\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"OFFSET\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"VAR1\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"VAR2\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"NIL\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"(\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"[\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"START_XEXPR\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"IRI_REF\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"IRI_REF_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"TRUE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"FALSE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"BLANK_NODE_LABEL\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"ANON\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"PNAME_LN\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"PNAME_NS\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"INTEGER\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DECIMAL\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DOUBLE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"INTEGER_POSITIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DECIMAL_POSITIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DOUBLE_POSITIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"INTEGER_NEGATIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DECIMAL_NEGATIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"DOUBLE_NEGATIVE\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL1\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL1_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL2\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL2_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG1\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG2\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"], \n     \"}\": [\"?constructTriples\",\"*[or([subGenerateQuery1,subGenerateQuery2]),?constructTriples]\"]}, \n  \"generateUnit\" : {\n     \"GENERATE\": [\"generate\"], \n     \"CONSTRUCT\": [\"generate\"], \n     \"WHEREVER\": [\"generate\"], \n     \"WHERE\": [\"generate\"], \n     \"FROM\": [\"generate\"], \n     \"BASE\": [\"generate\"], \n     \"PREFIX\": [\"generate\"], \n     \"ORDER\": [\"generate\"], \n     \"HAVING\": [\"generate\"], \n     \"GROUP\": [\"generate\"], \n     \"{\": [\"generate\"], \n     \"ITERATOR\": [\"generate\"], \n     \"ITERATE\": [\"generate\"], \n     \"SOURCE\": [\"generate\"], \n     \"LOOK UP\": [\"generate\"], \n     \"BIND\": [\"generate\"], \n     \"LIMIT\": [\"generate\"], \n     \"OFFSET\": [\"generate\"]}, \n  \"graphGraphPattern\" : {\n     \"GRAPH\": [\"GRAPH\",\"varOrIri\",\"groupGraphPattern\"]}, \n  \"graphNode\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"START_XEXPR\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"IRI_REF_START\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\"], \n     \"(\": [\"triplesNode\"], \n     \"[\": [\"triplesNode\"]}, \n  \"graphNodePath\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"START_XEXPR\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"IRI_REF_START\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\"], \n     \"(\": [\"triplesNodePath\"], \n     \"[\": [\"triplesNodePath\"]}, \n  \"graphPatternNotTriples\" : {\n     \"{\": [\"groupOrUnionGraphPattern\"], \n     \"OPTIONAL\": [\"optionalGraphPattern\"], \n     \"MINUS\": [\"minusGraphPattern\"], \n     \"GRAPH\": [\"graphGraphPattern\"], \n     \"SERVICE\": [\"serviceGraphPattern\"], \n     \"FILTER\": [\"filter\"], \n     \"BIND\": [\"bind\"], \n     \"VALUES\": [\"inlineData\"]}, \n  \"groupClause\" : {\n     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \n  \"groupCondition\" : {\n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"], \n     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"groupGraphPattern\" : {\n     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \n  \"groupGraphPatternSub\" : {\n     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"START_XEXPR\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"IRI_REF_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL1_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL2_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \n  \"groupOrUnionGraphPattern\" : {\n     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \n  \"havingClause\" : {\n     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \n  \"havingCondition\" : {\n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"]}, \n  \"inlineData\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \n  \"inlineDataFull\" : {\n     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \n     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \n  \"inlineDataOneVar\" : {\n     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \n     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \n  \"integer\" : {\n     \"INTEGER\": [\"INTEGER\"]}, \n  \"iriRef\" : {\n     \"IRI_REF\": [\"IRI_REF\"], \n     \"PNAME_LN\": [\"prefixedName\"], \n     \"PNAME_NS\": [\"prefixedName\"]}, \n  \"iteratorClause\" : {\n     \"ITERATOR\": [\"or([ITERATOR,ITERATE])\",\"functionCall\",\"AS\",\"var\"], \n     \"ITERATE\": [\"or([ITERATOR,ITERATE])\",\"functionCall\",\"AS\",\"var\"]}, \n  \"iteratorOrSourceClause\" : {\n     \"ITERATOR\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"ITERATE\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"SOURCE\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"LOOK UP\": [\"or([iteratorClause,sourceClause,bind])\"], \n     \"BIND\": [\"or([iteratorClause,sourceClause,bind])\"]}, \n  \"limitClause\" : {\n     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \n  \"limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \n     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \n  \"minusGraphPattern\" : {\n     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \n  \"multiplicativeExpression\" : {\n     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI_REF_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL1_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL2_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"namedGraphClause\" : {\n     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \n  \"notExistsFunc\" : {\n     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \n  \"numericExpression\" : {\n     \"!\": [\"additiveExpression\"], \n     \"+\": [\"additiveExpression\"], \n     \"-\": [\"additiveExpression\"], \n     \"VAR1\": [\"additiveExpression\"], \n     \"VAR2\": [\"additiveExpression\"], \n     \"(\": [\"additiveExpression\"], \n     \"STR\": [\"additiveExpression\"], \n     \"LANG\": [\"additiveExpression\"], \n     \"LANGMATCHES\": [\"additiveExpression\"], \n     \"DATATYPE\": [\"additiveExpression\"], \n     \"BOUND\": [\"additiveExpression\"], \n     \"IRI\": [\"additiveExpression\"], \n     \"URI\": [\"additiveExpression\"], \n     \"BNODE\": [\"additiveExpression\"], \n     \"RAND\": [\"additiveExpression\"], \n     \"ABS\": [\"additiveExpression\"], \n     \"CEIL\": [\"additiveExpression\"], \n     \"FLOOR\": [\"additiveExpression\"], \n     \"ROUND\": [\"additiveExpression\"], \n     \"CONCAT\": [\"additiveExpression\"], \n     \"STRLEN\": [\"additiveExpression\"], \n     \"UCASE\": [\"additiveExpression\"], \n     \"LCASE\": [\"additiveExpression\"], \n     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \n     \"CONTAINS\": [\"additiveExpression\"], \n     \"STRSTARTS\": [\"additiveExpression\"], \n     \"STRENDS\": [\"additiveExpression\"], \n     \"STRBEFORE\": [\"additiveExpression\"], \n     \"STRAFTER\": [\"additiveExpression\"], \n     \"YEAR\": [\"additiveExpression\"], \n     \"MONTH\": [\"additiveExpression\"], \n     \"DAY\": [\"additiveExpression\"], \n     \"HOURS\": [\"additiveExpression\"], \n     \"MINUTES\": [\"additiveExpression\"], \n     \"SECONDS\": [\"additiveExpression\"], \n     \"TIMEZONE\": [\"additiveExpression\"], \n     \"TZ\": [\"additiveExpression\"], \n     \"NOW\": [\"additiveExpression\"], \n     \"UUID\": [\"additiveExpression\"], \n     \"STRUUID\": [\"additiveExpression\"], \n     \"MD5\": [\"additiveExpression\"], \n     \"SHA1\": [\"additiveExpression\"], \n     \"SHA256\": [\"additiveExpression\"], \n     \"SHA384\": [\"additiveExpression\"], \n     \"SHA512\": [\"additiveExpression\"], \n     \"COALESCE\": [\"additiveExpression\"], \n     \"IF\": [\"additiveExpression\"], \n     \"STRLANG\": [\"additiveExpression\"], \n     \"STRDT\": [\"additiveExpression\"], \n     \"SAMETERM\": [\"additiveExpression\"], \n     \"ISIRI\": [\"additiveExpression\"], \n     \"ISURI\": [\"additiveExpression\"], \n     \"ISBLANK\": [\"additiveExpression\"], \n     \"ISLITERAL\": [\"additiveExpression\"], \n     \"ISNUMERIC\": [\"additiveExpression\"], \n     \"TRUE\": [\"additiveExpression\"], \n     \"FALSE\": [\"additiveExpression\"], \n     \"COUNT\": [\"additiveExpression\"], \n     \"SUM\": [\"additiveExpression\"], \n     \"MIN\": [\"additiveExpression\"], \n     \"MAX\": [\"additiveExpression\"], \n     \"AVG\": [\"additiveExpression\"], \n     \"SAMPLE\": [\"additiveExpression\"], \n     \"GROUP_CONCAT\": [\"additiveExpression\"], \n     \"SUBSTR\": [\"additiveExpression\"], \n     \"REPLACE\": [\"additiveExpression\"], \n     \"REGEX\": [\"additiveExpression\"], \n     \"EXISTS\": [\"additiveExpression\"], \n     \"NOT\": [\"additiveExpression\"], \n     \"IRI_REF\": [\"additiveExpression\"], \n     \"IRI_REF_START\": [\"additiveExpression\"], \n     \"INTEGER\": [\"additiveExpression\"], \n     \"DECIMAL\": [\"additiveExpression\"], \n     \"DOUBLE\": [\"additiveExpression\"], \n     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \n     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \n     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \n     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \n     \"PNAME_LN\": [\"additiveExpression\"], \n     \"PNAME_NS\": [\"additiveExpression\"], \n     \"STRING_LITERAL1\": [\"additiveExpression\"], \n     \"STRING_LITERAL1_START\": [\"additiveExpression\"], \n     \"STRING_LITERAL2\": [\"additiveExpression\"], \n     \"STRING_LITERAL2_START\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"additiveExpression\"]}, \n  \"numericLiteral\" : {\n     \"INTEGER\": [\"numericLiteralUnsigned\"], \n     \"DECIMAL\": [\"numericLiteralUnsigned\"], \n     \"DOUBLE\": [\"numericLiteralUnsigned\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"numericLiteralNegative\" : {\n     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \n     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \n     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \n  \"numericLiteralPositive\" : {\n     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \n     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \n     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \n  \"numericLiteralUnsigned\" : {\n     \"INTEGER\": [\"INTEGER\"], \n     \"DECIMAL\": [\"DECIMAL\"], \n     \"DOUBLE\": [\"DOUBLE\"]}, \n  \"object\" : {\n     \"(\": [\"graphNode\"], \n     \"[\": [\"graphNode\"], \n     \"VAR1\": [\"graphNode\"], \n     \"VAR2\": [\"graphNode\"], \n     \"NIL\": [\"graphNode\"], \n     \"START_XEXPR\": [\"graphNode\"], \n     \"IRI_REF\": [\"graphNode\"], \n     \"IRI_REF_START\": [\"graphNode\"], \n     \"TRUE\": [\"graphNode\"], \n     \"FALSE\": [\"graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\"], \n     \"ANON\": [\"graphNode\"], \n     \"PNAME_LN\": [\"graphNode\"], \n     \"PNAME_NS\": [\"graphNode\"], \n     \"INTEGER\": [\"graphNode\"], \n     \"DECIMAL\": [\"graphNode\"], \n     \"DOUBLE\": [\"graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\"], \n     \"STRING_LITERAL1_START\": [\"graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\"], \n     \"STRING_LITERAL2_START\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNode\"]}, \n  \"objectList\" : {\n     \"(\": [\"object\",\"*[,,object]\"], \n     \"[\": [\"object\",\"*[,,object]\"], \n     \"VAR1\": [\"object\",\"*[,,object]\"], \n     \"VAR2\": [\"object\",\"*[,,object]\"], \n     \"NIL\": [\"object\",\"*[,,object]\"], \n     \"START_XEXPR\": [\"object\",\"*[,,object]\"], \n     \"IRI_REF\": [\"object\",\"*[,,object]\"], \n     \"IRI_REF_START\": [\"object\",\"*[,,object]\"], \n     \"TRUE\": [\"object\",\"*[,,object]\"], \n     \"FALSE\": [\"object\",\"*[,,object]\"], \n     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \n     \"ANON\": [\"object\",\"*[,,object]\"], \n     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \n     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \n     \"INTEGER\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL1_START\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL2_START\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"object\",\"*[,,object]\"]}, \n  \"objectListPath\" : {\n     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"START_XEXPR\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"IRI_REF_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL1_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL2_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"objectPath\",\"*[,,objectPath]\"]}, \n  \"objectPath\" : {\n     \"(\": [\"graphNodePath\"], \n     \"[\": [\"graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\"], \n     \"NIL\": [\"graphNodePath\"], \n     \"START_XEXPR\": [\"graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\"], \n     \"IRI_REF_START\": [\"graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \n     \"ANON\": [\"graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\"], \n     \"STRING_LITERAL1_START\": [\"graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\"], \n     \"STRING_LITERAL2_START\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG1_START\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG2_START\": [\"graphNodePath\"]}, \n  \"offsetClause\" : {\n     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \n  \"optionalGraphPattern\" : {\n     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \n  \"or([*,expression])\" : {\n     \"*\": [\"*\"], \n     \"!\": [\"expression\"], \n     \"+\": [\"expression\"], \n     \"-\": [\"expression\"], \n     \"VAR1\": [\"expression\"], \n     \"VAR2\": [\"expression\"], \n     \"(\": [\"expression\"], \n     \"STR\": [\"expression\"], \n     \"LANG\": [\"expression\"], \n     \"LANGMATCHES\": [\"expression\"], \n     \"DATATYPE\": [\"expression\"], \n     \"BOUND\": [\"expression\"], \n     \"IRI\": [\"expression\"], \n     \"URI\": [\"expression\"], \n     \"BNODE\": [\"expression\"], \n     \"RAND\": [\"expression\"], \n     \"ABS\": [\"expression\"], \n     \"CEIL\": [\"expression\"], \n     \"FLOOR\": [\"expression\"], \n     \"ROUND\": [\"expression\"], \n     \"CONCAT\": [\"expression\"], \n     \"STRLEN\": [\"expression\"], \n     \"UCASE\": [\"expression\"], \n     \"LCASE\": [\"expression\"], \n     \"ENCODE_FOR_URI\": [\"expression\"], \n     \"CONTAINS\": [\"expression\"], \n     \"STRSTARTS\": [\"expression\"], \n     \"STRENDS\": [\"expression\"], \n     \"STRBEFORE\": [\"expression\"], \n     \"STRAFTER\": [\"expression\"], \n     \"YEAR\": [\"expression\"], \n     \"MONTH\": [\"expression\"], \n     \"DAY\": [\"expression\"], \n     \"HOURS\": [\"expression\"], \n     \"MINUTES\": [\"expression\"], \n     \"SECONDS\": [\"expression\"], \n     \"TIMEZONE\": [\"expression\"], \n     \"TZ\": [\"expression\"], \n     \"NOW\": [\"expression\"], \n     \"UUID\": [\"expression\"], \n     \"STRUUID\": [\"expression\"], \n     \"MD5\": [\"expression\"], \n     \"SHA1\": [\"expression\"], \n     \"SHA256\": [\"expression\"], \n     \"SHA384\": [\"expression\"], \n     \"SHA512\": [\"expression\"], \n     \"COALESCE\": [\"expression\"], \n     \"IF\": [\"expression\"], \n     \"STRLANG\": [\"expression\"], \n     \"STRDT\": [\"expression\"], \n     \"SAMETERM\": [\"expression\"], \n     \"ISIRI\": [\"expression\"], \n     \"ISURI\": [\"expression\"], \n     \"ISBLANK\": [\"expression\"], \n     \"ISLITERAL\": [\"expression\"], \n     \"ISNUMERIC\": [\"expression\"], \n     \"TRUE\": [\"expression\"], \n     \"FALSE\": [\"expression\"], \n     \"COUNT\": [\"expression\"], \n     \"SUM\": [\"expression\"], \n     \"MIN\": [\"expression\"], \n     \"MAX\": [\"expression\"], \n     \"AVG\": [\"expression\"], \n     \"SAMPLE\": [\"expression\"], \n     \"GROUP_CONCAT\": [\"expression\"], \n     \"SUBSTR\": [\"expression\"], \n     \"REPLACE\": [\"expression\"], \n     \"REGEX\": [\"expression\"], \n     \"EXISTS\": [\"expression\"], \n     \"NOT\": [\"expression\"], \n     \"IRI_REF\": [\"expression\"], \n     \"IRI_REF_START\": [\"expression\"], \n     \"INTEGER\": [\"expression\"], \n     \"DECIMAL\": [\"expression\"], \n     \"DOUBLE\": [\"expression\"], \n     \"INTEGER_POSITIVE\": [\"expression\"], \n     \"DECIMAL_POSITIVE\": [\"expression\"], \n     \"DOUBLE_POSITIVE\": [\"expression\"], \n     \"INTEGER_NEGATIVE\": [\"expression\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\"], \n     \"PNAME_LN\": [\"expression\"], \n     \"PNAME_NS\": [\"expression\"], \n     \"STRING_LITERAL1\": [\"expression\"], \n     \"STRING_LITERAL1_START\": [\"expression\"], \n     \"STRING_LITERAL2\": [\"expression\"], \n     \"STRING_LITERAL2_START\": [\"expression\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\"]}, \n  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\n     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"*\": [\"*\"]}, \n  \"or([ASC,DESC])\" : {\n     \"ASC\": [\"ASC\"], \n     \"DESC\": [\"DESC\"]}, \n  \"or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"REDUCED\": [\"REDUCED\"]}, \n  \"or([ITERATOR,ITERATE])\" : {\n     \"ITERATOR\": [\"ITERATOR\"], \n     \"ITERATE\": [\"ITERATE\"]}, \n  \"or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"LANGTAG\"], \n     \"^^\": [\"[^^,iriRef]\"]}, \n  \"or([LANGTAG,[^^,xiri]])\" : {\n     \"LANGTAG\": [\"LANGTAG\"], \n     \"^^\": [\"[^^,xiri]\"]}, \n  \"or([NIL,[ (,*var,)]])\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"[ (,*var,)]\"]}, \n  \"or([SOURCE,LOOK UP])\" : {\n     \"SOURCE\": [\"SOURCE\"], \n     \"LOOK UP\": [\"LOOK UP\"]}, \n  \"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\" : {\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n     \"STRING_LITERAL1_START\": [\"[STRING_LITERAL1_START,xString_Literal1_Sub]\"]}, \n  \"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\" : {\n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n     \"STRING_LITERAL2_START\": [\"[STRING_LITERAL2_START,xString_Literal2_Sub]\"]}, \n  \"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\" : {\n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n     \"STRING_LITERAL_LONG1_START\": [\"[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]\"]}, \n  \"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\" : {\n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"], \n     \"STRING_LITERAL_LONG2_START\": [\"[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]\"]}, \n  \"or([WHEREVER,WHERE])\" : {\n     \"WHEREVER\": [\"WHEREVER\"], \n     \"WHERE\": [\"WHERE\"]}, \n  \"or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"[ (,*dataBlockValue,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[ (,expression,)],NIL])\" : {\n     \"(\": [\"[ (,expression,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"[*,unaryExpression]\"], \n     \"/\": [\"[/,unaryExpression]\"]}, \n  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"[+,multiplicativeExpression]\"], \n     \"-\": [\"[-,multiplicativeExpression]\"], \n     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \n  \"or([[,,or([},[integer,}]])],}])\" : {\n     \",\": [\"[,,or([},[integer,}]])]\"], \n     \"}\": [\"}\"]}, \n  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"[=,numericExpression]\"], \n     \"!=\": [\"[!=,numericExpression]\"], \n     \"<\": [\"[<,numericExpression]\"], \n     \">\": [\"[>,numericExpression]\"], \n     \"<=\": [\"[<=,numericExpression]\"], \n     \">=\": [\"[>=,numericExpression]\"], \n     \"IN\": [\"[IN,expressionList]\"], \n     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \n  \"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\" : {\n     \"IRI_REF_SUB\": [\"[IRI_REF_SUB,xiri_Sub]\"], \n     \"IRI_REF_END\": [\"IRI_REF_END\"]}, \n  \"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\" : {\n     \"STRING_LITERAL1_SUB\": [\"[STRING_LITERAL1_SUB,xString_Literal1_Sub]\"], \n     \"STRING_LITERAL1_END\": [\"STRING_LITERAL1_END\"]}, \n  \"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\" : {\n     \"STRING_LITERAL2_SUB\": [\"[STRING_LITERAL2_SUB,xString_Literal2_Sub]\"], \n     \"STRING_LITERAL2_END\": [\"STRING_LITERAL2_END\"]}, \n  \"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\" : {\n     \"STRING_LITERAL_LONG1_SUB\": [\"[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub]\"], \n     \"STRING_LITERAL_LONG1_END\": [\"STRING_LITERAL_LONG1_END\"]}, \n  \"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\" : {\n     \"STRING_LITERAL_LONG2_SUB\": [\"[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub]\"], \n     \"STRING_LITERAL_LONG2_END\": [\"STRING_LITERAL_LONG2_END\"]}, \n  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\n     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \n     \",\": [\"[,,integer,}]\"]}, \n  \"or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"baseDecl\"], \n     \"PREFIX\": [\"prefixDecl\"]}, \n  \"or([defaultGraphClause,namedGraphClause])\" : {\n     \"IRI_REF\": [\"defaultGraphClause\"], \n     \"PNAME_LN\": [\"defaultGraphClause\"], \n     \"PNAME_NS\": [\"defaultGraphClause\"], \n     \"NAMED\": [\"namedGraphClause\"]}, \n  \"or([generateQuery1,generateQuery2])\" : {\n     \"GENERATE\": [\"generateQuery1\"], \n     \"CONSTRUCT\": [\"generateQuery2\"], \n     \"WHEREVER\": [\"generateQuery2\"], \n     \"WHERE\": [\"generateQuery2\"], \n     \"FROM\": [\"generateQuery2\"], \n     \"ORDER\": [\"generateQuery2\"], \n     \"HAVING\": [\"generateQuery2\"], \n     \"GROUP\": [\"generateQuery2\"], \n     \"{\": [\"generateQuery2\"], \n     \"ITERATOR\": [\"generateQuery2\"], \n     \"ITERATE\": [\"generateQuery2\"], \n     \"SOURCE\": [\"generateQuery2\"], \n     \"LOOK UP\": [\"generateQuery2\"], \n     \"BIND\": [\"generateQuery2\"], \n     \"LIMIT\": [\"generateQuery2\"], \n     \"OFFSET\": [\"generateQuery2\"]}, \n  \"or([inlineDataOneVar,inlineDataFull])\" : {\n     \"VAR1\": [\"inlineDataOneVar\"], \n     \"VAR2\": [\"inlineDataOneVar\"], \n     \"NIL\": [\"inlineDataFull\"], \n     \"(\": [\"inlineDataFull\"]}, \n  \"or([iriRef,[IRI_REF_START,xiri_Sub]])\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"IRI_REF_START\": [\"[IRI_REF_START,xiri_Sub]\"]}, \n  \"or([iteratorClause,sourceClause,bind])\" : {\n     \"ITERATOR\": [\"iteratorClause\"], \n     \"ITERATE\": [\"iteratorClause\"], \n     \"SOURCE\": [\"sourceClause\"], \n     \"LOOK UP\": [\"sourceClause\"], \n     \"BIND\": [\"bind\"]}, \n  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"or([sourceSelector,generateTemplate])\" : {\n     \"IRI_REF\": [\"sourceSelector\"], \n     \"PNAME_LN\": [\"sourceSelector\"], \n     \"PNAME_NS\": [\"sourceSelector\"], \n     \"{\": [\"generateTemplate\"]}, \n  \"or([subGenerateQuery1,subGenerateQuery2])\" : {\n     \"GENERATE\": [\"subGenerateQuery1\"], \n     \"CONSTRUCT\": [\"subGenerateQuery2\"], \n     \"WHEREVER\": [\"subGenerateQuery2\"], \n     \"WHERE\": [\"subGenerateQuery2\"], \n     \"ORDER\": [\"subGenerateQuery2\"], \n     \"HAVING\": [\"subGenerateQuery2\"], \n     \"GROUP\": [\"subGenerateQuery2\"], \n     \"{\": [\"subGenerateQuery2\"], \n     \"ITERATOR\": [\"subGenerateQuery2\"], \n     \"ITERATE\": [\"subGenerateQuery2\"], \n     \"SOURCE\": [\"subGenerateQuery2\"], \n     \"LOOK UP\": [\"subGenerateQuery2\"], \n     \"BIND\": [\"subGenerateQuery2\"], \n     \"LIMIT\": [\"subGenerateQuery2\"], \n     \"OFFSET\": [\"subGenerateQuery2\"]}, \n  \"or([subSelect,groupGraphPatternSub])\" : {\n     \"SELECT\": [\"subSelect\"], \n     \"{\": [\"groupGraphPatternSub\"], \n     \"OPTIONAL\": [\"groupGraphPatternSub\"], \n     \"MINUS\": [\"groupGraphPatternSub\"], \n     \"GRAPH\": [\"groupGraphPatternSub\"], \n     \"SERVICE\": [\"groupGraphPatternSub\"], \n     \"FILTER\": [\"groupGraphPatternSub\"], \n     \"BIND\": [\"groupGraphPatternSub\"], \n     \"VALUES\": [\"groupGraphPatternSub\"], \n     \"VAR1\": [\"groupGraphPatternSub\"], \n     \"VAR2\": [\"groupGraphPatternSub\"], \n     \"NIL\": [\"groupGraphPatternSub\"], \n     \"(\": [\"groupGraphPatternSub\"], \n     \"[\": [\"groupGraphPatternSub\"], \n     \"START_XEXPR\": [\"groupGraphPatternSub\"], \n     \"IRI_REF\": [\"groupGraphPatternSub\"], \n     \"IRI_REF_START\": [\"groupGraphPatternSub\"], \n     \"TRUE\": [\"groupGraphPatternSub\"], \n     \"FALSE\": [\"groupGraphPatternSub\"], \n     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \n     \"ANON\": [\"groupGraphPatternSub\"], \n     \"PNAME_LN\": [\"groupGraphPatternSub\"], \n     \"PNAME_NS\": [\"groupGraphPatternSub\"], \n     \"INTEGER\": [\"groupGraphPatternSub\"], \n     \"DECIMAL\": [\"groupGraphPatternSub\"], \n     \"DOUBLE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL1_START\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL2_START\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG1_START\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG2_START\": [\"groupGraphPatternSub\"], \n     \"}\": [\"groupGraphPatternSub\"]}, \n  \"or([var,[ (,expression,AS,var,)]])\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"(\": [\"[ (,expression,AS,var,)]\"]}, \n  \"or([var,xExpr])\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"START_XEXPR\": [\"xExpr\"]}, \n  \"or([verbPath,verbSimple])\" : {\n     \"^\": [\"verbPath\"], \n     \"a\": [\"verbPath\"], \n     \"!\": [\"verbPath\"], \n     \"(\": [\"verbPath\"], \n     \"IRI_REF\": [\"verbPath\"], \n     \"IRI_REF_START\": [\"verbPath\"], \n     \"PNAME_LN\": [\"verbPath\"], \n     \"PNAME_NS\": [\"verbPath\"], \n     \"VAR1\": [\"verbSimple\"], \n     \"VAR2\": [\"verbSimple\"], \n     \"START_XEXPR\": [\"verbSimple\"]}, \n  \"or([xiri,a])\" : {\n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"], \n     \"a\": [\"a\"]}, \n  \"or([},[integer,}]])\" : {\n     \"}\": [\"}\"], \n     \"INTEGER\": [\"[integer,}]\"]}, \n  \"orderClause\" : {\n     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \n  \"orderCondition\" : {\n     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"path\" : {\n     \"^\": [\"pathAlternative\"], \n     \"a\": [\"pathAlternative\"], \n     \"!\": [\"pathAlternative\"], \n     \"(\": [\"pathAlternative\"], \n     \"IRI_REF\": [\"pathAlternative\"], \n     \"IRI_REF_START\": [\"pathAlternative\"], \n     \"PNAME_LN\": [\"pathAlternative\"], \n     \"PNAME_NS\": [\"pathAlternative\"]}, \n  \"pathAlternative\" : {\n     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"IRI_REF_START\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \n  \"pathElt\" : {\n     \"a\": [\"pathPrimary\",\"?pathMod\"], \n     \"!\": [\"pathPrimary\",\"?pathMod\"], \n     \"(\": [\"pathPrimary\",\"?pathMod\"], \n     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \n     \"IRI_REF_START\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \n  \"pathEltOrInverse\" : {\n     \"a\": [\"pathElt\"], \n     \"!\": [\"pathElt\"], \n     \"(\": [\"pathElt\"], \n     \"IRI_REF\": [\"pathElt\"], \n     \"IRI_REF_START\": [\"pathElt\"], \n     \"PNAME_LN\": [\"pathElt\"], \n     \"PNAME_NS\": [\"pathElt\"], \n     \"^\": [\"^\",\"pathElt\"]}, \n  \"pathMod\" : {\n     \"*\": [\"*\"], \n     \"?\": [\"?\"], \n     \"+\": [\"+\"], \n     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \n  \"pathNegatedPropertySet\" : {\n     \"a\": [\"pathOneInPropertySet\"], \n     \"^\": [\"pathOneInPropertySet\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\"], \n     \"IRI_REF_START\": [\"pathOneInPropertySet\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\"], \n     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \n  \"pathOneInPropertySet\" : {\n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"], \n     \"a\": [\"a\"], \n     \"^\": [\"^\",\"or([xiri,a])\"]}, \n  \"pathPrimary\" : {\n     \"IRI_REF\": [\"storeProperty\",\"xiri\"], \n     \"IRI_REF_START\": [\"storeProperty\",\"xiri\"], \n     \"PNAME_LN\": [\"storeProperty\",\"xiri\"], \n     \"PNAME_NS\": [\"storeProperty\",\"xiri\"], \n     \"a\": [\"storeProperty\",\"a\"], \n     \"!\": [\"!\",\"pathNegatedPropertySet\"], \n     \"(\": [\"(\",\"path\",\")\"]}, \n  \"pathSequence\" : {\n     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"IRI_REF_START\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \n  \"prefixDecl\" : {\n     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \n  \"prefixedName\" : {\n     \"PNAME_LN\": [\"PNAME_LN\"], \n     \"PNAME_NS\": [\"PNAME_NS\"]}, \n  \"primaryExpression\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"xiriOrFunction\"], \n     \"IRI_REF_START\": [\"xiriOrFunction\"], \n     \"PNAME_LN\": [\"xiriOrFunction\"], \n     \"PNAME_NS\": [\"xiriOrFunction\"], \n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"COUNT\": [\"aggregate\"], \n     \"SUM\": [\"aggregate\"], \n     \"MIN\": [\"aggregate\"], \n     \"MAX\": [\"aggregate\"], \n     \"AVG\": [\"aggregate\"], \n     \"SAMPLE\": [\"aggregate\"], \n     \"GROUP_CONCAT\": [\"aggregate\"]}, \n  \"prologue\" : {\n     \"BASE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"*or([baseDecl,prefixDecl])\"], \n     \"GENERATE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CONSTRUCT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"WHEREVER\": [\"*or([baseDecl,prefixDecl])\"], \n     \"WHERE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"FROM\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ORDER\": [\"*or([baseDecl,prefixDecl])\"], \n     \"HAVING\": [\"*or([baseDecl,prefixDecl])\"], \n     \"GROUP\": [\"*or([baseDecl,prefixDecl])\"], \n     \"{\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ITERATOR\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ITERATE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"SOURCE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"LOOK UP\": [\"*or([baseDecl,prefixDecl])\"], \n     \"BIND\": [\"*or([baseDecl,prefixDecl])\"], \n     \"LIMIT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"OFFSET\": [\"*or([baseDecl,prefixDecl])\"]}, \n  \"propertyList\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"NIL\": [\"propertyListNotEmpty\"], \n     \"START_XEXPR\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"IRI_REF_START\": [\"propertyListNotEmpty\"], \n     \"TRUE\": [\"propertyListNotEmpty\"], \n     \"FALSE\": [\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"propertyListNotEmpty\"], \n     \"ANON\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"}\": [], \n     \"GENERATE\": [], \n     \"CONSTRUCT\": [], \n     \"WHEREVER\": [], \n     \"WHERE\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"{\": [], \n     \"ITERATOR\": [], \n     \"ITERATE\": [], \n     \"SOURCE\": [], \n     \"LOOK UP\": [], \n     \"BIND\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": []}, \n  \"propertyListNotEmpty\" : {\n     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"NIL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"START_XEXPR\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"IRI_REF_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"TRUE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"FALSE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"BLANK_NODE_LABEL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"ANON\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"INTEGER\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DECIMAL\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DOUBLE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"INTEGER_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DECIMAL_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DOUBLE_POSITIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"INTEGER_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DECIMAL_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"DOUBLE_NEGATIVE\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL1_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL2_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \n  \"propertyListPath\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"NIL\": [\"propertyListNotEmpty\"], \n     \"START_XEXPR\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"IRI_REF_START\": [\"propertyListNotEmpty\"], \n     \"TRUE\": [\"propertyListNotEmpty\"], \n     \"FALSE\": [\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"propertyListNotEmpty\"], \n     \"ANON\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"propertyListPathNotEmpty\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"START_XEXPR\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"IRI_REF_START\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \n  \"rdfLiteral\" : {\n     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \n  \"regexExpression\" : {\n     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"relationalExpression\" : {\n     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI_REF_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL1_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL2_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \n  \"selectClause\" : {\n     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \n  \"serviceGraphPattern\" : {\n     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIri\",\"groupGraphPattern\"]}, \n  \"solutionModifier\" : {\n     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"CONSTRUCT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \".\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \n  \"sourceClause\" : {\n     \"SOURCE\": [\"or([SOURCE,LOOK UP])\",\"varOrIri\",\"?[ACCEPT,varOrIri]\",\"AS\",\"var\"], \n     \"LOOK UP\": [\"or([SOURCE,LOOK UP])\",\"varOrIri\",\"?[ACCEPT,varOrIri]\",\"AS\",\"var\"]}, \n  \"sourceSelector\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"]}, \n  \"sparql11\" : {\n     \"GENERATE\": [\"generateUnit\",\"$\"], \n     \"CONSTRUCT\": [\"generateUnit\",\"$\"], \n     \"WHEREVER\": [\"generateUnit\",\"$\"], \n     \"WHERE\": [\"generateUnit\",\"$\"], \n     \"FROM\": [\"generateUnit\",\"$\"], \n     \"BASE\": [\"generateUnit\",\"$\"], \n     \"PREFIX\": [\"generateUnit\",\"$\"], \n     \"ORDER\": [\"generateUnit\",\"$\"], \n     \"HAVING\": [\"generateUnit\",\"$\"], \n     \"GROUP\": [\"generateUnit\",\"$\"], \n     \"{\": [\"generateUnit\",\"$\"], \n     \"ITERATOR\": [\"generateUnit\",\"$\"], \n     \"ITERATE\": [\"generateUnit\",\"$\"], \n     \"SOURCE\": [\"generateUnit\",\"$\"], \n     \"LOOK UP\": [\"generateUnit\",\"$\"], \n     \"BIND\": [\"generateUnit\",\"$\"], \n     \"LIMIT\": [\"generateUnit\",\"$\"], \n     \"OFFSET\": [\"generateUnit\",\"$\"]}, \n  \"storeProperty\" : {\n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"START_XEXPR\": [], \n     \"IRI_REF\": [], \n     \"IRI_REF_START\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL1_START\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL2_START\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG1_START\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"STRING_LITERAL_LONG2_START\": [], \n     \"a\": []}, \n  \"strReplaceExpression\" : {\n     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"string\" : {\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \n  \"subGenerateQuery1\" : {\n     \"GENERATE\": [\"GENERATE\",\"or([sourceSelector,generateTemplate])\",\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\".\"]}, \n  \"subGenerateQuery2\" : {\n     \"CONSTRUCT\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"ORDER\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"HAVING\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"GROUP\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"LIMIT\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"OFFSET\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"WHEREVER\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"WHERE\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"{\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"ITERATOR\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"ITERATE\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"SOURCE\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"LOOK UP\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"], \n     \"BIND\": [\"*iteratorOrSourceClause\",\"?whereClause\",\"solutionModifier\",\"CONSTRUCT\",\"or([sourceSelector,generateTemplate])\",\".\"]}, \n  \"subSelect\" : {\n     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \n  \"substringExpression\" : {\n     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"switchToParsingXIRI\" : {\n     \"IRI_REF_SUB\": [], \n     \"IRI_REF_END\": []}, \n  \"switchToParsingXL1\" : {\n     \"STRING_LITERAL_LONG1_SUB\": [], \n     \"STRING_LITERAL_LONG1_END\": []}, \n  \"switchToParsingXL2\" : {\n     \"STRING_LITERAL_LONG2_SUB\": [], \n     \"STRING_LITERAL_LONG2_END\": []}, \n  \"switchToParsingXS1\" : {\n     \"STRING_LITERAL1_SUB\": [], \n     \"STRING_LITERAL1_END\": []}, \n  \"switchToParsingXS2\" : {\n     \"STRING_LITERAL2_SUB\": [], \n     \"STRING_LITERAL2_END\": []}, \n  \"triplesBlock\" : {\n     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"START_XEXPR\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"IRI_REF_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL1_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL2_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2_START\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \n  \"triplesNode\" : {\n     \"(\": [\"collection\"], \n     \"[\": [\"blankNodePropertyList\"]}, \n  \"triplesNodePath\" : {\n     \"(\": [\"collectionPath\"], \n     \"[\": [\"blankNodePropertyListPath\"]}, \n  \"triplesSameSubject\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"START_XEXPR\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"IRI_REF_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"(\": [\"triplesNode\",\"propertyList\"], \n     \"[\": [\"triplesNode\",\"propertyList\"]}, \n  \"triplesSameSubjectPath\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"START_XEXPR\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"IRI_REF_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL1_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL2_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG1_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG2_START\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \n     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \n  \"unaryExpression\" : {\n     \"!\": [\"!\",\"primaryExpression\"], \n     \"+\": [\"+\",\"primaryExpression\"], \n     \"-\": [\"-\",\"primaryExpression\"], \n     \"VAR1\": [\"primaryExpression\"], \n     \"VAR2\": [\"primaryExpression\"], \n     \"(\": [\"primaryExpression\"], \n     \"STR\": [\"primaryExpression\"], \n     \"LANG\": [\"primaryExpression\"], \n     \"LANGMATCHES\": [\"primaryExpression\"], \n     \"DATATYPE\": [\"primaryExpression\"], \n     \"BOUND\": [\"primaryExpression\"], \n     \"IRI\": [\"primaryExpression\"], \n     \"URI\": [\"primaryExpression\"], \n     \"BNODE\": [\"primaryExpression\"], \n     \"RAND\": [\"primaryExpression\"], \n     \"ABS\": [\"primaryExpression\"], \n     \"CEIL\": [\"primaryExpression\"], \n     \"FLOOR\": [\"primaryExpression\"], \n     \"ROUND\": [\"primaryExpression\"], \n     \"CONCAT\": [\"primaryExpression\"], \n     \"STRLEN\": [\"primaryExpression\"], \n     \"UCASE\": [\"primaryExpression\"], \n     \"LCASE\": [\"primaryExpression\"], \n     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \n     \"CONTAINS\": [\"primaryExpression\"], \n     \"STRSTARTS\": [\"primaryExpression\"], \n     \"STRENDS\": [\"primaryExpression\"], \n     \"STRBEFORE\": [\"primaryExpression\"], \n     \"STRAFTER\": [\"primaryExpression\"], \n     \"YEAR\": [\"primaryExpression\"], \n     \"MONTH\": [\"primaryExpression\"], \n     \"DAY\": [\"primaryExpression\"], \n     \"HOURS\": [\"primaryExpression\"], \n     \"MINUTES\": [\"primaryExpression\"], \n     \"SECONDS\": [\"primaryExpression\"], \n     \"TIMEZONE\": [\"primaryExpression\"], \n     \"TZ\": [\"primaryExpression\"], \n     \"NOW\": [\"primaryExpression\"], \n     \"UUID\": [\"primaryExpression\"], \n     \"STRUUID\": [\"primaryExpression\"], \n     \"MD5\": [\"primaryExpression\"], \n     \"SHA1\": [\"primaryExpression\"], \n     \"SHA256\": [\"primaryExpression\"], \n     \"SHA384\": [\"primaryExpression\"], \n     \"SHA512\": [\"primaryExpression\"], \n     \"COALESCE\": [\"primaryExpression\"], \n     \"IF\": [\"primaryExpression\"], \n     \"STRLANG\": [\"primaryExpression\"], \n     \"STRDT\": [\"primaryExpression\"], \n     \"SAMETERM\": [\"primaryExpression\"], \n     \"ISIRI\": [\"primaryExpression\"], \n     \"ISURI\": [\"primaryExpression\"], \n     \"ISBLANK\": [\"primaryExpression\"], \n     \"ISLITERAL\": [\"primaryExpression\"], \n     \"ISNUMERIC\": [\"primaryExpression\"], \n     \"TRUE\": [\"primaryExpression\"], \n     \"FALSE\": [\"primaryExpression\"], \n     \"COUNT\": [\"primaryExpression\"], \n     \"SUM\": [\"primaryExpression\"], \n     \"MIN\": [\"primaryExpression\"], \n     \"MAX\": [\"primaryExpression\"], \n     \"AVG\": [\"primaryExpression\"], \n     \"SAMPLE\": [\"primaryExpression\"], \n     \"GROUP_CONCAT\": [\"primaryExpression\"], \n     \"SUBSTR\": [\"primaryExpression\"], \n     \"REPLACE\": [\"primaryExpression\"], \n     \"REGEX\": [\"primaryExpression\"], \n     \"EXISTS\": [\"primaryExpression\"], \n     \"NOT\": [\"primaryExpression\"], \n     \"IRI_REF\": [\"primaryExpression\"], \n     \"IRI_REF_START\": [\"primaryExpression\"], \n     \"INTEGER\": [\"primaryExpression\"], \n     \"DECIMAL\": [\"primaryExpression\"], \n     \"DOUBLE\": [\"primaryExpression\"], \n     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \n     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \n     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \n     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \n     \"PNAME_LN\": [\"primaryExpression\"], \n     \"PNAME_NS\": [\"primaryExpression\"], \n     \"STRING_LITERAL1\": [\"primaryExpression\"], \n     \"STRING_LITERAL1_START\": [\"primaryExpression\"], \n     \"STRING_LITERAL2\": [\"primaryExpression\"], \n     \"STRING_LITERAL2_START\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"primaryExpression\"]}, \n  \"valueLogical\" : {\n     \"!\": [\"relationalExpression\"], \n     \"+\": [\"relationalExpression\"], \n     \"-\": [\"relationalExpression\"], \n     \"VAR1\": [\"relationalExpression\"], \n     \"VAR2\": [\"relationalExpression\"], \n     \"(\": [\"relationalExpression\"], \n     \"STR\": [\"relationalExpression\"], \n     \"LANG\": [\"relationalExpression\"], \n     \"LANGMATCHES\": [\"relationalExpression\"], \n     \"DATATYPE\": [\"relationalExpression\"], \n     \"BOUND\": [\"relationalExpression\"], \n     \"IRI\": [\"relationalExpression\"], \n     \"URI\": [\"relationalExpression\"], \n     \"BNODE\": [\"relationalExpression\"], \n     \"RAND\": [\"relationalExpression\"], \n     \"ABS\": [\"relationalExpression\"], \n     \"CEIL\": [\"relationalExpression\"], \n     \"FLOOR\": [\"relationalExpression\"], \n     \"ROUND\": [\"relationalExpression\"], \n     \"CONCAT\": [\"relationalExpression\"], \n     \"STRLEN\": [\"relationalExpression\"], \n     \"UCASE\": [\"relationalExpression\"], \n     \"LCASE\": [\"relationalExpression\"], \n     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \n     \"CONTAINS\": [\"relationalExpression\"], \n     \"STRSTARTS\": [\"relationalExpression\"], \n     \"STRENDS\": [\"relationalExpression\"], \n     \"STRBEFORE\": [\"relationalExpression\"], \n     \"STRAFTER\": [\"relationalExpression\"], \n     \"YEAR\": [\"relationalExpression\"], \n     \"MONTH\": [\"relationalExpression\"], \n     \"DAY\": [\"relationalExpression\"], \n     \"HOURS\": [\"relationalExpression\"], \n     \"MINUTES\": [\"relationalExpression\"], \n     \"SECONDS\": [\"relationalExpression\"], \n     \"TIMEZONE\": [\"relationalExpression\"], \n     \"TZ\": [\"relationalExpression\"], \n     \"NOW\": [\"relationalExpression\"], \n     \"UUID\": [\"relationalExpression\"], \n     \"STRUUID\": [\"relationalExpression\"], \n     \"MD5\": [\"relationalExpression\"], \n     \"SHA1\": [\"relationalExpression\"], \n     \"SHA256\": [\"relationalExpression\"], \n     \"SHA384\": [\"relationalExpression\"], \n     \"SHA512\": [\"relationalExpression\"], \n     \"COALESCE\": [\"relationalExpression\"], \n     \"IF\": [\"relationalExpression\"], \n     \"STRLANG\": [\"relationalExpression\"], \n     \"STRDT\": [\"relationalExpression\"], \n     \"SAMETERM\": [\"relationalExpression\"], \n     \"ISIRI\": [\"relationalExpression\"], \n     \"ISURI\": [\"relationalExpression\"], \n     \"ISBLANK\": [\"relationalExpression\"], \n     \"ISLITERAL\": [\"relationalExpression\"], \n     \"ISNUMERIC\": [\"relationalExpression\"], \n     \"TRUE\": [\"relationalExpression\"], \n     \"FALSE\": [\"relationalExpression\"], \n     \"COUNT\": [\"relationalExpression\"], \n     \"SUM\": [\"relationalExpression\"], \n     \"MIN\": [\"relationalExpression\"], \n     \"MAX\": [\"relationalExpression\"], \n     \"AVG\": [\"relationalExpression\"], \n     \"SAMPLE\": [\"relationalExpression\"], \n     \"GROUP_CONCAT\": [\"relationalExpression\"], \n     \"SUBSTR\": [\"relationalExpression\"], \n     \"REPLACE\": [\"relationalExpression\"], \n     \"REGEX\": [\"relationalExpression\"], \n     \"EXISTS\": [\"relationalExpression\"], \n     \"NOT\": [\"relationalExpression\"], \n     \"IRI_REF\": [\"relationalExpression\"], \n     \"IRI_REF_START\": [\"relationalExpression\"], \n     \"INTEGER\": [\"relationalExpression\"], \n     \"DECIMAL\": [\"relationalExpression\"], \n     \"DOUBLE\": [\"relationalExpression\"], \n     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \n     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \n     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \n     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \n     \"PNAME_LN\": [\"relationalExpression\"], \n     \"PNAME_NS\": [\"relationalExpression\"], \n     \"STRING_LITERAL1\": [\"relationalExpression\"], \n     \"STRING_LITERAL1_START\": [\"relationalExpression\"], \n     \"STRING_LITERAL2\": [\"relationalExpression\"], \n     \"STRING_LITERAL2_START\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG1_START\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG2_START\": [\"relationalExpression\"]}, \n  \"valuesClause\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"], \n     \"}\": []}, \n  \"var\" : {\n     \"VAR1\": [\"VAR1\"], \n     \"VAR2\": [\"VAR2\"]}, \n  \"varOrIri\" : {\n     \"VAR1\": [\"varOrXExpr\"], \n     \"VAR2\": [\"varOrXExpr\"], \n     \"START_XEXPR\": [\"varOrXExpr\"], \n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"]}, \n  \"varOrTerm\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"NIL\": [\"xTerm\"], \n     \"START_XEXPR\": [\"xTerm\"], \n     \"IRI_REF\": [\"xTerm\"], \n     \"IRI_REF_START\": [\"xTerm\"], \n     \"TRUE\": [\"xTerm\"], \n     \"FALSE\": [\"xTerm\"], \n     \"BLANK_NODE_LABEL\": [\"xTerm\"], \n     \"ANON\": [\"xTerm\"], \n     \"PNAME_LN\": [\"xTerm\"], \n     \"PNAME_NS\": [\"xTerm\"], \n     \"INTEGER\": [\"xTerm\"], \n     \"DECIMAL\": [\"xTerm\"], \n     \"DOUBLE\": [\"xTerm\"], \n     \"INTEGER_POSITIVE\": [\"xTerm\"], \n     \"DECIMAL_POSITIVE\": [\"xTerm\"], \n     \"DOUBLE_POSITIVE\": [\"xTerm\"], \n     \"INTEGER_NEGATIVE\": [\"xTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"xTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"xTerm\"], \n     \"STRING_LITERAL1\": [\"xTerm\"], \n     \"STRING_LITERAL1_START\": [\"xTerm\"], \n     \"STRING_LITERAL2\": [\"xTerm\"], \n     \"STRING_LITERAL2_START\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"xTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xTerm\"]}, \n  \"varOrXExpr\" : {\n     \"VAR1\": [\"or([var,xExpr])\"], \n     \"VAR2\": [\"or([var,xExpr])\"], \n     \"START_XEXPR\": [\"or([var,xExpr])\"]}, \n  \"verb\" : {\n     \"VAR1\": [\"storeProperty\",\"varOrTerm\"], \n     \"VAR2\": [\"storeProperty\",\"varOrTerm\"], \n     \"NIL\": [\"storeProperty\",\"varOrTerm\"], \n     \"START_XEXPR\": [\"storeProperty\",\"varOrTerm\"], \n     \"IRI_REF\": [\"storeProperty\",\"varOrTerm\"], \n     \"IRI_REF_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"TRUE\": [\"storeProperty\",\"varOrTerm\"], \n     \"FALSE\": [\"storeProperty\",\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"storeProperty\",\"varOrTerm\"], \n     \"ANON\": [\"storeProperty\",\"varOrTerm\"], \n     \"PNAME_LN\": [\"storeProperty\",\"varOrTerm\"], \n     \"PNAME_NS\": [\"storeProperty\",\"varOrTerm\"], \n     \"INTEGER\": [\"storeProperty\",\"varOrTerm\"], \n     \"DECIMAL\": [\"storeProperty\",\"varOrTerm\"], \n     \"DOUBLE\": [\"storeProperty\",\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL1_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL2_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"storeProperty\",\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2_START\": [\"storeProperty\",\"varOrTerm\"], \n     \"a\": [\"storeProperty\",\"a\"]}, \n  \"verbPath\" : {\n     \"^\": [\"path\"], \n     \"a\": [\"path\"], \n     \"!\": [\"path\"], \n     \"(\": [\"path\"], \n     \"IRI_REF\": [\"path\"], \n     \"IRI_REF_START\": [\"path\"], \n     \"PNAME_LN\": [\"path\"], \n     \"PNAME_NS\": [\"path\"]}, \n  \"verbSimple\" : {\n     \"VAR1\": [\"varOrXExpr\"], \n     \"VAR2\": [\"varOrXExpr\"], \n     \"START_XEXPR\": [\"varOrXExpr\"]}, \n  \"whereClause\" : {\n     \"{\": [\"?or([WHEREVER,WHERE])\",\"groupGraphPattern\"], \n     \"WHEREVER\": [\"?or([WHEREVER,WHERE])\",\"groupGraphPattern\"], \n     \"WHERE\": [\"?or([WHEREVER,WHERE])\",\"groupGraphPattern\"]}, \n  \"xExpr\" : {\n     \"START_XEXPR\": [\"START_XEXPR\",\"expression\",\"}\"]}, \n  \"xNode\" : {\n     \"START_XEXPR\": [\"xExpr\"], \n     \"STRING_LITERAL1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL2_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"xRDFLiteral\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xRDFLiteral\"], \n     \"IRI_REF\": [\"xiri\"], \n     \"IRI_REF_START\": [\"xiri\"], \n     \"PNAME_LN\": [\"xiri\"], \n     \"PNAME_NS\": [\"xiri\"]}, \n  \"xRDFLiteral\" : {\n     \"STRING_LITERAL1\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL1_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL2\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL2_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG1\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG2\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xString\",\"?or([LANGTAG,[^^,xiri]])\"]}, \n  \"xString\" : {\n     \"STRING_LITERAL1\": [\"xString_Literal1\"], \n     \"STRING_LITERAL1_START\": [\"xString_Literal1\"], \n     \"STRING_LITERAL2\": [\"xString_Literal2\"], \n     \"STRING_LITERAL2_START\": [\"xString_Literal2\"], \n     \"STRING_LITERAL_LONG1\": [\"xString_Literal_Long1\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xString_Literal_Long1\"], \n     \"STRING_LITERAL_LONG2\": [\"xString_Literal_Long2\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xString_Literal_Long2\"]}, \n  \"xString_Literal1\" : {\n     \"STRING_LITERAL1\": [\"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\"], \n     \"STRING_LITERAL1_START\": [\"or([STRING_LITERAL1,[STRING_LITERAL1_START,xString_Literal1_Sub]])\"]}, \n  \"xString_Literal1_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXS1\",\"or([[STRING_LITERAL1_SUB,xString_Literal1_Sub],STRING_LITERAL1_END])\"]}, \n  \"xString_Literal2\" : {\n     \"STRING_LITERAL2\": [\"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\"], \n     \"STRING_LITERAL2_START\": [\"or([STRING_LITERAL2,[STRING_LITERAL2_START,xString_Literal2_Sub]])\"]}, \n  \"xString_Literal2_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXS2\",\"or([[STRING_LITERAL2_SUB,xString_Literal2_Sub],STRING_LITERAL2_END])\"]}, \n  \"xString_Literal_Long1\" : {\n     \"STRING_LITERAL_LONG1\": [\"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"or([STRING_LITERAL_LONG1,[STRING_LITERAL_LONG1_START,xString_Literal_Long1_Sub]])\"]}, \n  \"xString_Literal_Long1_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXL1\",\"or([[STRING_LITERAL_LONG1_SUB,xString_Literal_Long1_Sub],STRING_LITERAL_LONG1_END])\"]}, \n  \"xString_Literal_Long2\" : {\n     \"STRING_LITERAL_LONG2\": [\"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"or([STRING_LITERAL_LONG2,[STRING_LITERAL_LONG2_START,xString_Literal_Long2_Sub]])\"]}, \n  \"xString_Literal_Long2_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXL2\",\"or([[STRING_LITERAL_LONG2_SUB,xString_Literal_Long2_Sub],STRING_LITERAL_LONG2_END])\"]}, \n  \"xTerm\" : {\n     \"START_XEXPR\": [\"xNode\"], \n     \"IRI_REF\": [\"xNode\"], \n     \"IRI_REF_START\": [\"xNode\"], \n     \"PNAME_LN\": [\"xNode\"], \n     \"PNAME_NS\": [\"xNode\"], \n     \"STRING_LITERAL1\": [\"xNode\"], \n     \"STRING_LITERAL1_START\": [\"xNode\"], \n     \"STRING_LITERAL2\": [\"xNode\"], \n     \"STRING_LITERAL2_START\": [\"xNode\"], \n     \"STRING_LITERAL_LONG1\": [\"xNode\"], \n     \"STRING_LITERAL_LONG1_START\": [\"xNode\"], \n     \"STRING_LITERAL_LONG2\": [\"xNode\"], \n     \"STRING_LITERAL_LONG2_START\": [\"xNode\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"BLANK_NODE_LABEL\": [\"blankNode\"], \n     \"ANON\": [\"blankNode\"], \n     \"NIL\": [\"NIL\"]}, \n  \"xiri\" : {\n     \"IRI_REF\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \n     \"IRI_REF_START\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \n     \"PNAME_LN\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"], \n     \"PNAME_NS\": [\"or([iriRef,[IRI_REF_START,xiri_Sub]])\"]}, \n  \"xiriOrFunction\" : {\n     \"IRI_REF\": [\"xiri\",\"?argList\"], \n     \"IRI_REF_START\": [\"xiri\",\"?argList\"], \n     \"PNAME_LN\": [\"xiri\",\"?argList\"], \n     \"PNAME_NS\": [\"xiri\",\"?argList\"]}, \n  \"xiri_Sub\" : {\n     \"!\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"+\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"-\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"VAR1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"VAR2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"(\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"LANG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"LANGMATCHES\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DATATYPE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"BOUND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IRI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"URI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"BNODE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"RAND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ABS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"CEIL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"FLOOR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ROUND\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"CONCAT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRLEN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"UCASE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"LCASE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ENCODE_FOR_URI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"CONTAINS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRSTARTS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRENDS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRBEFORE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRAFTER\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"YEAR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MONTH\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DAY\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"HOURS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MINUTES\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SECONDS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"TIMEZONE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"TZ\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"NOW\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"UUID\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRUUID\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MD5\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA256\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA384\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SHA512\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"COALESCE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IF\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRLANG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRDT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SAMETERM\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISIRI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISURI\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISBLANK\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISLITERAL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"ISNUMERIC\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"TRUE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"FALSE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"COUNT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SUM\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MIN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"MAX\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"AVG\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SAMPLE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"GROUP_CONCAT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"SUBSTR\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"REPLACE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"REGEX\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"EXISTS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"NOT\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IRI_REF\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"IRI_REF_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"INTEGER\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DECIMAL\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DOUBLE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"INTEGER_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DECIMAL_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DOUBLE_POSITIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"INTEGER_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"PNAME_LN\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"PNAME_NS\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL1_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL2_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG1_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"], \n     \"STRING_LITERAL_LONG2_START\": [\"expression\",\"switchToParsingXIRI\",\"or([[IRI_REF_SUB,xiri_Sub],IRI_REF_END])\"]}\n},\n\nkeywords:/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|GENERATE|ITERATOR|ITERATE|SOURCE|LOOK UP|ACCEPT|WHEREVER|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ,\n\npunct:/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ,\n\nstartSymbol:\"sparql11\",\nacceptEmpty:true,\n}","\"use strict\";\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n\n  var grammar = require(\"./_tokenizer-table.js\");\n  var ll1_table = grammar.table;\n\n  var IRI_REF = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n  var IRI_REF_START = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*\\\\{';\n  var IRI_REF_SUB = '}[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*\\\\{';\n  var IRI_REF_END = '}[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n  /*\n   * PN_CHARS_BASE =\n   * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\n   */\n\n  var PN_CHARS_BASE = \"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\";\n  var PN_CHARS_U = PN_CHARS_BASE + \"|_\";\n\n  var PN_CHARS = \"(\" + PN_CHARS_U + \"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\";\n  var VARNAME = \"(\" + PN_CHARS_U + \"|[0-9])\" + \"(\" + PN_CHARS_U + \"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\";\n  var VAR1 = \"\\\\?\" + VARNAME;\n  var VAR2 = \"\\\\$\" + VARNAME;\n\n  var START_XEXPR = \"(\\\\$|\\\\?)\\\\{\";\n\n  var PN_PREFIX = \"(\" + PN_CHARS_BASE + \")(((\" + PN_CHARS + \")|\\\\.)*(\" + PN_CHARS + \"))?\";\n\n  var HEX = \"[0-9A-Fa-f]\";\n  var PERCENT = \"(%\" + HEX + HEX + \")\";\n  var PN_LOCAL_ESC = \"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\";\n  var PLX = \"(\" + PERCENT + \"|\" + PN_LOCAL_ESC + \")\";\n  var PN_LOCAL = \"(\" +\n    PN_CHARS_U +\n    \"|:|[0-9]|\" +\n    PLX +\n    \")((\" +\n    PN_CHARS +\n    \"|\\\\.|:|\" +\n    PLX +\n    \")*(\" +\n    PN_CHARS +\n    \"|:|\" +\n    PLX +\n    \"))?\";\n  var BLANK_NODE_LABEL = \"_:(\" + PN_CHARS_U + \"|[0-9])((\" + PN_CHARS + \"|\\\\.)*\" + PN_CHARS + \")?\";\n  var PNAME_NS = \"(\" + PN_PREFIX + \")?:\";\n  var PNAME_LN = PNAME_NS + PN_LOCAL;\n  var LANGTAG = \"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\";\n\n  var EXPONENT = \"[eE][\\\\+-]?[0-9]+\";\n  var INTEGER = \"[0-9]+\";\n  var DECIMAL = \"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\";\n  var DOUBLE = \"(([0-9]+\\\\.[0-9]*\" + EXPONENT + \")|\" + \"(\\\\.[0-9]+\" + EXPONENT + \")|\" + \"([0-9]+\" + EXPONENT + \"))\";\n\n  var INTEGER_POSITIVE = \"\\\\+\" + INTEGER;\n  var DECIMAL_POSITIVE = \"\\\\+\" + DECIMAL;\n  var DOUBLE_POSITIVE = \"\\\\+\" + DOUBLE;\n  var INTEGER_NEGATIVE = \"-\" + INTEGER;\n  var DECIMAL_NEGATIVE = \"-\" + DECIMAL;\n  var DOUBLE_NEGATIVE = \"-\" + DOUBLE;\n\n  var ECHAR = \"\\\\\\\\[tbnrf\\\\\\\\\\\"'\\\\{}]\";\n\n  //IMPORTANT: this unicode rule is not in the official grammar.\n  //Reason: https://github.com/YASGUI/YASQE/issues/49\n  //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\n  //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\n  //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\n  var hex4 = HEX + \"{4}\";\n  var unicode = \"(\\\\\\\\u\" + hex4 + \"|\\\\\\\\U00(10|0\" + HEX + \")\" + hex4 + \")\";\n  var LINE_BREAK = \"\\n\";\n\n  var OPEN_EXPR = \"\\\\{\";\n  var CLOSE_EXPR = \"\\\\}\";\n\n  var STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*'\";\n  var STRING_LITERAL1_START = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*\" + OPEN_EXPR;\n  var STRING_LITERAL1_END = CLOSE_EXPR + \"(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*'\";\n  var STRING_LITERAL1_SUB = CLOSE_EXPR + \"(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D\\\\{])|\" + ECHAR + \"|\" + unicode + \")*\" + OPEN_EXPR;\n\n  var STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*\"';\n  var STRING_LITERAL2_START = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*' + OPEN_EXPR;\n  var STRING_LITERAL2_END = CLOSE_EXPR + '(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*\"';\n  var STRING_LITERAL2_SUB = CLOSE_EXPR + '(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D\\\\{])|' + ECHAR + \"|\" + unicode + ')*' + OPEN_EXPR;\n\n  var STRING_LITERAL_LONG1_QUOTES = \"'''\";\n  var STRING_LITERAL_LONG1_CONTENT = \"(('|'')?([^'\\\\\\\\\\\\{]|\" + ECHAR + \"|\" + unicode + \"))*\";\n\n  var STRING_LITERAL_LONG2_QUOTES = '\"\"\"';\n  var STRING_LITERAL_LONG2_CONTENT = '((\"|\"\")?([^\"\\\\\\\\\\\\{]|' + ECHAR + \"|\" + unicode + \"))*\";\n\n\n  var WS = \"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\";\n  // Careful! Code mirror feeds one line at a time with no \\n\n  // ... but otherwise comment is terminated by \\n\n  var COMMENT = \"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\";\n  var WS_OR_COMMENT_STAR = \"(\" + WS + \"|(\" + COMMENT + \"))*\";\n  var NIL = \"\\\\(\" + WS_OR_COMMENT_STAR + \"\\\\)\";\n  var ANON = \"\\\\[\" + WS_OR_COMMENT_STAR + \"\\\\]\";\n\n  var terminals = { \n    \"default\" : [\n    {\n      name: \"WS\",\n      regex: new RegExp(\"^\" + WS + \"+\"),\n      style: \"ws\"\n    },\n    {\n      name: \"COMMENT\",\n      regex: new RegExp(\"^\" + COMMENT),\n      style: \"comment\"\n    },\n    {\n      name: \"IRI_REF\",\n      regex: new RegExp(\"^\" + IRI_REF),\n      style: \"variable-3\"\n    },\n    {\n      name: \"IRI_REF_START\",\n      regex: new RegExp(\"^\" + IRI_REF_START),\n      style: \"variable-3\"\n    },\n    {\n      name: \"VAR1\",\n      regex: new RegExp(\"^\" + VAR1),\n      style: \"atom\"\n    },\n    {\n      name: \"VAR2\",\n      regex: new RegExp(\"^\" + VAR2),\n      style: \"atom\"\n    },\n    {\n      name: \"START_XEXPR\",\n      regex: new RegExp(\"^\" + START_XEXPR),\n      style: \"atom\"\n    },\n    {\n      name: \"LANGTAG\",\n      regex: new RegExp(\"^\" + LANGTAG),\n      style: \"meta\"\n    },\n    {\n      name: \"DOUBLE\",\n      regex: new RegExp(\"^\" + DOUBLE),\n      style: \"number\"\n    },\n    {\n      name: \"DECIMAL\",\n      regex: new RegExp(\"^\" + DECIMAL),\n      style: \"number\"\n    },\n    {\n      name: \"INTEGER\",\n      regex: new RegExp(\"^\" + INTEGER),\n      style: \"number\"\n    },\n    {\n      name: \"DOUBLE_POSITIVE\",\n      regex: new RegExp(\"^\" + DOUBLE_POSITIVE),\n      style: \"number\"\n    },\n    {\n      name: \"DECIMAL_POSITIVE\",\n      regex: new RegExp(\"^\" + DECIMAL_POSITIVE),\n      style: \"number\"\n    },\n    {\n      name: \"INTEGER_POSITIVE\",\n      regex: new RegExp(\"^\" + INTEGER_POSITIVE),\n      style: \"number\"\n    },\n    {\n      name: \"DOUBLE_NEGATIVE\",\n      regex: new RegExp(\"^\" + DOUBLE_NEGATIVE),\n      style: \"number\"\n    },\n    {\n      name: \"DECIMAL_NEGATIVE\",\n      regex: new RegExp(\"^\" + DECIMAL_NEGATIVE),\n      style: \"number\"\n    },\n    {\n      name: \"INTEGER_NEGATIVE\",\n      regex: new RegExp(\"^\" + INTEGER_NEGATIVE),\n      style: \"number\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_START\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_START_TRUNC\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_QUOTES + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\n      style: \"string\",\n      switchTo: \"trunc_l1\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_START\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_START_TRUNC\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_QUOTES + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\n      style: \"string\",\n      switchTo: \"trunc_l2\"\n    },\n    {\n      name: \"STRING_LITERAL1\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL1_START\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1_START),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL2\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2),\n      style: \"string\"\n    },\n    {\n      name: \"STRING_LITERAL2_START\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2_START),\n      style: \"string\"\n    },\n    // Enclosed comments won't be highlighted\n    {\n      name: \"NIL\",\n      regex: new RegExp(\"^\" + NIL),\n      style: \"punc\"\n    },\n    // Enclosed comments won't be highlighted\n    {\n      name: \"ANON\",\n      regex: new RegExp(\"^\" + ANON),\n      style: \"punc\"\n    },\n    {\n      name: \"PNAME_LN\",\n      regex: new RegExp(\"^\" + PNAME_LN),\n      style: \"string-2\"\n    },\n    {\n      name: \"PNAME_NS\",\n      regex: new RegExp(\"^\" + PNAME_NS),\n      style: \"string-2\"\n    },\n    {\n      name: \"BLANK_NODE_LABEL\",\n      regex: new RegExp(\"^\" + BLANK_NODE_LABEL),\n      style: \"string-2\"\n    }\n  ] ,\n  \"xiri\" : [\n    {\n      name: \"IRI_REF_END\",\n      regex: new RegExp(\"^\" + IRI_REF_END),\n      style: \"variable-3\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"IRI_REF_SUB\",\n      regex: new RegExp(\"^\" + IRI_REF_SUB),\n      style: \"variable-3\",\n      switchTo: \"default\"\n    }\n  ] ,\n  \"xs1\" : [\n    {\n      name: \"STRING_LITERAL1_END\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1_END),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL1_SUB\",\n      regex: new RegExp(\"^\" + STRING_LITERAL1_SUB),\n      style: \"string\",\n      switchTo: \"default\"\n    }\n  ] ,\n  \"xs2\" : [\n    {\n      name: \"STRING_LITERAL2_SUB\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2_SUB),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL2_END\",\n      regex: new RegExp(\"^\" + STRING_LITERAL2_END),\n      style: \"string\",\n      switchTo: \"default\"\n    }\n  ]  ,\n  \"trunc_l1\" : [\n    {\n      name: \"STRING_LITERAL_LONG1_TRUNC_END\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_TRUNC_OPEN\", \n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_TRUNC_TRUNC\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\n      style: \"string\"\n    }\n  ] ,\n  \"trunc_l2\" : [\n    {\n      name: \"STRING_LITERAL_LONG2_TRUNC_END\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_TRUNC_OPEN\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_TRUNC_TRUNC\",\n      regex: new RegExp(\"^\" + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\n      style: \"string\"\n    }\n  ] ,\n  \"xl1\" : [\n    {\n      name: \"STRING_LITERAL_LONG1_END\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + STRING_LITERAL_LONG1_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_SUB\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + \"('|'')?\" + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG1_CLOSE_TRUNC\", // switch to trunc_l1\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG1_CONTENT + \"('|'')?$\"),\n      style: \"string\",\n      switchTo: \"trunc_l2\"      \n    }\n  ] ,\n  \"xl2\" : [\n    {\n      name: \"STRING_LITERAL_LONG2_END\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + STRING_LITERAL_LONG2_QUOTES),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_SUB\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?' + OPEN_EXPR),\n      style: \"string\",\n      switchTo: \"default\"\n    },\n    {\n      name: \"STRING_LITERAL_LONG2_CLOSE_TRUNC\",\n      regex: new RegExp(\"^\" + CLOSE_EXPR + STRING_LITERAL_LONG2_CONTENT + '(\"|\"\")?$'),\n      style: \"string\",\n      switchTo: \"trunc_l2\"\n    }\n  ] } ;\n\n  function getPossibles(symbol) {\n    var possibles = [], possiblesOb = ll1_table[symbol];\n    if (possiblesOb != undefined) {\n      for (var property in possiblesOb) {\n        possibles.push(property.toString());\n      }\n    } else {\n      possibles.push(symbol);\n    }\n    return possibles;\n  }\n\n  function tokenBase(stream, state) {\n    function nextToken(consume) {\n      var consumed = null;\n\n      // Tokens defined by individual regular expressions in the current lexical state\n      var termls = terminals[state.lexicalState];\n      for (var i = 0; i < termls.length; ++i) {\n        consumed = stream.match(termls[i].regex, consume, false);\n        if (consumed) {\n          var result = {\n            cat: termls[i].name,\n            style: termls[i].style,\n            text: consumed[0],\n            start: stream.start,\n            switchTo: termls[i].switchTo\n          };\n          return result;\n        }\n      }\n\n      // Keywords\n      consumed = stream.match(grammar.keywords, consume, false);\n      if (consumed) {\n        return {\n          cat: consumed[0].toUpperCase(),\n          style: \"keyword\",\n          text: consumed[0].toUpperCase(),\n          start: stream.start\n        };\n      }\n\n      // Punctuation\n      consumed = stream.match(grammar.punct, consume, false);\n      if (consumed)\n        return {\n          cat: consumed[0],\n          style: \"punc\",\n          text: consumed[0],\n          start: stream.start\n        };\n\n      // Token is invalid\n      // better consume something anyway, or else we're stuck\n      consumed = stream.match(/^.[A-Za-z0-9]*/, consume, false);\n      return {\n        cat: \"<invalid_token>\",\n        style: \"error\",\n        text: consumed ? consumed[0] : \"$\",\n        start: stream.start\n      };\n    }\n\n    function recordFailurePos(tokenOb) {\n      var col = stream.column();\n      state.errorStartPos = col;\n      if(tokenOb && tokenOb.text) {\n        state.errorEndPos = col + tokenOb.text.length;\n      }\n    }\n\n    function setQueryType(s) {\n      if (state.queryType == null) {\n        if (\n          s == \"GENERATE\" ||\n          s == \"SELECT\" ||\n          s == \"CONSTRUCT\" ||\n          s == \"ASK\" ||\n          s == \"DESCRIBE\" ||\n          s == \"INSERT\" ||\n          s == \"DELETE\" ||\n          s == \"LOAD\" ||\n          s == \"CLEAR\" ||\n          s == \"CREATE\" ||\n          s == \"DROP\" ||\n          s == \"COPY\" ||\n          s == \"MOVE\" ||\n          s == \"ADD\"\n        )\n          state.queryType = s;\n      }\n    }\n\n    // Some fake non-terminals are just there to have side-effect on state\n    // - i.e. allow or disallow variables and bnodes in certain non-nesting\n    // contexts\n    function setSideConditions(topSymbol) {\n      if (topSymbol === \"prefixDecl\") {\n        state.inPrefixDecl = true;\n      } else {\n        state.inPrefixDecl = false;\n      }\n      switch (topSymbol) {\n        case \"disallowVars\":\n          state.allowVars = false;\n          break;\n        case \"allowVars\":\n          state.allowVars = true;\n          break;\n        case \"disallowBnodes\":\n          state.allowBnodes = false;\n          break;\n        case \"allowBnodes\":\n          state.allowBnodes = true;\n          break;\n        case \"storeProperty\":\n          state.storeProperty = true;\n          break;\n      }\n    }\n\n    function checkSideConditions(topSymbol) {\n      return (state.allowVars || topSymbol != \"var\") &&\n        (state.allowBnodes ||\n          (topSymbol != \"blankNode\" &&\n            topSymbol != \"blankNodePropertyList\" &&\n            topSymbol != \"blankNodePropertyListPath\"));\n    }\n\n    function changeLexicalState(topSymbol) {\n      switch (topSymbol) {\n        case \"switchToParsingXIRI\":\n          state.lexicalState = \"xiri\";\n          break;\n        case \"switchToParsingXS1\":\n          state.lexicalState = \"xs1\";\n          break;\n        case \"switchToParsingXS2\":\n          state.lexicalState = \"xs2\";\n          break;\n        case \"switchToParsingXL1\":\n          state.lexicalState = \"xl1\";\n          break;\n        case \"switchToParsingXL2\":\n          state.lexicalState = \"xl2\";\n          break;\n      }\n    }\n\n    function checkinLiteral(tokenOb) {\n      switch (tokenOb.cat) {\n        case \"STRING_LITERAL_LONG1_START_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG1_START\";\n          break;\n        case \"STRING_LITERAL_LONG1_TRUNC_END\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG1_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG1_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1_END\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG1_TRUNC_OPEN\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG1_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1_START\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG1_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG1_SUB\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG1_TRUNC_TRUNC\":\n          state.inLiteral.text += \".\";\n          break;\n        case \"STRING_LITERAL_LONG1_CLOSE_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG1_CLOSE\";\n          break;\n        case \"STRING_LITERAL_LONG2_START_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG2_START\";\n          break;\n        case \"STRING_LITERAL_LONG2_TRUNC_END\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG2_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG2_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2_END\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG2_TRUNC_OPEN\":\n          switch (state.inLiteral.cat) {\n            case \"STRING_LITERAL_LONG2_START\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2_START\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            case \"STRING_LITERAL_LONG2_CLOSE\":\n              tokenOb.cat = \"STRING_LITERAL_LONG2_SUB\";\n              tokenOb.text = state.inLiteral.text + \"\\n\" + tokenOb.text;\n              state.inLiteral = null;\n              break;\n            default:\n              console.error(\" in token \", state.inLiteral);\n          }\n          break;\n        case \"STRING_LITERAL_LONG2_TRUNC_TRUNC\":\n          state.inLiteral.text += \".\";\n          break;\n        case \"STRING_LITERAL_LONG2_CLOSE_TRUNC\":\n          state.inLiteral = JSON.parse(JSON.stringify(tokenOb));\n          state.inLiteral.cat = \"STRING_LITERAL_LONG2_CLOSE\";\n          break;\n      }\n      if(tokenOb.switchTo) {\n        state.lexicalState = tokenOb.switchTo;\n      }\n    }\n\n    function attemptConsume() {\n      var consumed = false;\n\n      if (stream.pos == 0) {\n        state.possibleCurrent = state.possibleNext;\n      }\n\n      var tokenOb = nextToken(false);\n      if (tokenOb.cat == \"<invalid_token>\") {\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n        consumed = true;\n        if (state.OK==true) {\n          state.OK=false;\n          state.lexicalState = \"default\";\n          recordFailurePos(tokenOb);\n        }\n        state.complete=false;\n        return tokenOb.style;\n      }\n\n      if (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\") {\n        state.possibleCurrent = state.possibleNext;\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n        consumed = true;\n        return tokenOb.style;\n      }\n\n      if(tokenOb.cat.includes(\"TRUNC\")) {\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n        consumed = true;\n        checkinLiteral(tokenOb);\n      }  \n\n      if(state.inLiteral) {\n        state.complete = false;\n        state.possibleCurrent = state.possibleNext;\n        // console.log(\"inliteral, return \", state.inLiteral.style);\n        return state.inLiteral.style;\n      }\n\n      // Run the parser until the token is digested or failure\n      var finished = false;\n      var token = tokenOb.cat;\n      var topSymbol;\n\n      // Incremental LL1 parse\n      while (state.stack.length > 0 && token && state.OK && !finished) {\n        // console.log(\"----------------\" + topSymbol);\n        topSymbol = state.stack.pop();\n\n        if (!ll1_table[topSymbol]) {\n          // Top symbol is a terminal\n          if (topSymbol == token) {\n            if (state.inPrefixDecl) {\n              if (topSymbol === \"PNAME_NS\" && tokenOb.text.length > 0) {\n                state.currentPnameNs = tokenOb.text.slice(0, -1);\n              } else if (state.currentPnameNs !== undefined && tokenOb.text.length > 2) {\n                state.prefixes[state.currentPnameNs] = tokenOb.text.slice(1, -1);\n                //reset current pname ns\n                state.currentPnameNs = undefined;\n              }\n            }\n            // Matching terminals\n            // - ensure token is consumed from input stream\n            finished = true;\n\n            setQueryType(topSymbol);\n            // Check whether $ (end of input token) is poss next\n            // for everything on stack\n            var allNillable = true;\n            for (var sp = state.stack.length; sp > 0; --sp) {\n              var item = ll1_table[state.stack[sp - 1]];\n              if (state.stack[sp - 1] != '$' && ( !item || !item[\"$\"]))  {\n                allNillable = false;\n              }\n            }\n            state.complete = allNillable;\n            if (state.storeProperty && token.cat != \"punc\") {\n              state.lastProperty = tokenOb.text;\n              state.storeProperty = false;\n            }\n\n            //check whether a used prefix is actually defined\n            if (!state.inPrefixDecl && (token === \"PNAME_NS\" || token === \"PNAME_LN\")) {\n              var colonIndex = tokenOb.text.indexOf(\":\");\n              if (colonIndex >= 0) {\n                var prefNs = tokenOb.text.slice(0, colonIndex);\n                //avoid warnings for missing bif prefixes (yuck, virtuoso-specific)\n                if (!state.prefixes[prefNs] && [\"bif\", \"xsd\", \"sql\"].indexOf(prefNs) < 0) {\n                  state.OK = false;\n                  state.lexicalState = \"default\";\n                  recordFailurePos(tokenOb);\n                  state.errorMsg = \"Prefix '\" + prefNs + \"' is not defined\";\n                }\n              }\n            }\n          } else {\n            state.OK = false;\n            state.lexicalState = \"default\";\n            state.complete = false;\n            recordFailurePos(tokenOb);\n          }\n        } else {\n          // topSymbol is nonterminal\n          // - see if there is an entry for topSymbol\n          // and nextToken in table\n          var nextSymbols = ll1_table[topSymbol][token];\n          if (nextSymbols != undefined && checkSideConditions(topSymbol)) {\n            // Match - copy RHS of rule to stack\n            for (var i = nextSymbols.length - 1; i >= 0; --i) {\n              state.stack.push(nextSymbols[i]);\n            }\n            // Peform any non-grammatical side-effects\n            setSideConditions(topSymbol);\n          } else if(topSymbol.startsWith(\"switchTo\")) {\n            // Attempt with a chage of the lexical state\n            changeLexicalState(topSymbol);\n            return attemptConsume();\n          } else {\n            // No match in table - fail\n            state.OK = false;\n            state.complete = false;\n            state.lexicalState = \"default\";\n            recordFailurePos(tokenOb);\n            state.stack.push(topSymbol); // Shove topSymbol back on stack\n          }\n        }\n      }\n      if (!finished && state.OK) {\n        state.OK = false;\n        state.lexicalState = \"default\";\n        state.complete = false;\n        recordFailurePos(tokenOb);\n      }\n\n      if(!consumed) {\n        var t = nextToken(true);\n        // console.log(\"consumed \", t.cat, t.text);\n      }\n      if(tokenOb.switchTo) {\n        state.lexicalState = tokenOb.switchTo;\n      }\n\n      if (state.possibleCurrent.indexOf(\"a\") >= 0) {\n        state.lastPredicateOffset = tokenOb.start;\n      }\n      state.possibleCurrent = state.possibleNext;\n      state.possibleNext = getPossibles(state.stack[state.stack.length - 1]);\n\n      return tokenOb.style;\n    }\n\n    // CodeMirror works with one line at a time,\n    // but newline should behave like whitespace\n    // - i.e. a definite break between tokens (for autocompleter)\n    return attemptConsume();\n  }\n\n  var indentTop = {\n    \"*[,, object]\": 3,\n    \"*[(,),object]\": 3,\n    \"*[(,),objectPath]\": 3,\n    \"*[/,pathEltOrInverse]\": 2,\n    object: 2,\n    objectPath: 2,\n    objectList: 2,\n    objectListPath: 2,\n    storeProperty: 2,\n    pathMod: 2,\n    \"?pathMod\": 2,\n    propertyListNotEmpty: 1,\n    propertyList: 1,\n    propertyListPath: 1,\n    propertyListPathNotEmpty: 1,\n    \"?[verb,objectList]\": 1\n    //    \"?[or([verbPath, verbSimple]),objectList]\": 1,\n  };\n\n  var indentTable = {\n    \"}\": 1,\n    \"]\": 1,\n    \")\": 1,\n    \"{\": -1,\n    \"(\": -1,\n    \"[\": -1\n    //    \"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\n  };\n\n  function indent(state, textAfter) {\n    //just avoid we don't indent multi-line  literals\n    if (state.inLiteral) return 0;\n    if (state.stack.length && state.stack[state.stack.length - 1] == \"?[or([verbPath,verbSimple]),objectList]\") {\n      //we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\n      return state.lastPredicateOffset;\n    } else {\n      var n = 0; // indent level\n      var i = state.stack.length - 1;\n      if (/^[\\}\\]\\)]/.test(textAfter)) {\n        // Skip stack items until after matching bracket\n        var closeBracket = textAfter.substr(0, 1);\n        for (; i >= 0; --i) {\n          if (state.stack[i] == closeBracket) {\n            --i;\n            break;\n          }\n        }\n      } else {\n        // Consider nullable non-terminals if at top of stack\n        var dn = indentTop[state.stack[i]];\n        if (dn) {\n          n += dn;\n          --i;\n        }\n      }\n      for (; i >= 0; --i) {\n        var dn = indentTable[state.stack[i]];\n        if (dn) {\n          n += dn;\n        }\n      }\n      return n * config.indentUnit;\n    }\n  }\n\n  return {\n    token: tokenBase,\n    startState: function(base) {\n      return {\n        tokenize: tokenBase,\n        OK: true,\n        complete: grammar.acceptEmpty,\n        errorStartPos: null,\n        errorEndPos: null,\n        queryType: null,\n        possibleCurrent: getPossibles(grammar.startSymbol),\n        possibleNext: getPossibles(grammar.startSymbol),\n        allowVars: true,\n        allowBnodes: true,\n        storeProperty: false,\n        lastProperty: \"\",\n        lexicalState: \"default\",\n        inLiteral: null,\n        stack: [grammar.startSymbol],\n        lastPredicateOffset: config.indentUnit,\n        prefixes: {}\n      };\n    },\n    indent: indent,\n    electricChars: \"])\"\n  };\n});\nCodeMirror.defineMIME(\"application/vnd.sparql-generate\", \"sparql11\");","/*\n* TRIE implementation in Javascript\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* Date: Nov 7, 2010\n*/\n\n/*\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet.\n* It has been used to store large dictionaries of English (say) words in spell-checking programs\n* and in natural-language \"understanding\" programs.\n* @see http://en.wikipedia.org/wiki/Trie\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\n/*\n\n* @class Trie\n* @constructor\n*/\n\nvar Trie = module.exports = function() {\n  this.words = 0;\n  this.prefixes = 0;\n  this.children = [];\n};\n\nTrie.prototype = {\n  /*\n    * Insert a word into the dictionary.\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\n    *\n    * @method insert\n    * @param {String} str Word to insert in the dictionary\n    * @param {Integer} pos Current index of the string to be inserted\n    * @return {Void}\n    */\n  insert: function(str, pos) {\n    if (str.length == 0) {\n      //blank string cannot be inserted\n      return;\n    }\n\n    var T = this, k, child;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (pos === str.length) {\n      T.words++;\n      return;\n    }\n    T.prefixes++;\n    k = str[pos];\n    if (T.children[k] === undefined) {\n      //if node for this char doesn't exist, create one\n      T.children[k] = new Trie();\n    }\n    child = T.children[k];\n    child.insert(str, pos + 1);\n  },\n\n  /*\n    * Remove a word from the dictionary.\n    *\n    * @method remove\n    * @param {String} str Word to be removed\n    * @param {Integer} pos Current index of the string to be removed\n    * @return {Void}\n    */\n  remove: function(str, pos) {\n    if (str.length == 0) {\n      return;\n    }\n\n    var T = this, k, child;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (T === undefined) {\n      return;\n    }\n    if (pos === str.length) {\n      T.words--;\n      return;\n    }\n    T.prefixes--;\n    k = str[pos];\n    child = T.children[k];\n    child.remove(str, pos + 1);\n  },\n\n  /*\n    * Update an existing word in the dictionary.\n    * This method removes the old word from the dictionary and inserts the new word.\n    *\n    * @method update\n    * @param {String} strOld The old word to be replaced\n    * @param {String} strNew The new word to be inserted\n    * @return {Void}\n    */\n  update: function(strOld, strNew) {\n    if (strOld.length == 0 || strNew.length == 0) {\n      return;\n    }\n    this.remove(strOld);\n    this.insert(strNew);\n  },\n\n  /*\n    * Count the number of times a given word has been inserted into the dictionary\n    *\n    * @method countWord\n    * @param {String} str Word to get count of\n    * @param {Integer} pos Current index of the given word\n    * @return {Integer} The number of times a given word exists in the dictionary\n    */\n  countWord: function(str, pos) {\n    if (str.length == 0) {\n      return 0;\n    }\n\n    var T = this, k, child, ret = 0;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (pos === str.length) {\n      return T.words;\n    }\n    k = str[pos];\n    child = T.children[k];\n    if (child !== undefined) {\n      //node exists\n      ret = child.countWord(str, pos + 1);\n    }\n    return ret;\n  },\n\n  /*\n    * Count the number of times a given prefix exists in the dictionary\n    *\n    * @method countPrefix\n    * @param {String} str Prefix to get count of\n    * @param {Integer} pos Current index of the given prefix\n    * @return {Integer} The number of times a given prefix exists in the dictionary\n    */\n  countPrefix: function(str, pos) {\n    if (str.length == 0) {\n      return 0;\n    }\n\n    var T = this, k, child, ret = 0;\n\n    if (pos === undefined) {\n      pos = 0;\n    }\n    if (pos === str.length) {\n      return T.prefixes;\n    }\n    var k = str[pos];\n    child = T.children[k];\n    if (child !== undefined) {\n      //node exists\n      ret = child.countPrefix(str, pos + 1);\n    }\n    return ret;\n  },\n\n  /*\n    * Find a word in the dictionary\n    *\n    * @method find\n    * @param {String} str The word to find in the dictionary\n    * @return {Boolean} True if the word exists in the dictionary, else false\n    */\n  find: function(str) {\n    if (str.length == 0) {\n      return false;\n    }\n\n    if (this.countWord(str) > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  /*\n    * Get all words in the dictionary\n    *\n    * @method getAllWords\n    * @param {String} str Prefix of current word\n    * @return {Array} Array of words in the dictionary\n    */\n  getAllWords: function(str) {\n    var T = this, k, child, ret = [];\n    if (str === undefined) {\n      str = \"\";\n    }\n    if (T === undefined) {\n      return [];\n    }\n    if (T.words > 0) {\n      ret.push(str);\n    }\n    for (k in T.children) {\n      if (T.children.hasOwnProperty(k)) {\n        child = T.children[k];\n        ret = ret.concat(child.getAllWords(str + k));\n      }\n    }\n    return ret;\n  },\n\n  /*\n    * Autocomplete a given prefix\n    *\n    * @method autoComplete\n    * @param {String} str Prefix to be completed based on dictionary entries\n    * @param {Integer} pos Current index of the prefix\n    * @return {Array} Array of possible suggestions\n    */\n  autoComplete: function(str, pos) {\n    var T = this, k, child;\n    if (str.length == 0) {\n      if (pos === undefined) {\n        return T.getAllWords(str);\n      } else {\n        return [];\n      }\n    }\n    if (pos === undefined) {\n      pos = 0;\n    }\n    k = str[pos];\n    child = T.children[k];\n    if (child === undefined) {\n      //node doesn't exist\n      return [];\n    }\n    if (pos === str.length - 1) {\n      return child.getAllWords(str);\n    }\n    return child.autoComplete(str, pos + 1);\n  }\n};\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n","var engine = require('../src/store-engine')\n\nvar storages = require('../storages/all')\nvar plugins = [require('../plugins/json2')]\n\nmodule.exports = engine.createStore(storages, plugins)\n","module.exports = json2Plugin\n\nfunction json2Plugin() {\n\trequire('./lib/json2')\n\treturn {}\n}\n","/* eslint-disable */\n\n//  json2.js\n//  2016-10-28\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n//  See http://www.JSON.org/js.html\n//  This code should be minified before deployment.\n//  See http://javascript.crockford.com/jsmin.html\n\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n\n//          For example, this would serialize Dates as ISO strings.\n\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n\n//          JSON.stringify(undefined) returns undefined.\n\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n\n//          Example:\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n\n//          Example:\n\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n//                          +a[5], +a[6]));\n//                  }\n//              }\n//              return value;\n//          });\n\n//          myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n//              var d;\n//              if (typeof value === \"string\" &&\n//                      value.slice(0, 5) === \"Date(\" &&\n//                      value.slice(-1) === \")\") {\n//                  d = new Date(value.slice(5, -1));\n//                  if (d) {\n//                      return d;\n//                  }\n//              }\n//              return value;\n//          });\n\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\n    eval, for, this\n*/\n\n/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== \"object\") {\n    JSON = {};\n}\n\n(function () {\n    \"use strict\";\n\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10\n            ? \"0\" + n\n            : n;\n    }\n\n    function this_value() {\n        return this.valueOf();\n    }\n\n    if (typeof Date.prototype.toJSON !== \"function\") {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear() + \"-\" +\n                        f(this.getUTCMonth() + 1) + \"-\" +\n                        f(this.getUTCDate()) + \"T\" +\n                        f(this.getUTCHours()) + \":\" +\n                        f(this.getUTCMinutes()) + \":\" +\n                        f(this.getUTCSeconds()) + \"Z\"\n                : null;\n        };\n\n        Boolean.prototype.toJSON = this_value;\n        Number.prototype.toJSON = this_value;\n        String.prototype.toJSON = this_value;\n    }\n\n    var gap;\n    var indent;\n    var meta;\n    var rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        rx_escapable.lastIndex = 0;\n        return rx_escapable.test(string)\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n                var c = meta[a];\n                return typeof c === \"string\"\n                    ? c\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + \"\\\"\"\n            : \"\\\"\" + string + \"\\\"\";\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i;          // The loop counter.\n        var k;          // The member key.\n        var v;          // The member value.\n        var length;\n        var mind = gap;\n        var partial;\n        var value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === \"object\" &&\n                typeof value.toJSON === \"function\") {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === \"function\") {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case \"string\":\n            return quote(value);\n\n        case \"number\":\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value)\n                ? String(value)\n                : \"null\";\n\n        case \"boolean\":\n        case \"null\":\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce \"null\". The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is \"object\", we might be dealing with an object or an array or\n// null.\n\n        case \"object\":\n\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\n// so watch out for that case.\n\n            if (!value) {\n                return \"null\";\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || \"null\";\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? \"[]\"\n                    : gap\n                        ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\"\n                        : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === \"string\") {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? \"{}\"\n                : gap\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\n                    : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== \"function\") {\n        meta = {    // table of character substitutions\n            \"\\b\": \"\\\\b\",\n            \"\\t\": \"\\\\t\",\n            \"\\n\": \"\\\\n\",\n            \"\\f\": \"\\\\f\",\n            \"\\r\": \"\\\\r\",\n            \"\\\"\": \"\\\\\\\"\",\n            \"\\\\\": \"\\\\\\\\\"\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = \"\";\n            indent = \"\";\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === \"number\") {\n                for (i = 0; i < space; i += 1) {\n                    indent += \" \";\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \"string\") {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \"function\" &&\n                    (typeof replacer !== \"object\" ||\n                    typeof replacer.length !== \"number\")) {\n                throw new Error(\"JSON.stringify\");\n            }\n\n// Make a fake root object containing our value under the key of \"\".\n// Return the result of stringifying the value.\n\n            return str(\"\", {\"\": value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== \"function\") {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k;\n                var v;\n                var value = holder[key];\n                if (value && typeof value === \"object\") {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            rx_dangerous.lastIndex = 0;\n            if (rx_dangerous.test(text)) {\n                text = text.replace(rx_dangerous, function (a) {\n                    return \"\\\\u\" +\n                            (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n// because they can cause invocation, and \"=\" because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n            if (\n                rx_one.test(\n                    text\n                        .replace(rx_two, \"@\")\n                        .replace(rx_three, \"]\")\n                        .replace(rx_four, \"\")\n                )\n            ) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval(\"(\" + text + \")\");\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return (typeof reviver === \"function\")\n                    ? walk({\"\": j}, \"\")\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\"JSON.parse\");\n        };\n    }\n}());","var util = require('./util')\nvar slice = util.slice\nvar pluck = util.pluck\nvar each = util.each\nvar bind = util.bind\nvar create = util.create\nvar isList = util.isList\nvar isFunction = util.isFunction\nvar isObject = util.isObject\n\nmodule.exports = {\n\tcreateStore: createStore\n}\n\nvar storeAPI = {\n\tversion: '2.0.12',\n\tenabled: false,\n\t\n\t// get returns the value of the given key. If that value\n\t// is undefined, it returns optionalDefaultValue instead.\n\tget: function(key, optionalDefaultValue) {\n\t\tvar data = this.storage.read(this._namespacePrefix + key)\n\t\treturn this._deserialize(data, optionalDefaultValue)\n\t},\n\n\t// set will store the given value at key and returns value.\n\t// Calling set with value === undefined is equivalent to calling remove.\n\tset: function(key, value) {\n\t\tif (value === undefined) {\n\t\t\treturn this.remove(key)\n\t\t}\n\t\tthis.storage.write(this._namespacePrefix + key, this._serialize(value))\n\t\treturn value\n\t},\n\n\t// remove deletes the key and value stored at the given key.\n\tremove: function(key) {\n\t\tthis.storage.remove(this._namespacePrefix + key)\n\t},\n\n\t// each will call the given callback once for each key-value pair\n\t// in this store.\n\teach: function(callback) {\n\t\tvar self = this\n\t\tthis.storage.each(function(val, namespacedKey) {\n\t\t\tcallback.call(self, self._deserialize(val), (namespacedKey || '').replace(self._namespaceRegexp, ''))\n\t\t})\n\t},\n\n\t// clearAll will remove all the stored key-value pairs in this store.\n\tclearAll: function() {\n\t\tthis.storage.clearAll()\n\t},\n\n\t// additional functionality that can't live in plugins\n\t// ---------------------------------------------------\n\n\t// hasNamespace returns true if this store instance has the given namespace.\n\thasNamespace: function(namespace) {\n\t\treturn (this._namespacePrefix == '__storejs_'+namespace+'_')\n\t},\n\n\t// createStore creates a store.js instance with the first\n\t// functioning storage in the list of storage candidates,\n\t// and applies the the given mixins to the instance.\n\tcreateStore: function() {\n\t\treturn createStore.apply(this, arguments)\n\t},\n\t\n\taddPlugin: function(plugin) {\n\t\tthis._addPlugin(plugin)\n\t},\n\t\n\tnamespace: function(namespace) {\n\t\treturn createStore(this.storage, this.plugins, namespace)\n\t}\n}\n\nfunction _warn() {\n\tvar _console = (typeof console == 'undefined' ? null : console)\n\tif (!_console) { return }\n\tvar fn = (_console.warn ? _console.warn : _console.log)\n\tfn.apply(_console, arguments)\n}\n\nfunction createStore(storages, plugins, namespace) {\n\tif (!namespace) {\n\t\tnamespace = ''\n\t}\n\tif (storages && !isList(storages)) {\n\t\tstorages = [storages]\n\t}\n\tif (plugins && !isList(plugins)) {\n\t\tplugins = [plugins]\n\t}\n\n\tvar namespacePrefix = (namespace ? '__storejs_'+namespace+'_' : '')\n\tvar namespaceRegexp = (namespace ? new RegExp('^'+namespacePrefix) : null)\n\tvar legalNamespaces = /^[a-zA-Z0-9_\\-]*$/ // alpha-numeric + underscore and dash\n\tif (!legalNamespaces.test(namespace)) {\n\t\tthrow new Error('store.js namespaces can only have alphanumerics + underscores and dashes')\n\t}\n\t\n\tvar _privateStoreProps = {\n\t\t_namespacePrefix: namespacePrefix,\n\t\t_namespaceRegexp: namespaceRegexp,\n\n\t\t_testStorage: function(storage) {\n\t\t\ttry {\n\t\t\t\tvar testStr = '__storejs__test__'\n\t\t\t\tstorage.write(testStr, testStr)\n\t\t\t\tvar ok = (storage.read(testStr) === testStr)\n\t\t\t\tstorage.remove(testStr)\n\t\t\t\treturn ok\n\t\t\t} catch(e) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t},\n\n\t\t_assignPluginFnProp: function(pluginFnProp, propName) {\n\t\t\tvar oldFn = this[propName]\n\t\t\tthis[propName] = function pluginFn() {\n\t\t\t\tvar args = slice(arguments, 0)\n\t\t\t\tvar self = this\n\n\t\t\t\t// super_fn calls the old function which was overwritten by\n\t\t\t\t// this mixin.\n\t\t\t\tfunction super_fn() {\n\t\t\t\t\tif (!oldFn) { return }\n\t\t\t\t\teach(arguments, function(arg, i) {\n\t\t\t\t\t\targs[i] = arg\n\t\t\t\t\t})\n\t\t\t\t\treturn oldFn.apply(self, args)\n\t\t\t\t}\n\n\t\t\t\t// Give mixing function access to super_fn by prefixing all mixin function\n\t\t\t\t// arguments with super_fn.\n\t\t\t\tvar newFnArgs = [super_fn].concat(args)\n\n\t\t\t\treturn pluginFnProp.apply(self, newFnArgs)\n\t\t\t}\n\t\t},\n\n\t\t_serialize: function(obj) {\n\t\t\treturn JSON.stringify(obj)\n\t\t},\n\n\t\t_deserialize: function(strVal, defaultVal) {\n\t\t\tif (!strVal) { return defaultVal }\n\t\t\t// It is possible that a raw string value has been previously stored\n\t\t\t// in a storage without using store.js, meaning it will be a raw\n\t\t\t// string value instead of a JSON serialized string. By defaulting\n\t\t\t// to the raw string value in case of a JSON parse error, we allow\n\t\t\t// for past stored values to be forwards-compatible with store.js\n\t\t\tvar val = ''\n\t\t\ttry { val = JSON.parse(strVal) }\n\t\t\tcatch(e) { val = strVal }\n\n\t\t\treturn (val !== undefined ? val : defaultVal)\n\t\t},\n\t\t\n\t\t_addStorage: function(storage) {\n\t\t\tif (this.enabled) { return }\n\t\t\tif (this._testStorage(storage)) {\n\t\t\t\tthis.storage = storage\n\t\t\t\tthis.enabled = true\n\t\t\t}\n\t\t},\n\n\t\t_addPlugin: function(plugin) {\n\t\t\tvar self = this\n\n\t\t\t// If the plugin is an array, then add all plugins in the array.\n\t\t\t// This allows for a plugin to depend on other plugins.\n\t\t\tif (isList(plugin)) {\n\t\t\t\teach(plugin, function(plugin) {\n\t\t\t\t\tself._addPlugin(plugin)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Keep track of all plugins we've seen so far, so that we\n\t\t\t// don't add any of them twice.\n\t\t\tvar seenPlugin = pluck(this.plugins, function(seenPlugin) {\n\t\t\t\treturn (plugin === seenPlugin)\n\t\t\t})\n\t\t\tif (seenPlugin) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.plugins.push(plugin)\n\n\t\t\t// Check that the plugin is properly formed\n\t\t\tif (!isFunction(plugin)) {\n\t\t\t\tthrow new Error('Plugins must be function values that return objects')\n\t\t\t}\n\n\t\t\tvar pluginProperties = plugin.call(this)\n\t\t\tif (!isObject(pluginProperties)) {\n\t\t\t\tthrow new Error('Plugins must return an object of function properties')\n\t\t\t}\n\n\t\t\t// Add the plugin function properties to this store instance.\n\t\t\teach(pluginProperties, function(pluginFnProp, propName) {\n\t\t\t\tif (!isFunction(pluginFnProp)) {\n\t\t\t\t\tthrow new Error('Bad plugin property: '+propName+' from plugin '+plugin.name+'. Plugins should only return functions.')\n\t\t\t\t}\n\t\t\t\tself._assignPluginFnProp(pluginFnProp, propName)\n\t\t\t})\n\t\t},\n\t\t\n\t\t// Put deprecated properties in the private API, so as to not expose it to accidential\n\t\t// discovery through inspection of the store object.\n\t\t\n\t\t// Deprecated: addStorage\n\t\taddStorage: function(storage) {\n\t\t\t_warn('store.addStorage(storage) is deprecated. Use createStore([storages])')\n\t\t\tthis._addStorage(storage)\n\t\t}\n\t}\n\n\tvar store = create(_privateStoreProps, storeAPI, {\n\t\tplugins: []\n\t})\n\tstore.raw = {}\n\teach(store, function(prop, propName) {\n\t\tif (isFunction(prop)) {\n\t\t\tstore.raw[propName] = bind(store, prop)\t\t\t\n\t\t}\n\t})\n\teach(storages, function(storage) {\n\t\tstore._addStorage(storage)\n\t})\n\teach(plugins, function(plugin) {\n\t\tstore._addPlugin(plugin)\n\t})\n\treturn store\n}\n","var assign = make_assign()\nvar create = make_create()\nvar trim = make_trim()\nvar Global = (typeof window !== 'undefined' ? window : global)\n\nmodule.exports = {\n\tassign: assign,\n\tcreate: create,\n\ttrim: trim,\n\tbind: bind,\n\tslice: slice,\n\teach: each,\n\tmap: map,\n\tpluck: pluck,\n\tisList: isList,\n\tisFunction: isFunction,\n\tisObject: isObject,\n\tGlobal: Global\n}\n\nfunction make_assign() {\n\tif (Object.assign) {\n\t\treturn Object.assign\n\t} else {\n\t\treturn function shimAssign(obj, props1, props2, etc) {\n\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\teach(Object(arguments[i]), function(val, key) {\n\t\t\t\t\tobj[key] = val\n\t\t\t\t})\n\t\t\t}\t\t\t\n\t\t\treturn obj\n\t\t}\n\t}\n}\n\nfunction make_create() {\n\tif (Object.create) {\n\t\treturn function create(obj, assignProps1, assignProps2, etc) {\n\t\t\tvar assignArgsList = slice(arguments, 1)\n\t\t\treturn assign.apply(this, [Object.create(obj)].concat(assignArgsList))\n\t\t}\n\t} else {\n\t\tfunction F() {} // eslint-disable-line no-inner-declarations\n\t\treturn function create(obj, assignProps1, assignProps2, etc) {\n\t\t\tvar assignArgsList = slice(arguments, 1)\n\t\t\tF.prototype = obj\n\t\t\treturn assign.apply(this, [new F()].concat(assignArgsList))\n\t\t}\n\t}\n}\n\nfunction make_trim() {\n\tif (String.prototype.trim) {\n\t\treturn function trim(str) {\n\t\t\treturn String.prototype.trim.call(str)\n\t\t}\n\t} else {\n\t\treturn function trim(str) {\n\t\t\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')\n\t\t}\n\t}\n}\n\nfunction bind(obj, fn) {\n\treturn function() {\n\t\treturn fn.apply(obj, Array.prototype.slice.call(arguments, 0))\n\t}\n}\n\nfunction slice(arr, index) {\n\treturn Array.prototype.slice.call(arr, index || 0)\n}\n\nfunction each(obj, fn) {\n\tpluck(obj, function(val, key) {\n\t\tfn(val, key)\n\t\treturn false\n\t})\n}\n\nfunction map(obj, fn) {\n\tvar res = (isList(obj) ? [] : {})\n\tpluck(obj, function(v, k) {\n\t\tres[k] = fn(v, k)\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunction pluck(obj, fn) {\n\tif (isList(obj)) {\n\t\tfor (var i=0; i<obj.length; i++) {\n\t\t\tif (fn(obj[i], i)) {\n\t\t\t\treturn obj[i]\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (var key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\tif (fn(obj[key], key)) {\n\t\t\t\t\treturn obj[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction isList(val) {\n\treturn (val != null && typeof val != 'function' && typeof val.length == 'number')\n}\n\nfunction isFunction(val) {\n\treturn val && {}.toString.call(val) === '[object Function]'\n}\n\nfunction isObject(val) {\n\treturn val && {}.toString.call(val) === '[object Object]'\n}\n","module.exports = [\n\t// Listed in order of usage preference\n\trequire('./localStorage'),\n\trequire('./oldFF-globalStorage'),\n\trequire('./oldIE-userDataStorage'),\n\trequire('./cookieStorage'),\n\trequire('./sessionStorage'),\n\trequire('./memoryStorage')\n]\n","// cookieStorage is useful Safari private browser mode, where localStorage\n// doesn't work but cookies do. This implementation is adopted from\n// https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage\n\nvar util = require('../src/util')\nvar Global = util.Global\nvar trim = util.trim\n\nmodule.exports = {\n\tname: 'cookieStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar doc = Global.document\n\nfunction read(key) {\n\tif (!key || !_has(key)) { return null }\n\tvar regexpStr = \"(?:^|.*;\\\\s*)\" +\n\t\tescape(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") +\n\t\t\"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"\n\treturn unescape(doc.cookie.replace(new RegExp(regexpStr), \"$1\"))\n}\n\nfunction each(callback) {\n\tvar cookies = doc.cookie.split(/; ?/g)\n\tfor (var i = cookies.length - 1; i >= 0; i--) {\n\t\tif (!trim(cookies[i])) {\n\t\t\tcontinue\n\t\t}\n\t\tvar kvp = cookies[i].split('=')\n\t\tvar key = unescape(kvp[0])\n\t\tvar val = unescape(kvp[1])\n\t\tcallback(val, key)\n\t}\n}\n\nfunction write(key, data) {\n\tif(!key) { return }\n\tdoc.cookie = escape(key) + \"=\" + escape(data) + \"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/\"\n}\n\nfunction remove(key) {\n\tif (!key || !_has(key)) {\n\t\treturn\n\t}\n\tdoc.cookie = escape(key) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\"\n}\n\nfunction clearAll() {\n\teach(function(_, key) {\n\t\tremove(key)\n\t})\n}\n\nfunction _has(key) {\n\treturn (new RegExp(\"(?:^|;\\\\s*)\" + escape(key).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(doc.cookie)\n}\n","var util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'localStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nfunction localStorage() {\n\treturn Global.localStorage\n}\n\nfunction read(key) {\n\treturn localStorage().getItem(key)\n}\n\nfunction write(key, data) {\n\treturn localStorage().setItem(key, data)\n}\n\nfunction each(fn) {\n\tfor (var i = localStorage().length - 1; i >= 0; i--) {\n\t\tvar key = localStorage().key(i)\n\t\tfn(read(key), key)\n\t}\n}\n\nfunction remove(key) {\n\treturn localStorage().removeItem(key)\n}\n\nfunction clearAll() {\n\treturn localStorage().clear()\n}\n","// memoryStorage is a useful last fallback to ensure that the store\n// is functions (meaning store.get(), store.set(), etc will all function).\n// However, stored values will not persist when the browser navigates to\n// a new page or reloads the current page.\n\nmodule.exports = {\n\tname: 'memoryStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar memoryStorage = {}\n\nfunction read(key) {\n\treturn memoryStorage[key]\n}\n\nfunction write(key, data) {\n\tmemoryStorage[key] = data\n}\n\nfunction each(callback) {\n\tfor (var key in memoryStorage) {\n\t\tif (memoryStorage.hasOwnProperty(key)) {\n\t\t\tcallback(memoryStorage[key], key)\n\t\t}\n\t}\n}\n\nfunction remove(key) {\n\tdelete memoryStorage[key]\n}\n\nfunction clearAll(key) {\n\tmemoryStorage = {}\n}\n","// oldFF-globalStorage provides storage for Firefox\n// versions 6 and 7, where no localStorage, etc\n// is available.\n\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'oldFF-globalStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar globalStorage = Global.globalStorage\n\nfunction read(key) {\n\treturn globalStorage[key]\n}\n\nfunction write(key, data) {\n\tglobalStorage[key] = data\n}\n\nfunction each(fn) {\n\tfor (var i = globalStorage.length - 1; i >= 0; i--) {\n\t\tvar key = globalStorage.key(i)\n\t\tfn(globalStorage[key], key)\n\t}\n}\n\nfunction remove(key) {\n\treturn globalStorage.removeItem(key)\n}\n\nfunction clearAll() {\n\teach(function(key, _) {\n\t\tdelete globalStorage[key]\n\t})\n}\n","// oldIE-userDataStorage provides storage for Internet Explorer\n// versions 6 and 7, where no localStorage, sessionStorage, etc\n// is available.\n\nvar util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'oldIE-userDataStorage',\n\twrite: write,\n\tread: read,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar storageName = 'storejs'\nvar doc = Global.document\nvar _withStorageEl = _makeIEStorageElFunction()\nvar disable = (Global.navigator ? Global.navigator.userAgent : '').match(/ (MSIE 8|MSIE 9|MSIE 10)\\./) // MSIE 9.x, MSIE 10.x\n\nfunction write(unfixedKey, data) {\n\tif (disable) { return }\n\tvar fixedKey = fixKey(unfixedKey)\n\t_withStorageEl(function(storageEl) {\n\t\tstorageEl.setAttribute(fixedKey, data)\n\t\tstorageEl.save(storageName)\n\t})\n}\n\nfunction read(unfixedKey) {\n\tif (disable) { return }\n\tvar fixedKey = fixKey(unfixedKey)\n\tvar res = null\n\t_withStorageEl(function(storageEl) {\n\t\tres = storageEl.getAttribute(fixedKey)\n\t})\n\treturn res\n}\n\nfunction each(callback) {\n\t_withStorageEl(function(storageEl) {\n\t\tvar attributes = storageEl.XMLDocument.documentElement.attributes\n\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\tvar attr = attributes[i]\n\t\t\tcallback(storageEl.getAttribute(attr.name), attr.name)\n\t\t}\n\t})\n}\n\nfunction remove(unfixedKey) {\n\tvar fixedKey = fixKey(unfixedKey)\n\t_withStorageEl(function(storageEl) {\n\t\tstorageEl.removeAttribute(fixedKey)\n\t\tstorageEl.save(storageName)\n\t})\n}\n\nfunction clearAll() {\n\t_withStorageEl(function(storageEl) {\n\t\tvar attributes = storageEl.XMLDocument.documentElement.attributes\n\t\tstorageEl.load(storageName)\n\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\tstorageEl.removeAttribute(attributes[i].name)\n\t\t}\n\t\tstorageEl.save(storageName)\n\t})\n}\n\n// Helpers\n//////////\n\n// In IE7, keys cannot start with a digit or contain certain chars.\n// See https://github.com/marcuswestin/store.js/issues/40\n// See https://github.com/marcuswestin/store.js/issues/83\nvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\nfunction fixKey(key) {\n\treturn key.replace(/^\\d/, '___$&').replace(forbiddenCharsRegex, '___')\n}\n\nfunction _makeIEStorageElFunction() {\n\tif (!doc || !doc.documentElement || !doc.documentElement.addBehavior) {\n\t\treturn null\n\t}\n\tvar scriptTag = 'script',\n\t\tstorageOwner,\n\t\tstorageContainer,\n\t\tstorageEl\n\n\t// Since #userData storage applies only to specific paths, we need to\n\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t// as a pretty safe option, since all browsers already make a request to\n\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t// since the iframe access rules appear to allow direct access and\n\t// manipulation of the document element, even for a 404 page.  This\n\t// document can be used instead of the current document (which would\n\t// have been limited to the current path) to perform #userData storage.\n\ttry {\n\t\t/* global ActiveXObject */\n\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\tstorageContainer.open()\n\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\tstorageContainer.close()\n\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\tstorageEl = storageOwner.createElement('div')\n\t} catch(e) {\n\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t// security settings or otherwse), fall back to per-path storage\n\t\tstorageEl = doc.createElement('div')\n\t\tstorageOwner = doc.body\n\t}\n\n\treturn function(storeFunction) {\n\t\tvar args = [].slice.call(arguments, 0)\n\t\targs.unshift(storageEl)\n\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\tstorageOwner.appendChild(storageEl)\n\t\tstorageEl.addBehavior('#default#userData')\n\t\tstorageEl.load(storageName)\n\t\tstoreFunction.apply(this, args)\n\t\tstorageOwner.removeChild(storageEl)\n\t\treturn\n\t}\n}\n","var util = require('../src/util')\nvar Global = util.Global\n\nmodule.exports = {\n\tname: 'sessionStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll\n}\n\nfunction sessionStorage() {\n\treturn Global.sessionStorage\n}\n\nfunction read(key) {\n\treturn sessionStorage().getItem(key)\n}\n\nfunction write(key, data) {\n\treturn sessionStorage().setItem(key, data)\n}\n\nfunction each(fn) {\n\tfor (var i = sessionStorage().length - 1; i >= 0; i--) {\n\t\tvar key = sessionStorage().key(i)\n\t\tfn(read(key), key)\n\t}\n}\n\nfunction remove(key) {\n\treturn sessionStorage().removeItem(key)\n}\n\nfunction clearAll() {\n\treturn sessionStorage().clear()\n}\n","module.exports={\n  \"_args\": [\n    [\n      {\n        \"raw\": \"yasgui-utils@^1.6.7\",\n        \"scope\": null,\n        \"escapedName\": \"yasgui-utils\",\n        \"name\": \"yasgui-utils\",\n        \"rawSpec\": \"^1.6.7\",\n        \"spec\": \">=1.6.7 <2.0.0\",\n        \"type\": \"range\"\n      },\n      \"/root/yasqe/sparql-generate-yasqe\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.6.7 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.7\",\n  \"_inCache\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_nodeVersion\": \"7.10.0\",\n  \"_npmOperationalInternal\": {\n    \"host\": \"s3://npm-registry-packages\",\n    \"tmp\": \"tmp/yasgui-utils-1.6.7.tgz_1495459781202_0.06725964159704745\"\n  },\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"_npmVersion\": \"4.2.0\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"yasgui-utils@^1.6.7\",\n    \"scope\": null,\n    \"escapedName\": \"yasgui-utils\",\n    \"name\": \"yasgui-utils\",\n    \"rawSpec\": \"^1.6.7\",\n    \"spec\": \">=1.6.7 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.7.tgz\",\n  \"_shasum\": \"2bcfc5a315688de3ae6057883d9ae342b205f267\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.6.7\",\n  \"_where\": \"/root/yasqe/sparql-generate-yasqe\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^2.0.4\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"2bcfc5a315688de3ae6057883d9ae342b205f267\",\n    \"tarball\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.7.tgz\"\n  },\n  \"gitHead\": \"6031b1cb732d390b29cd5376dceb9a9d665bbd11\",\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"scripts\": {},\n  \"version\": \"1.6.7\"\n}\n","window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n","var store = require(\"store\");\nvar times = {\n  day: function() {\n    return 1000 * 3600 * 24; //millis to day\n  },\n  month: function() {\n    times.day() * 30;\n  },\n  year: function() {\n    times.month() * 12;\n  }\n};\nfunction isQuotaExceeded(e) {\n  var quotaExceeded = false;\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n        case 1014:\n          // Firefox\n          if (e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") {\n            quotaExceeded = true;\n          }\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n  return quotaExceeded;\n}\nvar root = (module.exports = {\n  set: function(key, val, exp, onQuotaExceeded) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key && val !== undefined) {\n      if (typeof exp == \"string\") {\n        exp = times[exp]();\n      }\n      //try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n      if (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n      try {\n        store.set(key, {\n          val: val,\n          exp: exp,\n          time: new Date().getTime()\n        });\n      } catch (e) {\n        e.quotaExceeded = isQuotaExceeded(e);\n        if (e.quotaExceeded && onQuotaExceeded) {\n          onQuotaExceeded(e);\n        } else {\n          throw e;\n        }\n      }\n    }\n  },\n  remove: function(key) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key) store.remove(key);\n  },\n  removeAll: function(filter) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n    if (!filter) {\n      store.clearAll();\n    } else if (typeof filter === \"function\") {\n      store.each(function(value, key) {\n        if (filter(key, value)) root.remove(key);\n      });\n    }\n  },\n  get: function(key) {\n    if (!store.enabled) return null; //this is probably in private mode. Don't run, as we might get Js errors\n    if (key) {\n      var info = store.get(key);\n      if (!info) {\n        return null;\n      }\n      if (info.exp && new Date().getTime() - info.time > info.exp) {\n        return null;\n      }\n      return info.val;\n    } else {\n      return null;\n    }\n  }\n});\n","module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};","module.exports={\n  \"name\": \"yasgui-yasqe\",\n  \"description\": \"Yet Another SPARQL Query Editor\",\n  \"version\": \"2.11.14\",\n  \"main\": \"src/main.js\",\n  \"license\": \"MIT\",\n  \"author\": \"Laurens Rietveld\",\n  \"homepage\": \"http://yasqe.yasgui.org\",\n  \"scripts\": {\n    \"dev\": \"gulp serve\",\n    \"build\": \"gulp\",\n    \"patch\": \"gulp patch\",\n    \"minor\": \"gulp minor\",\n    \"major\": \"gulp major\"\n  },\n  \"devDependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"browserify\": \"^13.1.0\",\n    \"browserify-shim\": \"^3.8.12\",\n    \"browserify-transform-tools\": \"^1.6.0\",\n    \"exorcist\": \"^0.4.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-autoprefixer\": \"^3.1.0\",\n    \"gulp-bump\": \"^2.2.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-connect\": \"^4.2.0\",\n    \"gulp-cssimport\": \"^3.1.0\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-filter\": \"^4.0.0\",\n    \"gulp-git\": \"^2.4.1\",\n    \"gulp-jsvalidate\": \"^2.1.0\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-streamify\": \"1.0.2\",\n    \"gulp-tag-version\": \"^1.3.0\",\n    \"gulp-uglify\": \"^1.5.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"require-dir\": \"^0.3.2\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\n  },\n  \"dependencies\": {\n    \"codemirror\": \"5.17.0\",\n    \"jquery\": \"^2.2.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"prettier\": \"^1.4.4\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"yasgui-utils\": \"^1.6.7\"\n  },\n  \"optionalShim\": {\n    \"codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    },\n    \"jquery\": {\n      \"require\": \"jquery\",\n      \"global\": \"jQuery\"\n    },\n    \"../../lib/codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    }\n  }\n}\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n  utils = require(\"../utils.js\"),\n  yutils = require(\"yasgui-utils\"),\n  Trie = require(\"../../lib/trie.js\"),\n  YASQE = require(\"../main.js\");\n\nmodule.exports = function(YASQE, yasqe) {\n  var completionNotifications = {};\n  var completers = {};\n  var tries = {};\n\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\n    autoComplete(true);\n  });\n  yasqe.on(\"change\", function() {\n    var needPossibleAdjustment = [];\n    for (var notificationName in completionNotifications) {\n      if (completionNotifications[notificationName].is(\":visible\")) {\n        needPossibleAdjustment.push(completionNotifications[notificationName]);\n      }\n    }\n    if (needPossibleAdjustment.length > 0) {\n      //position completion notifications\n      var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n      var offset = 0;\n      if (scrollBar.is(\":visible\")) {\n        offset = scrollBar.outerWidth();\n      }\n      needPossibleAdjustment.forEach(function(notification) {\n        notification.css(\"right\", offset);\n      });\n    }\n  });\n\n  /**\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\n\t *\n\t * @method doc.storeBulkCompletions\n\t * @param completions {array}\n\t */\n  var storeBulkCompletions = function(completer, completions) {\n    // store array as trie\n    tries[completer.name] = new Trie();\n    for (var i = 0; i < completions.length; i++) {\n      tries[completer.name].insert(completions[i]);\n    }\n    // store in localstorage as well\n    var storageId = utils.getPersistencyId(yasqe, completer.persistent);\n    if (storageId) yutils.storage.set(storageId, completions, \"month\", yasqe.options.onQuotaExceeded);\n  };\n\n  var initCompleter = function(name, completionInit) {\n    var completer = (completers[name] = new completionInit(yasqe, name));\n    completer.name = name;\n    if (completer.bulk) {\n      var storeArrayAsBulk = function(suggestions) {\n        if (suggestions && suggestions instanceof Array && suggestions.length > 0) {\n          storeBulkCompletions(completer, suggestions);\n        }\n      };\n      if (completer.get instanceof Array) {\n        // we don't care whether the completions are already stored in\n        // localstorage. just use this one\n        storeArrayAsBulk(completer.get);\n      } else {\n        // if completions are defined in localstorage, use those! (calling the\n        // function may come with overhead (e.g. async calls))\n        var completionsFromStorage = null;\n        var persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\n        if (persistencyIdentifier) completionsFromStorage = yutils.storage.get(persistencyIdentifier);\n        if (completionsFromStorage && completionsFromStorage.length > 0) {\n          storeArrayAsBulk(completionsFromStorage);\n        } else {\n          // nothing in storage. check whether we have a function via which we\n          // can get our prefixes\n          if (completer.get instanceof Function) {\n            if (completer.async) {\n              completer.get(null, storeArrayAsBulk);\n            } else {\n              storeArrayAsBulk(completer.get());\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var autoComplete = function(fromAutoShow) {\n    if (yasqe.somethingSelected()) return;\n    var tryHintType = function(completer) {\n      if (\n        fromAutoShow && // from autoShow, i.e. this gets called each time the editor content changes\n        (!completer.autoShow || // autoshow for  this particular type of autocompletion is -not- enabled\n          (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\n      ) {\n        return false;\n      }\n\n      var hintConfig = {\n        closeCharacters: /(?=a)b/,\n        completeSingle: false\n      };\n      if (!completer.bulk && completer.async) {\n        hintConfig.async = true;\n      }\n      var wrappedHintCallback = function(yasqe, callback) {\n        return getCompletionHintsObject(completer, callback);\n      };\n      var result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\n      return true;\n    };\n    for (var completerName in completers) {\n      if ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\n      var completer = completers[completerName];\n      if (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\n\n      if (!completer.isValidCompletionPosition()) {\n        //if needed, fire callbacks for when we are -not- in valid completion position\n        if (completer.callbacks && completer.callbacks.invalidPosition) {\n          completer.callbacks.invalidPosition(yasqe, completer);\n        }\n        //not in a valid position, so continue to next completion candidate type\n        continue;\n      }\n      // run valid position handler, if there is one (if it returns false, stop the autocompletion!)\n      if (completer.callbacks && completer.callbacks.validPosition) {\n        if (completer.callbacks.validPosition(yasqe, completer) === false) continue;\n      }\n      var success = tryHintType(completer);\n      if (success) break;\n    }\n  };\n\n  var getCompletionHintsObject = function(completer, callback) {\n    var getSuggestionsFromToken = function(partialToken) {\n      var stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\n      var suggestions = [];\n      if (tries[completer.name]) {\n        suggestions = tries[completer.name].autoComplete(stringToAutocomplete);\n      } else if (typeof completer.get == \"function\" && completer.async == false) {\n        suggestions = completer.get(stringToAutocomplete);\n      } else if (typeof completer.get == \"object\") {\n        var partialTokenLength = stringToAutocomplete.length;\n        for (var i = 0; i < completer.get.length; i++) {\n          var completion = completer.get[i];\n          if (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\n            suggestions.push(completion);\n          }\n        }\n      }\n      return getSuggestionsAsHintObject(suggestions, completer, partialToken);\n    };\n\n    var token = yasqe.getCompleteToken();\n    if (completer.preProcessToken) {\n      token = completer.preProcessToken(token);\n    }\n\n    if (token) {\n      // use custom completionhint function, to avoid reaching a loop when the\n      // completionhint is the same as the current token\n      // regular behaviour would keep changing the codemirror dom, hence\n      // constantly calling this callback\n      if (!completer.bulk && completer.async) {\n        var wrappedCallback = function(suggestions) {\n          callback(getSuggestionsAsHintObject(suggestions, completer, token));\n        };\n        completer.get(token, wrappedCallback);\n      } else {\n        return getSuggestionsFromToken(token);\n      }\n    }\n  };\n\n  /**\n\t *  get our array of suggestions (strings) in the codemirror hint format\n\t */\n  var getSuggestionsAsHintObject = function(suggestions, completer, token) {\n    var hintList = [];\n    for (var i = 0; i < suggestions.length; i++) {\n      var suggestedString = suggestions[i];\n      if (completer.postProcessToken) {\n        suggestedString = completer.postProcessToken(token, suggestedString);\n      }\n      hintList.push({\n        text: suggestedString,\n        displayText: suggestedString,\n        hint: selectHint\n      });\n    }\n\n    var cur = yasqe.getCursor();\n    var returnObj = {\n      completionToken: token.string,\n      list: hintList,\n      from: {\n        line: cur.line,\n        ch: token.start\n      },\n      to: {\n        line: cur.line,\n        ch: token.end\n      }\n    };\n    //if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\n    if (completer.callbacks) {\n      for (var callbackName in completer.callbacks) {\n        if (completer.callbacks[callbackName]) {\n          YASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\n        }\n      }\n    }\n    return returnObj;\n  };\n\n  return {\n    init: initCompleter,\n    completers: completers,\n    notifications: {\n      getEl: function(completer) {\n        return $(completionNotifications[completer.name]);\n      },\n      show: function(yasqe, completer) {\n        //only draw when the user needs to use a keypress to summon autocompletions\n        if (!completer.autoshow) {\n          if (!completionNotifications[completer.name])\n            completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\n          completionNotifications[completer.name]\n            .show()\n            .text(\"Press CTRL - <spacebar> to autocomplete\")\n            .appendTo($(yasqe.getWrapperElement()));\n        }\n      },\n      hide: function(yasqe, completer) {\n        if (completionNotifications[completer.name]) {\n          completionNotifications[completer.name].hide();\n        }\n      }\n    },\n    autoComplete: autoComplete,\n    getTrie: function(completer) {\n      return typeof completer == \"string\" ? tries[completer] : tries[completer.name];\n    }\n  };\n};\n\n/**\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\n */\nvar selectHint = function(yasqe, data, completion) {\n  if (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\n    yasqe.replaceRange(completion.text, data.from, data.to);\n  }\n};\n\n//\n//module.exports = {\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n//\tshowCompletionNotification: showCompletionNotification,\n//\thideCompletionNotification: hideCompletionNotification,\n//\tautoComplete: autoComplete,\n//\tautocompleteVariables: autocompleteVariables,\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\n//\tfetchFromLov: fetchFromLov,\n////\tstoreBulkCompletions: storeBulkCompletions,\n//\tloadBulkCompletions: loadBulkCompletions,\n//};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n  return {\n    isValidCompletionPosition: function() {\n      return module.exports.isValidCompletionPosition(yasqe);\n    },\n    get: function(token, callback) {\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\n    },\n    preProcessToken: function(token) {\n      return module.exports.preProcessToken(yasqe, token);\n    },\n    postProcessToken: function(token, suggestedString) {\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\n    },\n    async: true,\n    bulk: false,\n    autoShow: false,\n    persistent: name,\n    callbacks: {\n      validPosition: yasqe.autocompleters.notifications.show,\n      invalidPosition: yasqe.autocompleters.notifications.hide\n    }\n  };\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n  var token = yasqe.getCompleteToken();\n  if (token.string.indexOf(\"?\") == 0) return false;\n  var cur = yasqe.getCursor();\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n  if (previousToken.string == \"a\") return true;\n  if (previousToken.string == \"rdf:type\") return true;\n  if (previousToken.string == \"rdfs:domain\") return true;\n  if (previousToken.string == \"rdfs:range\") return true;\n  return false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\n};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\nvar tokenTypes = {\n  \"string-2\": \"prefixed\",\n  atom: \"var\"\n};\n\nmodule.exports = function(yasqe, completerName) {\n  //this autocompleter also fires on-change!\n  yasqe.on(\"change\", function() {\n    module.exports.appendPrefixIfNeeded(yasqe, completerName);\n  });\n\n  return {\n    isValidCompletionPosition: function() {\n      return module.exports.isValidCompletionPosition(yasqe);\n    },\n    get: function(token, callback) {\n      $.get(module.exports.fetchFrom, function(data) {\n        var prefixArray = [];\n        for (var prefix in data) {\n          if (prefix == \"bif\") continue; // skip this one! see #231\n          var completeString = prefix + \": <\" + data[prefix] + \">\";\n          prefixArray.push(completeString); // the array we want to store in localstorage\n        }\n\n        prefixArray.sort();\n        callback(prefixArray);\n      });\n    },\n    preProcessToken: function(token) {\n      return module.exports.preprocessPrefixTokenForCompletion(yasqe, token);\n    },\n    async: true,\n    bulk: true,\n    autoShow: true,\n    persistent: completerName,\n    callbacks: {\n      pick: function() {\n        yasqe.collapsePrefixes(false);\n      }\n    }\n  };\n};\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n  var cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\n\n  // not at end of line\n  if (yasqe.getLine(cur.line).length > cur.ch) return false;\n\n  if (token.type != \"ws\") {\n    // we want to complete token, e.g. when the prefix starts with an a\n    // (treated as a token in itself..)\n    // but we to avoid including the PREFIX tag. So when we have just\n    // typed a space after the prefix tag, don't get the complete token\n    token = yasqe.getCompleteToken();\n  }\n\n  // we shouldnt be at the uri part the prefix declaration\n  // also check whether current token isnt 'a' (that makes codemirror\n  // thing a namespace is a possiblecurrent\n  if (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1) return false;\n\n  // First token of line needs to be PREFIX,\n  // there should be no trailing text (otherwise, text is wrongly inserted\n  // in between)\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n  if (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\n  return true;\n};\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\n  var previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\n  if (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\n    //combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\n    //we want the token to be \"bla: <\", en not \"<\"\n    token = {\n      start: previousToken.start,\n      end: token.end,\n      string: previousToken.string + \" \" + token.string,\n      state: token.state\n    };\n  }\n  return token;\n};\n/**\n * Check whether typed prefix is declared. If not, automatically add declaration\n * using list from prefix.cc\n *\n * @param yasqe\n */\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\n  if (!yasqe.autocompleters.getTrie(completerName)) return; // no prefixed defined. just stop\n  if (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\n  var cur = yasqe.getCursor();\n\n  var token = yasqe.getTokenAt(cur);\n  if (tokenTypes[token.type] == \"prefixed\") {\n    var colonIndex = token.string.indexOf(\":\");\n    if (colonIndex !== -1) {\n      // check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\n      //\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\n      var lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\n      var previousToken = yasqe.getTokenAt({\n        line: cur.line,\n        ch: token.start\n      }); // needs to be null (beginning of line), or whitespace\n      if (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\n        // check whether it isnt defined already (saves us from looping\n        // through the array)\n        var currentPrefix = token.string.substring(0, colonIndex + 1);\n        var queryPrefixes = yasqe.getPrefixesFromQuery();\n        if (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\n          // ok, so it isnt added yet!\n          var completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\n          if (completions.length > 0) {\n            yasqe.addPrefixes(completions[0]);\n          }\n        }\n      }\n    }\n  }\n};\n\nmodule.exports.fetchFrom = (window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\") +\n  \"prefix.cc/popular/all.file.json\";\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n  return {\n    isValidCompletionPosition: function() {\n      return module.exports.isValidCompletionPosition(yasqe);\n    },\n    get: function(token, callback) {\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\n    },\n    preProcessToken: function(token) {\n      return module.exports.preProcessToken(yasqe, token);\n    },\n    postProcessToken: function(token, suggestedString) {\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\n    },\n    async: true,\n    bulk: false,\n    autoShow: false,\n    persistent: name,\n    callbacks: {\n      validPosition: yasqe.autocompleters.notifications.show,\n      invalidPosition: yasqe.autocompleters.notifications.hide\n    }\n  };\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n  var token = yasqe.getCompleteToken();\n  if (token.string.length == 0) return false; //we want -something- to autocomplete\n  if (token.string.indexOf(\"?\") == 0) return false; // we are typing a var\n  if ($.inArray(\"a\", token.state.possibleCurrent) >= 0) return true; // predicate pos\n  var cur = yasqe.getCursor();\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n  if (previousToken.string == \"rdfs:subPropertyOf\") return true;\n\n  // hmm, we would like -better- checks here, e.g. checking whether we are\n  // in a subject, and whether next item is a rdfs:subpropertyof.\n  // difficult though... the grammar we use is unreliable when the query\n  // is invalid (i.e. during typing), and often the predicate is not typed\n  // yet, when we are busy writing the subject...\n  return false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\n};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), yutils = require(\"yasgui-utils\");\n/**\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\n */\n\n/**\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\n * Stores additional info such as the used namespace and prefix in the token object\n */\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\n  var queryPrefixes = yasqe.getPrefixesFromQuery();\n  if (!token.string.indexOf(\"<\") == 0) {\n    token.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\n\n    if (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\n      token.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\n    }\n  }\n\n  token.autocompletionString = token.string.trim();\n  if (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\n    // hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\n    for (var prefix in queryPrefixes) {\n      if (token.tokenPrefix === prefix + \":\") {\n        token.autocompletionString = queryPrefixes[prefix];\n        token.autocompletionString += token.string.substring(prefix.length + 1);\n        break;\n      }\n    }\n  }\n\n  if (token.autocompletionString.indexOf(\"<\") == 0)\n    token.autocompletionString = token.autocompletionString.substring(1);\n  if (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1)\n    token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\n  return token;\n};\n\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\n  if (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\n    // we need to get the suggested string back to prefixed form\n    suggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\n  } else {\n    // it is a regular uri. add '<' and '>' to string\n    suggestedString = \"<\" + suggestedString + \">\";\n  }\n  return suggestedString;\n};\n\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\nvar reqProtocol = window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\";\nvar fetchFromLov = function(yasqe, completer, token, callback) {\n  if (!token || !token.string || token.string.trim().length == 0) {\n    yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Nothing to autocomplete yet!\");\n    return false;\n  }\n  var maxResults = 50;\n\n  var args = {\n    q: token.autocompletionString,\n    page: 1\n  };\n  if (completer.name == \"classes\") {\n    args.type = \"class\";\n  } else {\n    args.type = \"property\";\n  }\n  var results = [];\n  var url = \"\";\n  var updateUrl = function() {\n    url = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\n  };\n  updateUrl();\n  var increasePage = function() {\n    args.page++;\n    updateUrl();\n  };\n  var doRequests = function() {\n    $.get(url, function(data) {\n      for (var i = 0; i < data.results.length; i++) {\n        if ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\n          results.push(data.results[i].uri[0]);\n        } else {\n          results.push(data.results[i].uri);\n        }\n      }\n      if (results.length < data.total_results && results.length < maxResults) {\n        increasePage();\n        doRequests();\n      } else {\n        //if notification bar is there, show feedback, or close\n        if (results.length > 0) {\n          yasqe.autocompleters.notifications.hide(yasqe, completer);\n        } else {\n          yasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\n        }\n        callback(results);\n        // requests done! Don't call this function again\n      }\n    }).fail(function(jqXHR, textStatus, errorThrown) {\n      yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Failed fetching suggestions..\");\n    });\n  };\n  //if notification bar is there, show a loader\n  yasqe.autocompleters.notifications\n    .getEl(completer)\n    .empty()\n    .append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\n    .append($(yutils.svg.getElement(require(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));\n  doRequests();\n};\n\nmodule.exports = {\n  fetchFromLov: fetchFromLov,\n  preprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n  postprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion\n};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe) {\n  return {\n    isValidCompletionPosition: function() {\n      var token = yasqe.getTokenAt(yasqe.getCursor());\n      if (token.type != \"ws\") {\n        token = yasqe.getCompleteToken(token);\n        if (token && token.string.indexOf(\"?\") == 0) {\n          return true;\n        }\n      }\n      return false;\n    },\n    get: function(token) {\n      if (token.trim().length == 0) return []; //nothing to autocomplete\n      var distinctVars = {};\n      //do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\n      $(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\n        var variable = this.innerHTML;\n        if (variable.indexOf(\"?\") == 0) {\n          //ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\n          var nextEl = $(this).next();\n          var nextElClass = nextEl.attr(\"class\");\n          if (nextElClass && nextEl.attr(\"class\").indexOf(\"cm-atom\") >= 0) {\n            variable += nextEl.text();\n          }\n\n          //skip single questionmarks\n          if (variable.length <= 1) return;\n\n          //it should match our token ofcourse\n          if (variable.indexOf(token) !== 0) return;\n\n          //skip exact matches\n          if (variable == token) return;\n\n          //store in map so we have a unique list\n          distinctVars[variable] = true;\n        }\n      });\n      var variables = [];\n      for (var variable in distinctVars) {\n        variables.push(variable);\n      }\n      variables.sort();\n      return variables;\n    },\n    async: false,\n    bulk: false,\n    autoShow: true\n  };\n};\n","var sparql = require(\"./sparql.js\"), $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nvar quote = function(string) {\n  return \"'\" + string + \"'\";\n};\nmodule.exports = {\n  createCurlString: function(yasqe, config) {\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\n    var url = ajaxConfig.url;\n    if (ajaxConfig.url.indexOf(\"http\") !== 0) {\n      //this is either a relative or absolute url, which is not supported by CURL.\n      //Add domain, schema, etc etc\n      var url = window.location.protocol + \"//\" + window.location.host;\n      if (ajaxConfig.url.indexOf(\"/\") === 0) {\n        //its an absolute path\n        url += ajaxConfig.url;\n      } else {\n        //relative, so append current location to url first\n        url += window.location.pathname + ajaxConfig.url;\n      }\n    }\n    var cmds = [\"curl\", url, \"-X\", yasqe.options.sparql.requestMethod];\n    if (yasqe.options.sparql.requestMethod == \"POST\") {\n      cmds.push(\"--data \" + quote($.param(ajaxConfig.data)));\n    }\n    for (var header in ajaxConfig.headers) {\n      cmds.push(\"-H \" + quote(header + \": \" + ajaxConfig.headers[header]));\n    }\n    return cmds.join(\" \");\n  }\n};\n","/**\n * The default options of YASQE (check the CodeMirror documentation for even\n * more options, such as disabling line numbers, or changing keyboard shortcut\n * keys). Either change the default options by setting YASQE.defaults, or by\n * passing your own options as second argument to the YASQE constructor\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), YASQE = require(\"./main.js\");\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\n  mode: \"sparql11\",\n  /**\n\t * Query string\n\t */\n  value: \"PREFIX iter: <http://w3id.org/sparql-generate/iter/>\\nPREFIX fn: <http://w3id.org/sparql-generate/fn/>\\nPREFIX ex: <http://example.org/>\\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\\n\\nSOURCE <venue.json> AS ?source\\nITERATOR iter:JSONPath(?source, '$.*' ) AS ?venue\\nWHERE {} \\nLIMIT 10\\nCONSTRUCT { \\n  <http://loc.example.com/city/{ fn:JSONPath(?venue, '$.location.city' ) }> a ex:City ;\\n     geo:lat  ?{ fn:JSONPath(?venue, '$.venue.latitude' ) } ;\\n     geo:long ?{ fn:JSONPath(?venue, '$.venue.longitude' ) } ;\\n     ex:countryCode 'The country code is { fn:JSONPath(?venue, '$.location.country' ) }'@en .\\n}\\n\",\n  highlightSelectionMatches: {\n    showToken: /\\w/\n  },\n  tabMode: \"indent\",\n  lineNumbers: true,\n  lineWrapping: true,\n  backdrop: false,\n  foldGutter: {\n    rangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\n  },\n  collapsePrefixesOnLoad: false,\n  gutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n  matchBrackets: true,\n  fixedGutter: true,\n  syntaxErrorCheck: true,\n  onQuotaExceeded: function(e) {\n    //fail silently\n    console.warn(\"Could not store in localstorage. Skipping..\", e);\n  },\n  /**\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\n\t *\n\t * @property extraKeys\n\t * @type object\n\t */\n  extraKeys: {\n    //\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\n    //\t\t\t\t\t\tYASQE.autoComplete(yasqe);\n    //\t\t\t\t\t},\n    \"Ctrl-Space\": YASQE.autoComplete,\n\n    \"Cmd-Space\": YASQE.autoComplete,\n    \"Ctrl-D\": YASQE.deleteLine,\n    \"Ctrl-K\": YASQE.deleteLine,\n    \"Shift-Ctrl-K\": YASQE.deleteLine,\n    \"Cmd-D\": YASQE.deleteLine,\n    \"Cmd-K\": YASQE.deleteLine,\n    \"Ctrl-/\": YASQE.commentLines,\n    \"Cmd-/\": YASQE.commentLines,\n    \"Ctrl-Alt-Down\": YASQE.copyLineDown,\n    \"Ctrl-Alt-Up\": YASQE.copyLineUp,\n    \"Cmd-Alt-Down\": YASQE.copyLineDown,\n    \"Cmd-Alt-Up\": YASQE.copyLineUp,\n    \"Shift-Ctrl-F\": YASQE.doAutoFormat,\n    \"Shift-Cmd-F\": YASQE.doAutoFormat,\n    \"Ctrl-]\": YASQE.indentMore,\n    \"Cmd-]\": YASQE.indentMore,\n    \"Ctrl-[\": YASQE.indentLess,\n    \"Cmd-[\": YASQE.indentLess,\n    \"Ctrl-S\": YASQE.storeQuery,\n    \"Cmd-S\": YASQE.storeQuery,\n    \"Ctrl-Enter\": YASQE.executeQuery,\n    \"Cmd-Enter\": YASQE.executeQuery,\n    F11: function(yasqe) {\n      yasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\n    },\n    Esc: function(yasqe) {\n      if (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\n    }\n  },\n  cursorHeight: 0.9,\n\n  /**\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\n\t */\n  createShareLink: YASQE.createShareLink,\n\n  createShortLink: null,\n\n  /**\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\n\t */\n  consumeShareLink: YASQE.consumeShareLink,\n\n  /**\n\t * Change persistency settings for the YASQE query value. Setting the values\n\t * to null, will disable persistancy: nothing is stored between browser\n\t * sessions Setting the values to a string (or a function which returns a\n\t * string), will store the query in localstorage using the specified string.\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\n\t * page\n\t *\n\t * @type function|string\n\t */\n  persistent: function(yasqe) {\n    return \"yasqe_\" + $(yasqe.getWrapperElement()).closest(\"[id]\").attr(\"id\") + \"_queryVal\";\n  },\n\n  /**\n\t * Settings for querying sparql endpoints\n\t */\n  sparql: {\n    queryName: function(yasqe) {\n      return yasqe.getQueryMode();\n    },\n    showQueryButton: false,\n\n    /**f\n\t\t * Endpoint to query\n\t\t *\n\t\t * @property sparql.endpoint\n\t\t * @type String|function\n\t\t */\n    endpoint: \"http://dbpedia.org/sparql\",\n    /**\n\t\t * Request method via which to access SPARQL endpoint\n\t\t *\n\t\t * @property sparql.requestMethod\n\t\t * @type String|function\n\t\t */\n    requestMethod: \"POST\",\n\n    /**\n\t\t * @type String|function\n\t\t */\n    acceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\n    /**\n\t\t * @type String|function\n\t\t */\n    acceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\n    /**\n\t\t * @type String|function\n\t\t */\n    acceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\n\n    /**\n\t\t * Named graphs to query.\n\t\t */\n    namedGraphs: [],\n    /**\n\t\t * Default graphs to query.\n\t\t */\n    defaultGraphs: [],\n\n    /**\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\n\t\t */\n    args: [],\n\n    /**\n\t\t * Additional request headers\n\t\t */\n    headers: {},\n\n    getQueryForAjax: null,\n    /**\n\t\t * Set of ajax callbacks\n\t\t */\n    callbacks: {\n      beforeSend: null,\n      complete: null,\n      error: null,\n      success: null\n    },\n    handlers: {} //keep here for backwards compatability\n  }\n});\n","//this is the entry-point for browserify.\n//the current browserify version does not support require-ing js files which are used as entry-point\n//this way, we can still require our main.js file\nmodule.exports = require(\"./main.js\");\n","\"use strict\";\nmodule.exports = {\n  query: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"><path d=\"M64.622 2.41H14.995c-6.627 0-12 5.374-12 12V64.31c0 6.627 5.373 12 12 12h49.627c6.627 0 12-5.373 12-12V14.41c0-6.627-5.373-12-12-12zM24.125 63.907V15.093L61 39.168 24.125 63.906z\"/></svg>',\n  queryInvalid: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 73.627 73.897\"><path d=\"M61.627 0H12C5.373 0 0 5.373 0 12v49.897c0 6.627 5.373 12 12 12h49.627c6.627 0 12-5.373 12-12V12c0-6.628-5.373-12-12-12zM21.13 61.495V12.682l36.875 24.075L21.13 61.495z\"/><path d=\"M66.13 65.904H49.77c-1.647 0-2.89-.58-3.5-1.636-.608-1.056-.49-2.422.334-3.848l8.18-14.167c.822-1.427 1.947-2.212 3.165-2.212s2.342.786 3.165 2.213l8.18 14.167c.824 1.426.942 2.792.333 3.848-.61 1.055-1.852 1.636-3.5 1.636zm-6.51-4.986c0-.85-.69-1.54-1.54-1.54-.85 0-1.54.69-1.54 1.54 0 .85.69 1.54 1.54 1.54.85 0 1.54-.69 1.54-1.54zm.04-9.266c0-.873-.708-1.58-1.58-1.58-.874 0-1.582.707-1.582 1.58l.374 5.61h.005c.054.62.568 1.108 1.202 1.108.586 0 1.075-.415 1.188-.968.01-.045.01-.093.014-.14h.01l.368-5.61z\" fill=\"#a80\"/></svg>',\n  download: '<svg xmlns=\"http://www.w3.org/2000/svg\" baseProfile=\"tiny\" viewBox=\"0 0 100 100\"><path fill-rule=\"evenodd\" d=\"M88 84v-2c0-2.96-.86-4-4-4H16c-2.96 0-4 .98-4 4v2c0 3.102 1.04 4 4 4h68c3.02 0 4-.96 4-4zM58 12H42c-5 0-6 .94-6 6v22H16l34 34 34-34H64V18c0-5.06-1.06-6-6-6z\"/></svg>',\n  share: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path d=\"M36.764 50c0 .308-.07.598-.088.905l32.247 16.12c2.76-2.34 6.293-3.798 10.195-3.798C87.89 63.227 95 70.337 95 79.11 95 87.89 87.89 95 79.118 95c-8.78 0-15.882-7.11-15.882-15.89 0-.317.07-.6.088-.906l-32.247-16.12c-2.77 2.33-6.293 3.79-10.195 3.79C12.11 65.873 5 58.77 5 50c0-8.78 7.11-15.89 15.882-15.89 3.902 0 7.427 1.467 10.195 3.796l32.247-16.12c-.018-.307-.088-.597-.088-.913C63.236 12.11 70.338 5 79.118 5 87.89 5 95 12.11 95 20.873c0 8.78-7.11 15.89-15.882 15.89-3.91 0-7.436-1.467-10.195-3.805L36.676 49.086c.017.308.088.598.088.914z\"/></svg>',\n  warning: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 66.399998 66.399998\"><g fill=\"red\"><path d=\"M33.2 0C14.9 0 0 14.9 0 33.2c0 18.3 14.9 33.2 33.2 33.2 18.3 0 33.2-14.9 33.2-33.2C66.4 14.9 51.5 0 33.2 0zm0 59.4C18.7 59.4 7 47.6 7 33.2 7 18.7 18.8 7 33.2 7c14.4 0 26.2 11.8 26.2 26.2 0 14.4-11.8 26.2-26.2 26.2z\"/><path d=\"M33.1 45.6c-1.4 0-2.5.5-3.5 1.5-.9 1-1.4 2.2-1.4 3.6 0 1.6.5 2.8 1.5 3.8 1 .9 2.1 1.3 3.4 1.3 1.3 0 2.4-.5 3.4-1.4 1-.9 1.5-2.2 1.5-3.7 0-1.4-.5-2.6-1.4-3.6-.9-1-2.1-1.5-3.5-1.5zM33.3 12.4c-1.5 0-2.8.5-3.7 1.6-.9 1-1.4 2.4-1.4 4.2 0 1.1.1 2.9.2 5.6l.8 13.1c.2 1.8.4 3.2.9 4.1.5 1.2 1.5 1.8 2.9 1.8 1.3 0 2.3-.7 2.9-1.9.5-1 .7-2.3.9-4l1.1-13.4c.1-1.3.2-2.5.2-3.8 0-2.2-.3-3.9-.8-5.1-.5-1-1.6-2.2-4-2.2z\"/></g></svg>',\n  fullscreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"5 -10 100 100\"><path d=\"M5-10v38.89L21.667 12.22 38.334 28.89l5.555-5.556L27.22 6.667 43.89-10H5zM105-10v38.89L88.333 12.22 71.667 28.89l-5.556-5.556L82.778 6.667 66.11-10H105zM5 90V51.11l16.667 16.667L38.334 51.11l5.555 5.557L27.22 73.333 43.89 90H5zM105 90V51.11L88.333 67.778 71.667 51.11l-5.556 5.557 16.667 16.666L66.11 90H105z\" fill=\"#010101\"/></svg>',\n  smallscreen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"5 -10 100 100\"><path d=\"M43.89 28.89V-10L27.22 6.667 10.555-10 5-4.445l16.667 16.667L5 28.89h38.89zM66.11 28.89V-10L82.78 6.667 99.444-10 105-4.445 88.334 12.222 105 28.89H66.11zM43.89 51.11V90L27.22 73.334 10.555 90 5 84.444l16.667-16.666L5 51.11h38.89zM66.11 51.11V90L82.78 73.334 99.444 90 105 84.444 88.334 67.778 105 51.11H66.11z\" fill=\"#010101\"/></svg>'\n};\n","\"use strict\";\n//make sure any console statements\nwindow.console = window.console || {\n  log: function() {}\n};\n\n/**\n * Load libraries\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n  CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n  utils = require(\"./utils.js\"),\n  yutils = require(\"yasgui-utils\"),\n  imgs = require(\"./imgs.js\");\n\nrequire(\"../lib/deparam.js\");\nrequire(\"codemirror/addon/fold/foldcode.js\");\nrequire(\"codemirror/addon/fold/foldgutter.js\");\nrequire(\"codemirror/addon/fold/xml-fold.js\");\nrequire(\"codemirror/addon/fold/brace-fold.js\");\nrequire(\"./prefixFold.js\");\nrequire(\"codemirror/addon/hint/show-hint.js\");\nrequire(\"codemirror/addon/search/searchcursor.js\");\nrequire(\"codemirror/addon/edit/matchbrackets.js\");\nrequire(\"codemirror/addon/runmode/runmode.js\");\nrequire(\"codemirror/addon/display/fullscreen.js\");\nrequire(\"../lib/grammar/tokenizer.js\");\n\n/**\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\n *\n * @constructor\n * @param {DOM-Element} parent element to append editor to.\n * @param {object} settings\n * @class YASQE\n * @return {doc} YASQE document\n */\nvar root = (module.exports = function(parent, config) {\n  var rootEl = $(\"<div>\", {\n    class: \"yasqe\"\n  }).appendTo($(parent));\n  config = extendConfig(config);\n  var yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\n  postProcessCmElement(yasqe);\n  return yasqe;\n});\n\n/**\n * Extend config object, which we will pass on to the CM constructor later on.\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\n * people who add their own onblur events to the config Additionally, need this\n * to include the CM defaults ourselves. CodeMirror has a method for including\n * defaults, but we can't rely on that one: it assumes flat config object, where\n * we have nested objects (e.g. the persistency option)\n *\n * @private\n */\nvar extendConfig = function(config) {\n  var extendedConfig = $.extend(true, {}, root.defaults, config);\n\n  // I know, codemirror deals with  default options as well.\n  //However, it does not do this recursively (i.e. the persistency option)\n\n  return extendedConfig;\n};\n/**\n * Add extra functions to the CM document (i.e. the codemirror instantiated\n * object)\n *\n * @private\n */\nvar extendCmInstance = function(yasqe) {\n  //instantiate autocompleters\n  yasqe.autocompleters = require(\"./autocompleters/autocompleterBase.js\")(root, yasqe);\n  if (yasqe.options.autocompleters) {\n    yasqe.options.autocompleters.forEach(function(name) {\n      if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n    });\n  }\n  yasqe.lastQueryDuration = null;\n  yasqe.getCompleteToken = function(token, cur) {\n    return require(\"./tokenUtils.js\").getCompleteToken(yasqe, token, cur);\n  };\n  yasqe.getPreviousNonWsToken = function(line, token) {\n    return require(\"./tokenUtils.js\").getPreviousNonWsToken(yasqe, line, token);\n  };\n  yasqe.getNextNonWsToken = function(lineNumber, charNumber) {\n    return require(\"./tokenUtils.js\").getNextNonWsToken(yasqe, lineNumber, charNumber);\n  };\n  yasqe.collapsePrefixes = function(collapse) {\n    if (collapse === undefined) collapse = true;\n    yasqe.foldCode(\n      require(\"./prefixFold.js\").findFirstPrefixLine(yasqe),\n      root.fold.prefix,\n      collapse ? \"fold\" : \"unfold\"\n    );\n  };\n  var backdrop = null;\n  var animateSpeed = null;\n  yasqe.setBackdrop = function(show) {\n    if (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === \"0\") {\n      if (animateSpeed === null) {\n        animateSpeed = +yasqe.options.backdrop;\n        if (animateSpeed === 1) {\n          //ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\n          animateSpeed = 400;\n        }\n      }\n\n      if (!backdrop) {\n        backdrop = $(\"<div>\", {\n          class: \"backdrop\"\n        })\n          .click(function() {\n            $(this).hide();\n          })\n          .insertAfter($(yasqe.getWrapperElement()));\n      }\n      if (show) {\n        backdrop.show(animateSpeed);\n      } else {\n        backdrop.hide(animateSpeed);\n      }\n    }\n  };\n  /**\n   * Execute query. Pass a callback function, or a configuration object (see\n   * default settings below for possible values) I.e., you can change the\n   * query configuration by either changing the default settings, changing the\n   * settings of this document, or by passing query settings to this function\n   *\n   * @method doc.query\n   * @param function|object\n   */\n  yasqe.query = function(callbackOrConfig) {\n    root.executeQuery(yasqe, callbackOrConfig);\n  };\n\n  yasqe.getUrlArguments = function(config) {\n    return root.getUrlArguments(yasqe, config);\n  };\n\n  /**\n   * Fetch defined prefixes from query string\n   *\n   * @method doc.getPrefixesFromQuery\n   * @return object\n   */\n  yasqe.getPrefixesFromQuery = function() {\n    return require(\"./prefixUtils.js\").getPrefixesFromQuery(yasqe);\n  };\n\n  yasqe.addPrefixes = function(prefixes) {\n    return require(\"./prefixUtils.js\").addPrefixes(yasqe, prefixes);\n  };\n  yasqe.removePrefixes = function(prefixes) {\n    return require(\"./prefixUtils.js\").removePrefixes(yasqe, prefixes);\n  };\n\n  yasqe.getValueWithoutComments = function() {\n    var cleanedQuery = \"\";\n    root.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\n      if (className != \"comment\") {\n        cleanedQuery += stringVal;\n      }\n    });\n    return cleanedQuery;\n  };\n  /**\n   * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\n   *\n   * @method doc.getQueryType\n   * @return string\n   *\n   */\n  yasqe.getQueryType = function() {\n    return yasqe.queryType;\n  };\n  /**\n   * Fetch the query mode: 'query' or 'update'\n   *\n   * @method doc.getQueryMode\n   * @return string\n   *\n   */\n  yasqe.getQueryMode = function() {\n    var type = yasqe.getQueryType();\n    if (\n      type == \"INSERT\" ||\n      type == \"DELETE\" ||\n      type == \"LOAD\" ||\n      type == \"CLEAR\" ||\n      type == \"CREATE\" ||\n      type == \"DROP\" ||\n      type == \"COPY\" ||\n      type == \"MOVE\" ||\n      type == \"ADD\"\n    ) {\n      return \"update\";\n    } else {\n      return \"query\";\n    }\n  };\n\n  yasqe.setCheckSyntaxErrors = function(isEnabled) {\n    yasqe.options.syntaxErrorCheck = isEnabled;\n    checkSyntax(yasqe);\n  };\n\n  yasqe.enableCompleter = function(name) {\n    addCompleterToSettings(yasqe.options, name);\n    if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n  };\n  yasqe.disableCompleter = function(name) {\n    removeCompleterFromSettings(yasqe.options, name);\n  };\n  return yasqe;\n};\n\nvar addCompleterToSettings = function(settings, name) {\n  if (!settings.autocompleters) settings.autocompleters = [];\n  settings.autocompleters.push(name);\n};\nvar removeCompleterFromSettings = function(settings, name) {\n  if (typeof settings.autocompleters == \"object\") {\n    var index = $.inArray(name, settings.autocompleters);\n    if (index >= 0) {\n      settings.autocompleters.splice(index, 1);\n      removeCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\n    }\n  }\n};\nvar postProcessCmElement = function(yasqe) {\n  /**\n   * Set doc value\n   */\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n  if (storageId) {\n    var valueFromStorage = yutils.storage.get(storageId);\n    if (valueFromStorage) yasqe.setValue(valueFromStorage);\n  }\n\n  root.drawButtons(yasqe);\n\n  /**\n   * Add event handlers\n   */\n  yasqe.on(\"blur\", function(yasqe, eventInfo) {\n    root.storeQuery(yasqe);\n  });\n  yasqe.on(\"change\", function(yasqe, eventInfo) {\n    checkSyntax(yasqe);\n    root.updateQueryButton(yasqe);\n    root.positionButtons(yasqe);\n  });\n  yasqe.on(\"changes\", function() {\n    //e.g. on paste\n    checkSyntax(yasqe);\n    root.updateQueryButton(yasqe);\n    root.positionButtons(yasqe);\n  });\n\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\n    updateButtonsTransparency(yasqe);\n  });\n  yasqe.prevQueryValid = false;\n  checkSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\n  root.positionButtons(yasqe);\n\n  $(yasqe.getWrapperElement())\n    .on(\"mouseenter\", \".cm-atom\", function() {\n      var matchText = $(this).text();\n      $(yasqe.getWrapperElement())\n        .find(\".cm-atom\")\n        .filter(function() {\n          return $(this).text() === matchText;\n        })\n        .addClass(\"matchingVar\");\n    })\n    .on(\"mouseleave\", \".cm-atom\", function() {\n      $(yasqe.getWrapperElement()).find(\".matchingVar\").removeClass(\"matchingVar\");\n    });\n  /**\n   * check url args and modify yasqe settings if needed\n   */\n  if (yasqe.options.consumeShareLink) {\n    yasqe.options.consumeShareLink(yasqe, getUrlParams());\n    //and: add a hash listener!\n    window.addEventListener(\"hashchange\", function() {\n      yasqe.options.consumeShareLink(yasqe, getUrlParams());\n    });\n  }\n  if (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\n};\n\n/**\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\n */\nvar getUrlParams = function() {\n  //first try hash\n  var urlParams = null;\n  if (window.location.hash.length > 1) {\n    //firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\n    //Don't want this. So simply get the hash string ourselves\n    urlParams = $.deparam(location.href.split(\"#\")[1]);\n  }\n  if ((!urlParams || !(\"query\" in urlParams)) && window.location.search.length > 1) {\n    //ok, then just try regular url params\n    urlParams = $.deparam(window.location.search.substring(1));\n  }\n  return urlParams;\n};\n\n/**\n * Update transparency of buttons. Increase transparency when cursor is below buttons\n */\n\nvar updateButtonsTransparency = function(yasqe) {\n  yasqe.cursor = $(\".CodeMirror-cursor\");\n  if (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\n    if (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\n    } else {\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\n    }\n  }\n};\n\nvar clearError = null;\nvar checkSyntax = function(yasqe, deepcheck) {\n  yasqe.queryValid = true;\n\n  yasqe.clearGutter(\"gutterErrorBar\");\n\n  var state = null;\n  for (var l = 0; l < yasqe.lineCount(); ++l) {\n    var precise = false;\n    if (!yasqe.prevQueryValid) {\n      // we don't want cached information in this case, otherwise the\n      // previous error sign might still show up,\n      // even though the syntax error might be gone already\n      precise = true;\n    }\n\n    var token = yasqe.getTokenAt(\n      {\n        line: l,\n        ch: yasqe.getLine(l).length\n      },\n      precise\n    );\n    var state = token.state;\n    yasqe.queryType = state.queryType;\n    if(state.OK && l == yasqe.lineCount() - 1) {\n      // console.log(\"is complete: \" +  state.complete);\n      if(!state.complete) {\n        if(state.inLiteral) {\n          state.errorMsg = \"needs to close literal with \" + (state.inLiteral.cat.includes(\"2\")? '\"\"\"' : \"'''\");\n        }\n        state.OK = false;\n      }\n    }\n    if (state.OK == false) {\n      if (!yasqe.options.syntaxErrorCheck) {\n        //the library we use already marks everything as being an error. Overwrite this class attribute.\n        $(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\n        //we don't want to gutter error, so return\n        return;\n      }\n\n      var warningEl = yutils.svg.getElement(imgs.warning);\n      if (state.errorMsg) {\n        require(\"./tooltip\")(yasqe, warningEl, function() {\n          return $(\"<div/>\").text(token.state.errorMsg).html();\n        });\n      } else if (state.possibleCurrent && state.possibleCurrent.length > 0) {\n        //        warningEl.style.zIndex = \"99999999\";\n        require(\"./tooltip\")(yasqe, warningEl, function() {\n          var expectedEncoded = [];\n          state.possibleCurrent.forEach(function(expected) {\n            expectedEncoded.push(\n              \"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\"\n            );\n          });\n          return \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\n        });\n      }\n      warningEl.style.marginTop = \"2px\";\n      warningEl.style.marginLeft = \"2px\";\n      warningEl.className = \"parseErrorIcon\";\n      yasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\n\n      yasqe.queryValid = false;\n      break;\n    }\n  }\n  yasqe.prevQueryValid = yasqe.queryValid;\n  if (deepcheck) {\n    if (state != null && state.stack != undefined) {\n      var stack = state.stack, len = state.stack.length;\n      // Because incremental parser doesn't receive end-of-input\n      // it can't clear stack, so we have to check that whatever\n      // is left on the stack is nillable\n      if (len > 1) yasqe.queryValid = false;\n      else if (len == 1) {\n        if (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\n          yasqe.queryValid = false;\n      }\n    }\n  }\n};\n/**\n * Static Utils\n */\n// first take all CodeMirror references and store them in the YASQE object\n$.extend(root, CodeMirror);\n\n//add registrar for autocompleters\nroot.Autocompleters = {};\nroot.registerAutocompleter = function(name, constructor) {\n  root.Autocompleters[name] = constructor;\n  addCompleterToSettings(root.defaults, name);\n};\n\nroot.autoComplete = function(yasqe) {\n  //this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\n  yasqe.autocompleters.autoComplete(false);\n};\n//include the autocompleters we provide out-of-the-box\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\n\nroot.positionButtons = function(yasqe) {\n  var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n  var offset = 0;\n  if (scrollBar.is(\":visible\")) {\n    offset = scrollBar.outerWidth();\n  }\n  if (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\n};\n\n/**\n * Create a share link\n *\n * @method YASQE.createShareLink\n * @param {doc} YASQE document\n * @default {query: doc.getValue()}\n * @return object\n */\nroot.createShareLink = function(yasqe) {\n  //extend existing link, so first fetch current arguments\n  var urlParams = {};\n  if (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\n  urlParams[\"query\"] = yasqe.getValue();\n  return urlParams;\n};\nroot.getAsCurl = function(yasqe, ajaxConfig) {\n  var curl = require(\"./curl.js\");\n  return curl.createCurlString(yasqe, ajaxConfig);\n};\n/**\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\n *\n * @method YASQE.consumeShareLink\n * @param {doc} YASQE document\n */\nroot.consumeShareLink = function(yasqe, urlParams) {\n  if (urlParams && urlParams.query) {\n    yasqe.setValue(urlParams.query);\n  }\n};\nroot.drawButtons = function(yasqe) {\n  yasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\n\n  /**\n   * draw share link button\n   */\n  if (yasqe.options.createShareLink) {\n    var svgShare = $(yutils.svg.getElement(imgs.share));\n    svgShare\n      .click(function(event) {\n        event.stopPropagation();\n        var popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\n        $(\"html\").click(function() {\n          if (popup) popup.remove();\n        });\n\n        popup.click(function(event) {\n          event.stopPropagation();\n        });\n        var $input = $(\"<input>\").val(\n          location.protocol +\n            \"//\" +\n            location.host +\n            location.pathname +\n            location.search +\n            \"#\" +\n            $.param(yasqe.options.createShareLink(yasqe))\n        );\n\n        $input.focus(function() {\n          var $this = $(this);\n          $this.select();\n\n          // Work around Chrome's little problem\n          $this.mouseup(function() {\n            // Prevent further mouseup intervention\n            $this.unbind(\"mouseup\");\n            return false;\n          });\n        });\n\n        popup.empty().append($(\"<div>\", { class: \"inputWrapper\" }).append($input));\n        if (yasqe.options.createShortLink) {\n          popup.addClass(\"enableShort\");\n          $(\"<button>Shorten</button>\")\n            .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\n            .click(function() {\n              $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\n              yasqe.options.createShortLink($input.val(), function(errString, shortLink) {\n                if (errString) {\n                  $input.remove();\n                  popup.find(\".inputWrapper\").append($(\"<span>\", { class: \"shortlinkErr\" }).text(errString));\n                } else {\n                  $input.val(shortLink).focus();\n                }\n              });\n            })\n            .appendTo(popup);\n        }\n        $(\"<button>CURL</button>\")\n          .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\n          .click(function() {\n            $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\n            $input.val(root.getAsCurl(yasqe)).focus();\n          })\n          .appendTo(popup);\n        var positions = svgShare.position();\n        popup\n          .css(\"top\", positions.top + svgShare.outerHeight() + parseInt(popup.css(\"padding-top\")) + \"px\")\n          .css(\"left\", positions.left + svgShare.outerWidth() - popup.outerWidth() + \"px\");\n        $input.focus();\n      })\n      .addClass(\"yasqe_share\")\n      .attr(\"title\", \"Share your query\")\n      .appendTo(yasqe.buttons);\n  }\n\n  /**\n   * draw fullscreen button\n   */\n\n  var toggleFullscreen = $(\"<div>\", {\n    class: \"fullscreenToggleBtns\"\n  })\n    .append(\n      $(yutils.svg.getElement(imgs.fullscreen))\n        .addClass(\"yasqe_fullscreenBtn\")\n        .attr(\"title\", \"Set editor full screen\")\n        .click(function() {\n          yasqe.setOption(\"fullScreen\", true);\n        })\n    )\n    .append(\n      $(yutils.svg.getElement(imgs.smallscreen))\n        .addClass(\"yasqe_smallscreenBtn\")\n        .attr(\"title\", \"Set editor to normal size\")\n        .click(function() {\n          yasqe.setOption(\"fullScreen\", false);\n        })\n    );\n  yasqe.buttons.append(toggleFullscreen);\n\n  if (yasqe.options.sparql.showQueryButton) {\n    $(\"<div>\", {\n      class: \"yasqe_queryButton\"\n    })\n      .click(function() {\n        if ($(this).hasClass(\"query_busy\")) {\n          if (yasqe.xhr) yasqe.xhr.abort();\n          root.updateQueryButton(yasqe);\n        } else {\n          yasqe.query();\n        }\n      })\n      .appendTo(yasqe.buttons);\n    root.updateQueryButton(yasqe);\n  }\n};\n\nvar queryButtonIds = {\n  busy: \"loader\",\n  valid: \"query\",\n  error: \"queryInvalid\"\n};\n\n/**\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\n *\n * @param {doc} YASQE document\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\n */\nroot.updateQueryButton = function(yasqe, status) {\n  var queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\n  if (queryButton.length == 0) return; //no query button drawn\n\n  //detect status\n  if (!status) {\n    status = \"valid\";\n    if (yasqe.queryValid === false) status = \"error\";\n  }\n\n  if (status != yasqe.queryStatus) {\n    queryButton.empty().removeClass(function(index, classNames) {\n      return classNames\n        .split(\" \")\n        .filter(function(c) {\n          //remove classname from previous status\n          return c.indexOf(\"query_\") == 0;\n        })\n        .join(\" \");\n    });\n\n    if (status == \"busy\") {\n      queryButton.append(\n        $(\"<div>\", {\n          class: \"loader\"\n        })\n      );\n      yasqe.queryStatus = status;\n    } else if (status == \"valid\" || status == \"error\") {\n      queryButton.addClass(\"query_\" + status);\n      yutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\n      yasqe.queryStatus = status;\n    }\n  }\n};\n/**\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\n *\n * @method YASQE.fromTextArea\n * @param textArea {DOM element}\n * @param config {object}\n * @returns {doc} YASQE document\n */\nroot.fromTextArea = function(textAreaEl, config) {\n  config = extendConfig(config);\n  //add yasqe div as parent (needed for styles to be manageable and scoped).\n  //In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\n  var rootEl = $(\"<div>\", {\n    class: \"yasqe\"\n  })\n    .insertBefore($(textAreaEl))\n    .append($(textAreaEl));\n  var yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\n  postProcessCmElement(yasqe);\n  return yasqe;\n};\n\nroot.storeQuery = function(yasqe) {\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n  if (storageId) {\n    yutils.storage.set(storageId, yasqe.getValue(), \"month\", yasqe.options.onQuotaExceeded);\n  }\n};\nroot.commentLines = function(yasqe) {\n  var startLine = yasqe.getCursor(true).line;\n  var endLine = yasqe.getCursor(false).line;\n  var min = Math.min(startLine, endLine);\n  var max = Math.max(startLine, endLine);\n\n  // if all lines start with #, remove this char. Otherwise add this char\n  var linesAreCommented = true;\n  for (var i = min; i <= max; i++) {\n    var line = yasqe.getLine(i);\n    if (line.length == 0 || line.substring(0, 1) != \"#\") {\n      linesAreCommented = false;\n      break;\n    }\n  }\n  for (var i = min; i <= max; i++) {\n    if (linesAreCommented) {\n      // lines are commented, so remove comments\n      yasqe.replaceRange(\n        \"\",\n        {\n          line: i,\n          ch: 0\n        },\n        {\n          line: i,\n          ch: 1\n        }\n      );\n    } else {\n      // Not all lines are commented, so add comments\n      yasqe.replaceRange(\"#\", {\n        line: i,\n        ch: 0\n      });\n    }\n  }\n};\n\nroot.copyLineUp = function(yasqe) {\n  var cursor = yasqe.getCursor();\n  var lineCount = yasqe.lineCount();\n  // First create new empty line at end of text\n  yasqe.replaceRange(\"\\n\", {\n    line: lineCount - 1,\n    ch: yasqe.getLine(lineCount - 1).length\n  });\n  // Copy all lines to their next line\n  for (var i = lineCount; i > cursor.line; i--) {\n    var line = yasqe.getLine(i - 1);\n    yasqe.replaceRange(\n      line,\n      {\n        line: i,\n        ch: 0\n      },\n      {\n        line: i,\n        ch: yasqe.getLine(i).length\n      }\n    );\n  }\n};\nroot.copyLineDown = function(yasqe) {\n  root.copyLineUp(yasqe);\n  // Make sure cursor goes one down (we are copying downwards)\n  var cursor = yasqe.getCursor();\n  cursor.line++;\n  yasqe.setCursor(cursor);\n};\nroot.doAutoFormat = function(yasqe) {\n  if (!yasqe.somethingSelected()) yasqe.execCommand(\"selectAll\");\n  var to = {\n    line: yasqe.getCursor(false).line,\n    ch: yasqe.getSelection().length\n  };\n  autoFormatRange(yasqe, yasqe.getCursor(true), to);\n};\n\nvar autoFormatRange = function(yasqe, from, to) {\n  var absStart = yasqe.indexFromPos(from);\n  var absEnd = yasqe.indexFromPos(to);\n  // Insert additional line breaks where necessary according to the\n  // mode's syntax\n  var res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\n\n  // Replace and auto-indent the range\n  yasqe.operation(function() {\n    yasqe.replaceRange(res, from, to);\n    var startLine = yasqe.posFromIndex(absStart).line;\n    var endLine = yasqe.posFromIndex(absStart + res.length).line;\n    for (var i = startLine; i <= endLine; i++) {\n      yasqe.indentLine(i, \"smart\");\n    }\n  });\n};\n\nvar autoFormatLineBreaks = function(text, start, end) {\n  text = text.substring(start, end);\n  var breakAfterArray = [\n    [\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\n    [\"keyword\", \"ws\", \"uri\"] // i.e. base\n  ];\n  var breakAfterCharacters = [\"{\", \".\", \";\"];\n  var breakBeforeCharacters = [\"}\"];\n  var getBreakType = function(stringVal, type) {\n    for (var i = 0; i < breakAfterArray.length; i++) {\n      if (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf().toString()) {\n        return 1;\n      }\n    }\n    for (var i = 0; i < breakAfterCharacters.length; i++) {\n      if (stringVal == breakAfterCharacters[i]) {\n        return 1;\n      }\n    }\n    for (var i = 0; i < breakBeforeCharacters.length; i++) {\n      // don't want to issue 'breakbefore' AND 'breakafter', so check\n      // current line\n      if ($.trim(currentLine) != \"\" && stringVal == breakBeforeCharacters[i]) {\n        return -1;\n      }\n    }\n    return 0;\n  };\n  var formattedQuery = \"\";\n  var currentLine = \"\";\n  var stackTrace = [];\n  CodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\n    stackTrace.push(type);\n    var breakType = getBreakType(stringVal, type);\n    if (breakType != 0) {\n      if (breakType == 1) {\n        formattedQuery += stringVal + \"\\n\";\n        currentLine = \"\";\n      } else {\n        // (-1)\n        formattedQuery += \"\\n\" + stringVal;\n        currentLine = stringVal;\n      }\n      stackTrace = [];\n    } else {\n      currentLine += stringVal;\n      formattedQuery += stringVal;\n    }\n    if (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\") stackTrace = [];\n  });\n  return $.trim(formattedQuery.replace(/\\n\\s*\\n/g, \"\\n\"));\n};\n\nrequire(\"./sparql.js\"), require(\"./defaults.js\");\nroot.$ = $;\nroot.version = {\n  CodeMirror: CodeMirror.version,\n  YASQE: require(\"../package.json\").version,\n  jquery: $.fn.jquery,\n  \"yasgui-utils\": yutils.version\n};\n","var CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), tokenUtils = require(\"./tokenUtils.js\");\n\n(\"use strict\");\nvar lookFor = \"PREFIX\";\nmodule.exports = {\n  findFirstPrefixLine: function(cm) {\n    var lastLine = cm.lastLine();\n    for (var i = 0; i <= lastLine; ++i) {\n      if (findFirstPrefix(cm, i) >= 0) {\n        return i;\n      }\n    }\n  }\n};\n\nfunction findFirstPrefix(cm, line, ch, lineText) {\n  if (!ch) ch = 0;\n  if (!lineText) lineText = cm.getLine(line);\n  lineText = lineText.toUpperCase();\n  for (var at = ch, pass = 0; ; ) {\n    var found = lineText.indexOf(lookFor, at);\n    if (found == -1) {\n      //no prefix on this line\n      if (pass == 1) break;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < ch) break;\n    var tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n    if (!/^(comment|string)/.test(tokenType)) return found + 1;\n    at = found - 1;\n    //Could not find a prefix, no use looping any further. Probably invalid query\n    if (at === pass) break;\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh, tokenType;\n\n  function hasPreviousPrefix() {\n    var hasPreviousPrefix = false;\n    for (var i = line - 1; i >= 0; i--) {\n      if (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\n        hasPreviousPrefix = true;\n        break;\n      }\n    }\n    return hasPreviousPrefix;\n  }\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0; ; ) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n  var getLastPrefixPos = function(line, ch) {\n    var prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\n    if (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\n    var prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\n    if (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\n    var prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\n    if (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\n    return prefixUri.end;\n  };\n\n  //only use opening prefix declaration\n  if (hasPreviousPrefix()) return;\n  var prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\n\n  if (prefixStart == null) return;\n  var stopAt = \"{\"; //if this char is there, we won't have a chance of finding more prefixes\n  var stopAtNextLine = false;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  var prefixEndChar = getLastPrefixPos(line, prefixStart);\n  var prefixEndLine = line;\n\n  outer:\n  for (var i = line; i <= lastLine; ++i) {\n    if (stopAtNextLine) break;\n    var text = cm.getLine(i), pos = i == line ? prefixStart + 1 : 0;\n\n    for (;;) {\n      if (!stopAtNextLine && text.indexOf(stopAt) >= 0) stopAtNextLine = true;\n\n      var nextPrefixDeclaration = text.toUpperCase().indexOf(lookFor, pos);\n\n      if (nextPrefixDeclaration >= 0) {\n        if ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\n          prefixEndChar = endCh;\n          prefixEndLine = i;\n          pos = prefixEndChar;\n        }\n        pos++;\n      } else {\n        break;\n      }\n    }\n  }\n  return {\n    from: CodeMirror.Pos(line, prefixStart + lookFor.length),\n    to: CodeMirror.Pos(prefixEndLine, prefixEndChar)\n  };\n});\n","\"use strict\";\n/**\n * Append prefix declaration to list of prefixes in query window.\n *\n * @param yasqe\n * @param prefix\n */\nvar addPrefixes = function(yasqe, prefixes) {\n  var existingPrefixes = yasqe.getPrefixesFromQuery();\n  //for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\n  if (typeof prefixes == \"string\") {\n    addPrefixAsString(yasqe, prefixes);\n  } else {\n    for (var pref in prefixes) {\n      if (!(pref in existingPrefixes)) addPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\n    }\n  }\n  yasqe.collapsePrefixes(false);\n};\n\nvar addPrefixAsString = function(yasqe, prefixString) {\n  var lastPrefix = null;\n  var lastPrefixLine = 0;\n  var numLines = yasqe.lineCount();\n  for (var i = 0; i < numLines; i++) {\n    var firstToken = yasqe.getNextNonWsToken(i);\n    if (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\n      lastPrefix = firstToken;\n      lastPrefixLine = i;\n    }\n  }\n\n  if (lastPrefix == null) {\n    yasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\n      line: 0,\n      ch: 0\n    });\n  } else {\n    var previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\n    yasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\n      line: lastPrefixLine\n    });\n  }\n  yasqe.collapsePrefixes(false);\n};\nvar removePrefixes = function(yasqe, prefixes) {\n  var escapeRegex = function(string) {\n    //taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  };\n  for (var pref in prefixes) {\n    yasqe.setValue(\n      yasqe\n        .getValue()\n        .replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), \"\")\n    );\n  }\n  yasqe.collapsePrefixes(false);\n};\n\n/**\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\n *\n * @param cm\n * @returns {Array}\n */\nvar getPrefixesFromQuery = function(yasqe) {\n  //Use precise here. We want to be sure we use the most up to date state. If we're\n  //not, we might get outdated prefixes from the current query (creating loops such\n  //as https://github.com/OpenTriply/YASGUI/issues/84)\n  return yasqe.getTokenAt({ line: yasqe.lastLine(), ch: yasqe.getLine(yasqe.lastLine()).length }, true).state.prefixes;\n};\n\n/**\n * Get the used indentation for a certain line\n *\n * @param yasqe\n * @param line\n * @param charNumber\n * @returns\n */\nvar getIndentFromLine = function(yasqe, line, charNumber) {\n  if (charNumber == undefined) charNumber = 1;\n  var token = yasqe.getTokenAt({\n    line: line,\n    ch: charNumber\n  });\n  if (token == null || token == undefined || token.type != \"ws\") {\n    return \"\";\n  } else {\n    return token.string + getIndentFromLine(yasqe, line, token.end + 1);\n  }\n};\n\nmodule.exports = {\n  addPrefixes: addPrefixes,\n  getPrefixesFromQuery: getPrefixesFromQuery,\n  removePrefixes: removePrefixes\n};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n  utils = require(\"./utils.js\"),\n  YASQE = require(\"./main.js\");\n\nYASQE.getAjaxConfig = function(yasqe, callbackOrConfig) {\n  var callback = typeof callbackOrConfig == \"function\" ? callbackOrConfig : null;\n  var config = typeof callbackOrConfig == \"object\" ? callbackOrConfig : {};\n\n  if (yasqe.options.sparql) config = $.extend({}, yasqe.options.sparql, config);\n\n  //for backwards compatability, make sure we copy sparql handlers to sparql callbacks\n  if (config.handlers) $.extend(true, config.callbacks, config.handlers);\n\n  if (!config.endpoint || config.endpoint.length == 0) return; // nothing to query!\n  var queryMode = yasqe.getQueryMode();\n  /**\n\t * initialize ajax config\n\t */\n  var ajaxConfig = {\n    url: typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint,\n    type: queryMode == \"update\"\n      ? \"POST\"\n      : typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod,\n    headers: {\n      Accept: getAcceptHeader(yasqe, config)\n    }\n  };\n  if (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\n  /**\n\t * add complete, beforesend, etc callbacks (if specified)\n\t */\n  var handlerDefined = false;\n  if (config.callbacks) {\n    for (var handler in config.callbacks) {\n      if (config.callbacks[handler]) {\n        handlerDefined = true;\n        ajaxConfig[handler] = config.callbacks[handler];\n      }\n    }\n  }\n  if (ajaxConfig.type === \"GET\") {\n    //we need to do encoding ourselve, as jquery does not properly encode the url string\n    //https://github.com/OpenTriply/YASGUI/issues/75\n    var first = true;\n    $.each(yasqe.getUrlArguments(config), function(key, val) {\n      ajaxConfig.url += (first ? \"?\" : \"&\") + val.name + \"=\" + encodeURIComponent(val.value);\n      first = false;\n    });\n  } else {\n    ajaxConfig.data = yasqe.getUrlArguments(config);\n  }\n  if (!handlerDefined && !callback) return; // ok, we can query, but have no callbacks. just stop now\n\n  // if only callback is passed as arg, add that on as 'onComplete' callback\n  if (callback) ajaxConfig.complete = callback;\n\n  /**\n\t * merge additional request headers\n\t */\n  if (config.headers && !$.isEmptyObject(config.headers)) $.extend(ajaxConfig.headers, config.headers);\n\n  var queryStart = new Date();\n  var updateYasqe = function() {\n    yasqe.lastQueryDuration = new Date() - queryStart;\n    YASQE.updateQueryButton(yasqe);\n    yasqe.setBackdrop(false);\n  };\n  //Make sure the query button is updated again on complete\n  var completeCallbacks = [\n    function() {\n      require(\"./main.js\").signal(yasqe, \"queryFinish\", arguments);\n    },\n    updateYasqe\n  ];\n\n  if (ajaxConfig.complete) {\n    completeCallbacks.push(ajaxConfig.complete);\n  }\n  ajaxConfig.complete = completeCallbacks;\n  return ajaxConfig;\n};\n\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\n  YASQE.signal(yasqe, \"query\", yasqe, callbackOrConfig);\n  YASQE.updateQueryButton(yasqe, \"busy\");\n  yasqe.setBackdrop(true);\n  yasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\n};\n\nYASQE.getUrlArguments = function(yasqe, config) {\n  var queryMode = yasqe.getQueryMode();\n  var data = [\n    {\n      name: utils.getString(yasqe, yasqe.options.sparql.queryName),\n      value: config.getQueryForAjax ? config.getQueryForAjax(yasqe) : yasqe.getValue()\n    }\n  ];\n\n  /**\n\t * add named graphs to ajax config\n\t */\n  if (config.namedGraphs && config.namedGraphs.length > 0) {\n    var argName = queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \";\n    for (var i = 0; i < config.namedGraphs.length; i++)\n      data.push({\n        name: argName,\n        value: config.namedGraphs[i]\n      });\n  }\n  /**\n\t * add default graphs to ajax config\n\t */\n  if (config.defaultGraphs && config.defaultGraphs.length > 0) {\n    var argName = queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \";\n    for (var i = 0; i < config.defaultGraphs.length; i++)\n      data.push({\n        name: argName,\n        value: config.defaultGraphs[i]\n      });\n  }\n\n  /**\n\t * add additional request args\n\t */\n  if (config.args && config.args.length > 0) $.merge(data, config.args);\n\n  return data;\n};\nvar getAcceptHeader = function(yasqe, config) {\n  var acceptHeader = null;\n  if (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\n    //this is the old config. For backwards compatability, keep supporting it\n    if (typeof config.acceptHeader == \"function\") {\n      acceptHeader = config.acceptHeader(yasqe);\n    } else {\n      acceptHeader = config.acceptHeader;\n    }\n  } else {\n    if (yasqe.getQueryMode() == \"update\") {\n      acceptHeader = typeof config.acceptHeader == \"function\"\n        ? config.acceptHeaderUpdate(yasqe)\n        : config.acceptHeaderUpdate;\n    } else {\n      var qType = yasqe.getQueryType();\n      if (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\n        acceptHeader = typeof config.acceptHeaderGraph == \"function\"\n          ? config.acceptHeaderGraph(yasqe)\n          : config.acceptHeaderGraph;\n      } else {\n        acceptHeader = typeof config.acceptHeaderSelect == \"function\"\n          ? config.acceptHeaderSelect(yasqe)\n          : config.acceptHeaderSelect;\n      }\n    }\n  }\n  return acceptHeader;\n};\n\nmodule.exports = {\n  getAjaxConfig: YASQE.getAjaxConfig\n};\n","\"use strict\";\n/**\n * When typing a query, this query is sometimes syntactically invalid, causing\n * the current tokens to be incorrect This causes problem for autocompletion.\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\n * these\n * \n * @param yasqe {doc}\n * @param token {object}\n * @param cursor {object}\n * @return token {object}\n * @method YASQE.getCompleteToken\n */\nvar getCompleteToken = function(yasqe, token, cur) {\n  if (!cur) {\n    cur = yasqe.getCursor();\n  }\n  if (!token) {\n    token = yasqe.getTokenAt(cur);\n  }\n  var prevToken = yasqe.getTokenAt({\n    line: cur.line,\n    ch: token.start\n  });\n  // not start of line, and not whitespace\n  if (prevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\") {\n    token.start = prevToken.start;\n    token.string = prevToken.string + token.string;\n    return getCompleteToken(yasqe, token, {\n      line: cur.line,\n      ch: prevToken.start\n    }); // recursively, might have multiple tokens which it should include\n  } else if (token.type != null && token.type == \"ws\") {\n    //always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\n    token.start = token.start + 1;\n    token.string = token.string.substring(1);\n    return token;\n  } else {\n    return token;\n  }\n};\nvar getPreviousNonWsToken = function(yasqe, line, token) {\n  var previousToken = yasqe.getTokenAt({\n    line: line,\n    ch: token.start\n  });\n  if (previousToken != null && previousToken.type == \"ws\") {\n    previousToken = getPreviousNonWsToken(yasqe, line, previousToken);\n  }\n  return previousToken;\n};\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\n  if (charNumber == undefined) charNumber = 1;\n  var token = yasqe.getTokenAt({\n    line: lineNumber,\n    ch: charNumber\n  });\n  if (token == null || token == undefined || token.end < charNumber) {\n    return null;\n  }\n  if (token.type == \"ws\") {\n    return getNextNonWsToken(yasqe, lineNumber, token.end + 1);\n  }\n  return token;\n};\n\nmodule.exports = {\n  getPreviousNonWsToken: getPreviousNonWsToken,\n  getCompleteToken: getCompleteToken,\n  getNextNonWsToken: getNextNonWsToken\n};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\");\n\n/**\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\n * Requirements: \n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\n * \t\tuse html as content\n */\nmodule.exports = function(yasqe, parent, html) {\n  var parent = $(parent);\n  var tooltip;\n  parent.hover(\n    function() {\n      if (typeof html == \"function\") html = html();\n      tooltip = $(\"<div>\").addClass(\"yasqe_tooltip\").html(html).appendTo(parent);\n      repositionTooltip();\n    },\n    function() {\n      $(\".yasqe_tooltip\").remove();\n    }\n  );\n\n  /**\n\t * only need to take into account top and bottom offset for this usecase\n\t */\n  var repositionTooltip = function() {\n    if ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\n      //shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\n      tooltip.css(\"bottom\", \"auto\");\n      tooltip.css(\"top\", \"26px\");\n    }\n  };\n};\n","\"use strict\";\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n\nvar keyExists = function(objectToTest, key) {\n  var exists = false;\n  try {\n    if (objectToTest[key] !== undefined) exists = true;\n  } catch (e) {}\n  return exists;\n};\n\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\n  var persistencyId = null;\n\n  if (persistentIdCreator) {\n    if (typeof persistentIdCreator == \"string\") {\n      persistencyId = persistentIdCreator;\n    } else {\n      persistencyId = persistentIdCreator(yasqe);\n    }\n  }\n  return persistencyId;\n};\n\nvar elementsOverlap = (function() {\n  function getPositions(elem) {\n    var pos, width, height;\n    pos = $(elem).offset();\n    width = $(elem).width();\n    height = $(elem).height();\n    return [[pos.left, pos.left + width], [pos.top, pos.top + height]];\n  }\n\n  function comparePositions(p1, p2) {\n    var r1, r2;\n    r1 = p1[0] < p2[0] ? p1 : p2;\n    r2 = p1[0] < p2[0] ? p2 : p1;\n    return r1[1] > r2[0] || r1[0] === r2[0];\n  }\n\n  return function(a, b) {\n    var pos1 = getPositions(a), pos2 = getPositions(b);\n    return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\n  };\n})();\n\nvar getString = function(yasqe, item) {\n  if (typeof item == \"function\") {\n    return item(yasqe);\n  } else {\n    return item;\n  }\n};\nmodule.exports = {\n  keyExists: keyExists,\n  getPersistencyId: getPersistencyId,\n  elementsOverlap: elementsOverlap,\n  getString: getString\n};\n"]}